
PUTM_EV_TELEMETRY_2022.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ee4  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080050a0  080050a0  000150a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050f0  080050f0  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  080050f0  080050f0  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  080050f0  080050f0  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050f0  080050f0  000150f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080050f4  080050f4  000150f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080050f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  20000080  08005178  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000214  08005178  00020214  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a531  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031c3  00000000  00000000  0003a5e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f8  00000000  00000000  0003d7a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fd0  00000000  00000000  0003e8a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030391  00000000  00000000  0003f870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013621  00000000  00000000  0006fc01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011da7c  00000000  00000000  00083222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a0c9e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a04  00000000  00000000  001a0cf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000080 	.word	0x20000080
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08005088 	.word	0x08005088

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000084 	.word	0x20000084
 80001f8:	08005088 	.word	0x08005088

080001fc <_ZN11Can_Message9return_IDEv>:
		DLC  = 0;
		Data = 0;
	}
	~Can_Message();
//////////Returns/////////////
	uint16_t return_ID()
 80001fc:	b480      	push	{r7}
 80001fe:	b083      	sub	sp, #12
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
	{
		return ID;
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	881b      	ldrh	r3, [r3, #0]
	}
 8000208:	4618      	mov	r0, r3
 800020a:	370c      	adds	r7, #12
 800020c:	46bd      	mov	sp, r7
 800020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000212:	4770      	bx	lr

08000214 <_ZN11Can_Message11return_DataEi>:
	uint8_t return_Data(int i)
 8000214:	b480      	push	{r7}
 8000216:	b083      	sub	sp, #12
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
 800021c:	6039      	str	r1, [r7, #0]
	{
		return Data[i];
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	685a      	ldr	r2, [r3, #4]
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	4413      	add	r3, r2
 8000226:	781b      	ldrb	r3, [r3, #0]
	}
 8000228:	4618      	mov	r0, r3
 800022a:	370c      	adds	r7, #12
 800022c:	46bd      	mov	sp, r7
 800022e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000232:	4770      	bx	lr

08000234 <_ZN17pointer_to_parserC1EPFvP8Packet_1P11Can_MessageP6StatesEi>:

class pointer_to_parser{
public:
	void (*ptr)(Packet_1*, Can_Message*, States*);
	int ID;
	pointer_to_parser(void (PTR)(Packet_1*, Can_Message*, States*), int id)
 8000234:	b480      	push	{r7}
 8000236:	b085      	sub	sp, #20
 8000238:	af00      	add	r7, sp, #0
 800023a:	60f8      	str	r0, [r7, #12]
 800023c:	60b9      	str	r1, [r7, #8]
 800023e:	607a      	str	r2, [r7, #4]
	{
		ptr = PTR;
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	68ba      	ldr	r2, [r7, #8]
 8000244:	601a      	str	r2, [r3, #0]
		ID = id;
 8000246:	68fb      	ldr	r3, [r7, #12]
 8000248:	687a      	ldr	r2, [r7, #4]
 800024a:	605a      	str	r2, [r3, #4]
	}
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	4618      	mov	r0, r3
 8000250:	3714      	adds	r7, #20
 8000252:	46bd      	mov	sp, r7
 8000254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000258:	4770      	bx	lr
	...

0800025c <_Z20Create_parsing_arrayv>:
* This function creates pointer_to_parser objects, which contains ID and pointer to parsing function, and puts them into a array.
* @param: none
* @retval none
*/
void Create_parsing_array()
{
 800025c:	b590      	push	{r4, r7, lr}
 800025e:	b085      	sub	sp, #20
 8000260:	af00      	add	r7, sp, #0
	 void (*APPS_ptr)  (Packet_1*, Can_Message*, States*) = APPS_Parser;
 8000262:	4b12      	ldr	r3, [pc, #72]	; (80002ac <_Z20Create_parsing_arrayv+0x50>)
 8000264:	60fb      	str	r3, [r7, #12]
	 void (*BMS_LV_ptr)(Packet_1*, Can_Message*, States*) = BMS_LV_Parser;
 8000266:	4b12      	ldr	r3, [pc, #72]	; (80002b0 <_Z20Create_parsing_arrayv+0x54>)
 8000268:	60bb      	str	r3, [r7, #8]
	 	 	 	 	 	 	 	 /*
	 	 	 	 	 	 	 	  *
	 	 	 	 	 	 	 	  *
	 	 	 	 	 	 	 	  *
	 	 	 	 	 	 	 	  */
	 pointer_to_parser* APPS   = new pointer_to_parser(APPS_ptr, APPS_ID);
 800026a:	2008      	movs	r0, #8
 800026c:	f004 fdf4 	bl	8004e58 <_Znwj>
 8000270:	4603      	mov	r3, r0
 8000272:	461c      	mov	r4, r3
 8000274:	220a      	movs	r2, #10
 8000276:	68f9      	ldr	r1, [r7, #12]
 8000278:	4620      	mov	r0, r4
 800027a:	f7ff ffdb 	bl	8000234 <_ZN17pointer_to_parserC1EPFvP8Packet_1P11Can_MessageP6StatesEi>
 800027e:	607c      	str	r4, [r7, #4]
	 pointer_to_parser* BMS_LV = new pointer_to_parser(BMS_LV_ptr, BMS_LV_ID);
 8000280:	2008      	movs	r0, #8
 8000282:	f004 fde9 	bl	8004e58 <_Znwj>
 8000286:	4603      	mov	r3, r0
 8000288:	461c      	mov	r4, r3
 800028a:	220b      	movs	r2, #11
 800028c:	68b9      	ldr	r1, [r7, #8]
 800028e:	4620      	mov	r0, r4
 8000290:	f7ff ffd0 	bl	8000234 <_ZN17pointer_to_parserC1EPFvP8Packet_1P11Can_MessageP6StatesEi>
 8000294:	603c      	str	r4, [r7, #0]
	 	 	 	 	 	 	 	 /*
	 	 	 	 	 	 	 	  *
	 	 	 	 	 	 	 	  *
	 	 	 	 	 	 	 	  *
	 	 	 	 	 	 	 	  */
	 parsing_array[0] = APPS;
 8000296:	4a07      	ldr	r2, [pc, #28]	; (80002b4 <_Z20Create_parsing_arrayv+0x58>)
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	6013      	str	r3, [r2, #0]
	 parsing_array[1] = BMS_LV;
 800029c:	4a05      	ldr	r2, [pc, #20]	; (80002b4 <_Z20Create_parsing_arrayv+0x58>)
 800029e:	683b      	ldr	r3, [r7, #0]
 80002a0:	6053      	str	r3, [r2, #4]
	 	 	 	 	 	 	 	 /*
	 	 	 	 	 	 	 	  *
	 	 	 	 	 	 	 	  *
	 	 	 	 	 	 	 	  *
	 	 	 	 	 	 	 	  */
}
 80002a2:	bf00      	nop
 80002a4:	3714      	adds	r7, #20
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd90      	pop	{r4, r7, pc}
 80002aa:	bf00      	nop
 80002ac:	080003b5 	.word	0x080003b5
 80002b0:	0800040f 	.word	0x0800040f
 80002b4:	2000009c 	.word	0x2000009c

080002b8 <_ZN8Packet_113Choose_ParserEP11Can_MessagePS_P6States>:
* @param: Pointer to data packet
* @param: Pointer to can message.
* @retval true if matched, false if not.
*/
bool Packet_1::Choose_Parser(Can_Message *msg1, Packet_1 *pck1, States *st1)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b084      	sub	sp, #16
 80002bc:	af00      	add	r7, sp, #0
 80002be:	60f8      	str	r0, [r7, #12]
 80002c0:	60b9      	str	r1, [r7, #8]
 80002c2:	607a      	str	r2, [r7, #4]
 80002c4:	603b      	str	r3, [r7, #0]
	if(msg1->return_ID() == APPS_ID)
 80002c6:	68b8      	ldr	r0, [r7, #8]
 80002c8:	f7ff ff98 	bl	80001fc <_ZN11Can_Message9return_IDEv>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b0a      	cmp	r3, #10
 80002d0:	bf0c      	ite	eq
 80002d2:	2301      	moveq	r3, #1
 80002d4:	2300      	movne	r3, #0
 80002d6:	b2db      	uxtb	r3, r3
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d006      	beq.n	80002ea <_ZN8Packet_113Choose_ParserEP11Can_MessagePS_P6States+0x32>
	{
		parsing_array[0]->ptr(pck1, msg1, st1);
 80002dc:	4b05      	ldr	r3, [pc, #20]	; (80002f4 <_ZN8Packet_113Choose_ParserEP11Can_MessagePS_P6States+0x3c>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	683a      	ldr	r2, [r7, #0]
 80002e4:	68b9      	ldr	r1, [r7, #8]
 80002e6:	6878      	ldr	r0, [r7, #4]
 80002e8:	4798      	blx	r3
	}
return true;
 80002ea:	2301      	movs	r3, #1
}
 80002ec:	4618      	mov	r0, r3
 80002ee:	3710      	adds	r7, #16
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	2000009c 	.word	0x2000009c

080002f8 <_ZN8Packet_112Prepare_DataEt>:
* This function assigns data into 32-bytes long buffer, that is being forwarded to the radio.
* @param: flag_buffer variable, wich is used to indicate missing frames in packet.
* @retval Pointer to DataBuffer1.
*/
uint8_t * Packet_1::Prepare_Data(uint16_t flag_buffer)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
 8000300:	460b      	mov	r3, r1
 8000302:	807b      	strh	r3, [r7, #2]
	//Buffer Indetificator.
	DataBuffer1[0] = 'a';
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	2261      	movs	r2, #97	; 0x61
 8000308:	729a      	strb	r2, [r3, #10]
	//APPS
	DataBuffer1[1] = APPS>>8;
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	881b      	ldrh	r3, [r3, #0]
 800030e:	121b      	asrs	r3, r3, #8
 8000310:	b2da      	uxtb	r2, r3
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	72da      	strb	r2, [r3, #11]
	DataBuffer1[2] = APPS;
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	881b      	ldrh	r3, [r3, #0]
 800031a:	b2da      	uxtb	r2, r3
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	731a      	strb	r2, [r3, #12]
	//Motor RPM
	DataBuffer1[3] = Motor_RPM>>8;
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	885b      	ldrh	r3, [r3, #2]
 8000324:	121b      	asrs	r3, r3, #8
 8000326:	b2da      	uxtb	r2, r3
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	735a      	strb	r2, [r3, #13]
	DataBuffer1[4] = Motor_RPM;
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	885b      	ldrh	r3, [r3, #2]
 8000330:	b2da      	uxtb	r2, r3
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	739a      	strb	r2, [r3, #14]
	//RMS Current
	DataBuffer1[5] = RMS_Current>>8;
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	889b      	ldrh	r3, [r3, #4]
 800033a:	121b      	asrs	r3, r3, #8
 800033c:	b2da      	uxtb	r2, r3
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	73da      	strb	r2, [r3, #15]
	DataBuffer1[6] = RMS_Current;
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	889b      	ldrh	r3, [r3, #4]
 8000346:	b2da      	uxtb	r2, r3
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	741a      	strb	r2, [r3, #16]

	DataBuffer1[30] = flag_buffer>>8;
 800034c:	887b      	ldrh	r3, [r7, #2]
 800034e:	121b      	asrs	r3, r3, #8
 8000350:	b2da      	uxtb	r2, r3
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	DataBuffer1[31] = flag_buffer;
 8000358:	887b      	ldrh	r3, [r7, #2]
 800035a:	b2da      	uxtb	r2, r3
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//Add flag_buffer to DataBuffer;
	return DataBuffer1;
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	330a      	adds	r3, #10
}
 8000366:	4618      	mov	r0, r3
 8000368:	370c      	adds	r7, #12
 800036a:	46bd      	mov	sp, r7
 800036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000370:	4770      	bx	lr

08000372 <_ZN8Packet_112Clear_PacketEv>:
* This function sets all fields in pck1 to 0.
* @param: none.
* @retval none.
*/
void Packet_1::Clear_Packet()
{
 8000372:	b580      	push	{r7, lr}
 8000374:	b082      	sub	sp, #8
 8000376:	af00      	add	r7, sp, #0
 8000378:	6078      	str	r0, [r7, #4]
	memset(DataBuffer1, 0, sizeof(DataBuffer1));
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	330a      	adds	r3, #10
 800037e:	2220      	movs	r2, #32
 8000380:	2100      	movs	r1, #0
 8000382:	4618      	mov	r0, r3
 8000384:	f004 fdbc 	bl	8004f00 <memset>
}
 8000388:	bf00      	nop
 800038a:	3708      	adds	r7, #8
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}

08000390 <_ZN6States19Build_State_MessageEv>:

uint8_t * States::Build_State_Message()
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
	Data_Buffer1[0] = 'a';
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	2261      	movs	r2, #97	; 0x61
 800039c:	709a      	strb	r2, [r3, #2]
	Data_Buffer1[1] = 1;//APPS State etc...
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	2201      	movs	r2, #1
 80003a2:	70da      	strb	r2, [r3, #3]
	 *
	 *
	 *
	 *
	 */
	return Data_Buffer1;
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	3302      	adds	r3, #2
}
 80003a8:	4618      	mov	r0, r3
 80003aa:	370c      	adds	r7, #12
 80003ac:	46bd      	mov	sp, r7
 80003ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b2:	4770      	bx	lr

080003b4 <_Z11APPS_ParserP8Packet_1P11Can_MessageP6States>:

void APPS_Parser(Packet_1 *pck1, Can_Message *msg1, States *st1)
{
 80003b4:	b590      	push	{r4, r7, lr}
 80003b6:	b085      	sub	sp, #20
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	60f8      	str	r0, [r7, #12]
 80003bc:	60b9      	str	r1, [r7, #8]
 80003be:	607a      	str	r2, [r7, #4]
	//Update flag_buffer
	pck1->flag_buffer = pck1->flag_buffer | 0x01;
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80003c6:	f043 0301 	orr.w	r3, r3, #1
 80003ca:	b29a      	uxth	r2, r3
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	//Parse Data
	pck1->APPS = msg1->return_Data(0) << 8 | msg1->return_Data(1);
 80003d2:	2100      	movs	r1, #0
 80003d4:	68b8      	ldr	r0, [r7, #8]
 80003d6:	f7ff ff1d 	bl	8000214 <_ZN11Can_Message11return_DataEi>
 80003da:	4603      	mov	r3, r0
 80003dc:	021b      	lsls	r3, r3, #8
 80003de:	b21c      	sxth	r4, r3
 80003e0:	2101      	movs	r1, #1
 80003e2:	68b8      	ldr	r0, [r7, #8]
 80003e4:	f7ff ff16 	bl	8000214 <_ZN11Can_Message11return_DataEi>
 80003e8:	4603      	mov	r3, r0
 80003ea:	b21b      	sxth	r3, r3
 80003ec:	4323      	orrs	r3, r4
 80003ee:	b21b      	sxth	r3, r3
 80003f0:	b29a      	uxth	r2, r3
 80003f2:	68fb      	ldr	r3, [r7, #12]
 80003f4:	801a      	strh	r2, [r3, #0]
	//Parse device state
	st1->APPS_State = msg1->return_Data(8);
 80003f6:	2108      	movs	r1, #8
 80003f8:	68b8      	ldr	r0, [r7, #8]
 80003fa:	f7ff ff0b 	bl	8000214 <_ZN11Can_Message11return_DataEi>
 80003fe:	4603      	mov	r3, r0
 8000400:	461a      	mov	r2, r3
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	701a      	strb	r2, [r3, #0]
}
 8000406:	bf00      	nop
 8000408:	3714      	adds	r7, #20
 800040a:	46bd      	mov	sp, r7
 800040c:	bd90      	pop	{r4, r7, pc}

0800040e <_Z13BMS_LV_ParserP8Packet_1P11Can_MessageP6States>:

void BMS_LV_Parser(Packet_1 *pck1, Can_Message *msg1, States *st1)
{
 800040e:	b480      	push	{r7}
 8000410:	b085      	sub	sp, #20
 8000412:	af00      	add	r7, sp, #0
 8000414:	60f8      	str	r0, [r7, #12]
 8000416:	60b9      	str	r1, [r7, #8]
 8000418:	607a      	str	r2, [r7, #4]



}
 800041a:	bf00      	nop
 800041c:	3714      	adds	r7, #20
 800041e:	46bd      	mov	sp, r7
 8000420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000424:	4770      	bx	lr
	...

08000428 <_Z8CAN_Initv>:
* This function starts CAN protocol and activates interrupt from RX FIFO
* @param: none
* @retval none
*/
void CAN_Init()
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0

	HAL_CAN_Start(&hcan1);
 800042c:	4804      	ldr	r0, [pc, #16]	; (8000440 <_Z8CAN_Initv+0x18>)
 800042e:	f001 f9ee 	bl	800180e <HAL_CAN_Start>

	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000432:	2102      	movs	r1, #2
 8000434:	4802      	ldr	r0, [pc, #8]	; (8000440 <_Z8CAN_Initv+0x18>)
 8000436:	f001 fc1b 	bl	8001c70 <HAL_CAN_ActivateNotification>
}
 800043a:	bf00      	nop
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	20000114 	.word	0x20000114

08000444 <_Z11Open_Filterv>:
* This function Allows every frame to be received.
* @param: none
* @retval none
*/
void Open_Filter()
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
	ToggleFilterConfig.FilterMode =
	ToggleFilterConfig.FilterScale =
	ToggleFilterConfig.FilterActivation =
	ToggleFilterConfig.SlaveStartFilterBank =

	HAL_CAN_ConfigFilter(&hcan1, &ToggleFilterConfig);
 8000448:	492c      	ldr	r1, [pc, #176]	; (80004fc <_Z11Open_Filterv+0xb8>)
 800044a:	482d      	ldr	r0, [pc, #180]	; (8000500 <_Z11Open_Filterv+0xbc>)
 800044c:	f001 f915 	bl	800167a <HAL_CAN_ConfigFilter>
 8000450:	4603      	mov	r3, r0
 8000452:	461a      	mov	r2, r3
	ToggleFilterConfig.SlaveStartFilterBank =
 8000454:	4b29      	ldr	r3, [pc, #164]	; (80004fc <_Z11Open_Filterv+0xb8>)
 8000456:	625a      	str	r2, [r3, #36]	; 0x24
 8000458:	4b28      	ldr	r3, [pc, #160]	; (80004fc <_Z11Open_Filterv+0xb8>)
 800045a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	ToggleFilterConfig.FilterActivation =
 800045c:	4a27      	ldr	r2, [pc, #156]	; (80004fc <_Z11Open_Filterv+0xb8>)
 800045e:	6213      	str	r3, [r2, #32]
 8000460:	4b26      	ldr	r3, [pc, #152]	; (80004fc <_Z11Open_Filterv+0xb8>)
 8000462:	6a1b      	ldr	r3, [r3, #32]
	ToggleFilterConfig.FilterScale =
 8000464:	4a25      	ldr	r2, [pc, #148]	; (80004fc <_Z11Open_Filterv+0xb8>)
 8000466:	61d3      	str	r3, [r2, #28]
 8000468:	4b24      	ldr	r3, [pc, #144]	; (80004fc <_Z11Open_Filterv+0xb8>)
 800046a:	69db      	ldr	r3, [r3, #28]
	ToggleFilterConfig.FilterMode =
 800046c:	4a23      	ldr	r2, [pc, #140]	; (80004fc <_Z11Open_Filterv+0xb8>)
 800046e:	6193      	str	r3, [r2, #24]
 8000470:	4b22      	ldr	r3, [pc, #136]	; (80004fc <_Z11Open_Filterv+0xb8>)
 8000472:	699b      	ldr	r3, [r3, #24]
	ToggleFilterConfig.FilterFIFOAssignment =
 8000474:	4a21      	ldr	r2, [pc, #132]	; (80004fc <_Z11Open_Filterv+0xb8>)
 8000476:	6113      	str	r3, [r2, #16]
 8000478:	4b20      	ldr	r3, [pc, #128]	; (80004fc <_Z11Open_Filterv+0xb8>)
 800047a:	691b      	ldr	r3, [r3, #16]
	ToggleFilterConfig.FilterBank =
 800047c:	4a1f      	ldr	r2, [pc, #124]	; (80004fc <_Z11Open_Filterv+0xb8>)
 800047e:	6153      	str	r3, [r2, #20]
 8000480:	4b1e      	ldr	r3, [pc, #120]	; (80004fc <_Z11Open_Filterv+0xb8>)
 8000482:	695b      	ldr	r3, [r3, #20]
	ToggleFilterConfig.FilterMaskIdLow =
 8000484:	4a1d      	ldr	r2, [pc, #116]	; (80004fc <_Z11Open_Filterv+0xb8>)
 8000486:	60d3      	str	r3, [r2, #12]
 8000488:	4b1c      	ldr	r3, [pc, #112]	; (80004fc <_Z11Open_Filterv+0xb8>)
 800048a:	68db      	ldr	r3, [r3, #12]
	ToggleFilterConfig.FilterMaskIdHigh =
 800048c:	4a1b      	ldr	r2, [pc, #108]	; (80004fc <_Z11Open_Filterv+0xb8>)
 800048e:	6093      	str	r3, [r2, #8]
 8000490:	4b1a      	ldr	r3, [pc, #104]	; (80004fc <_Z11Open_Filterv+0xb8>)
 8000492:	689b      	ldr	r3, [r3, #8]
	ToggleFilterConfig.FilterIdLow =
 8000494:	4a19      	ldr	r2, [pc, #100]	; (80004fc <_Z11Open_Filterv+0xb8>)
 8000496:	6053      	str	r3, [r2, #4]
 8000498:	4b18      	ldr	r3, [pc, #96]	; (80004fc <_Z11Open_Filterv+0xb8>)
 800049a:	685b      	ldr	r3, [r3, #4]
	ToggleFilterConfig.FilterIdHigh =
 800049c:	4a17      	ldr	r2, [pc, #92]	; (80004fc <_Z11Open_Filterv+0xb8>)
 800049e:	6013      	str	r3, [r2, #0]
	DataFilterConfig.FilterFIFOAssignment =
	DataFilterConfig.FilterMode =
	DataFilterConfig.FilterScale =
	DataFilterConfig.FilterActivation =
	ToggleFilterConfig.SlaveStartFilterBank =
	HAL_CAN_ConfigFilter(&hcan1, &DataFilterConfig);
 80004a0:	4918      	ldr	r1, [pc, #96]	; (8000504 <_Z11Open_Filterv+0xc0>)
 80004a2:	4817      	ldr	r0, [pc, #92]	; (8000500 <_Z11Open_Filterv+0xbc>)
 80004a4:	f001 f8e9 	bl	800167a <HAL_CAN_ConfigFilter>
 80004a8:	4603      	mov	r3, r0
 80004aa:	461a      	mov	r2, r3
	ToggleFilterConfig.SlaveStartFilterBank =
 80004ac:	4b13      	ldr	r3, [pc, #76]	; (80004fc <_Z11Open_Filterv+0xb8>)
 80004ae:	625a      	str	r2, [r3, #36]	; 0x24
 80004b0:	4b12      	ldr	r3, [pc, #72]	; (80004fc <_Z11Open_Filterv+0xb8>)
 80004b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	DataFilterConfig.FilterActivation =
 80004b4:	4a13      	ldr	r2, [pc, #76]	; (8000504 <_Z11Open_Filterv+0xc0>)
 80004b6:	6213      	str	r3, [r2, #32]
 80004b8:	4b12      	ldr	r3, [pc, #72]	; (8000504 <_Z11Open_Filterv+0xc0>)
 80004ba:	6a1b      	ldr	r3, [r3, #32]
	DataFilterConfig.FilterScale =
 80004bc:	4a11      	ldr	r2, [pc, #68]	; (8000504 <_Z11Open_Filterv+0xc0>)
 80004be:	61d3      	str	r3, [r2, #28]
 80004c0:	4b10      	ldr	r3, [pc, #64]	; (8000504 <_Z11Open_Filterv+0xc0>)
 80004c2:	69db      	ldr	r3, [r3, #28]
	DataFilterConfig.FilterMode =
 80004c4:	4a0f      	ldr	r2, [pc, #60]	; (8000504 <_Z11Open_Filterv+0xc0>)
 80004c6:	6193      	str	r3, [r2, #24]
 80004c8:	4b0e      	ldr	r3, [pc, #56]	; (8000504 <_Z11Open_Filterv+0xc0>)
 80004ca:	699b      	ldr	r3, [r3, #24]
	DataFilterConfig.FilterFIFOAssignment =
 80004cc:	4a0d      	ldr	r2, [pc, #52]	; (8000504 <_Z11Open_Filterv+0xc0>)
 80004ce:	6113      	str	r3, [r2, #16]
 80004d0:	4b0c      	ldr	r3, [pc, #48]	; (8000504 <_Z11Open_Filterv+0xc0>)
 80004d2:	691b      	ldr	r3, [r3, #16]
	DataFilterConfig.FilterBank =
 80004d4:	4a0b      	ldr	r2, [pc, #44]	; (8000504 <_Z11Open_Filterv+0xc0>)
 80004d6:	6153      	str	r3, [r2, #20]
 80004d8:	4b0a      	ldr	r3, [pc, #40]	; (8000504 <_Z11Open_Filterv+0xc0>)
 80004da:	695b      	ldr	r3, [r3, #20]
	DataFilterConfig.FilterMaskIdLow =
 80004dc:	4a09      	ldr	r2, [pc, #36]	; (8000504 <_Z11Open_Filterv+0xc0>)
 80004de:	60d3      	str	r3, [r2, #12]
 80004e0:	4b08      	ldr	r3, [pc, #32]	; (8000504 <_Z11Open_Filterv+0xc0>)
 80004e2:	68db      	ldr	r3, [r3, #12]
	DataFilterConfig.FilterMaskIdHigh =
 80004e4:	4a07      	ldr	r2, [pc, #28]	; (8000504 <_Z11Open_Filterv+0xc0>)
 80004e6:	6093      	str	r3, [r2, #8]
 80004e8:	4b06      	ldr	r3, [pc, #24]	; (8000504 <_Z11Open_Filterv+0xc0>)
 80004ea:	689b      	ldr	r3, [r3, #8]
	DataFilterConfig.FilterIdLow =
 80004ec:	4a05      	ldr	r2, [pc, #20]	; (8000504 <_Z11Open_Filterv+0xc0>)
 80004ee:	6053      	str	r3, [r2, #4]
 80004f0:	4b04      	ldr	r3, [pc, #16]	; (8000504 <_Z11Open_Filterv+0xc0>)
 80004f2:	685b      	ldr	r3, [r3, #4]
	DataFilterConfig.FilterIdHigh =
 80004f4:	4a03      	ldr	r2, [pc, #12]	; (8000504 <_Z11Open_Filterv+0xc0>)
 80004f6:	6013      	str	r3, [r2, #0]
}
 80004f8:	bf00      	nop
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	200000c4 	.word	0x200000c4
 8000500:	20000114 	.word	0x20000114
 8000504:	200000ec 	.word	0x200000ec

08000508 <_ZN11Can_Message13Build_MessageEv>:
* This function receives CAN message.
* @param: none
* @retval Bool. True if its data, false if its a toggle frame.
*/
bool Can_Message::Build_Message()
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08c      	sub	sp, #48	; 0x30
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader_HCAN1;
	uint8_t RxData[8];

	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader_HCAN1, RxData);
 8000510:	f107 030c 	add.w	r3, r7, #12
 8000514:	f107 0214 	add.w	r2, r7, #20
 8000518:	2100      	movs	r1, #0
 800051a:	480f      	ldr	r0, [pc, #60]	; (8000558 <_ZN11Can_Message13Build_MessageEv+0x50>)
 800051c:	f001 fa96 	bl	8001a4c <HAL_CAN_GetRxMessage>
	ID = RxHeader_HCAN1.StdId;
 8000520:	697b      	ldr	r3, [r7, #20]
 8000522:	b29a      	uxth	r2, r3
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	801a      	strh	r2, [r3, #0]
	if(ID == 0x001)
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	881b      	ldrh	r3, [r3, #0]
 800052c:	2b01      	cmp	r3, #1
 800052e:	d101      	bne.n	8000534 <_ZN11Can_Message13Build_MessageEv+0x2c>
	{
		return false;
 8000530:	2300      	movs	r3, #0
 8000532:	e00c      	b.n	800054e <_ZN11Can_Message13Build_MessageEv+0x46>
	}
	DLC = RxHeader_HCAN1.DLC;
 8000534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000536:	b2da      	uxtb	r2, r3
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	709a      	strb	r2, [r3, #2]
	Data = RxData;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	f107 020c 	add.w	r2, r7, #12
 8000542:	605a      	str	r2, [r3, #4]
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000544:	2102      	movs	r1, #2
 8000546:	4804      	ldr	r0, [pc, #16]	; (8000558 <_ZN11Can_Message13Build_MessageEv+0x50>)
 8000548:	f001 fb92 	bl	8001c70 <HAL_CAN_ActivateNotification>
	return true;
 800054c:	2301      	movs	r3, #1
}
 800054e:	4618      	mov	r0, r3
 8000550:	3730      	adds	r7, #48	; 0x30
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	20000114 	.word	0x20000114

0800055c <_Z12Send_MessagemmPh>:
* @param Pointer to data buffer
*
* @retval none
*/
void Send_Message(uint32_t ID, uint32_t DLC, uint8_t *data)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b08c      	sub	sp, #48	; 0x30
 8000560:	af00      	add	r7, sp, #0
 8000562:	60f8      	str	r0, [r7, #12]
 8000564:	60b9      	str	r1, [r7, #8]
 8000566:	607a      	str	r2, [r7, #4]
	CAN_TxHeaderTypeDef TxHeader_HCAN1;

	TxHeader_HCAN1.DLC = DLC;
 8000568:	68bb      	ldr	r3, [r7, #8]
 800056a:	62bb      	str	r3, [r7, #40]	; 0x28
	TxHeader_HCAN1.StdId = ID;
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	61bb      	str	r3, [r7, #24]
	TxHeader_HCAN1.IDE = CAN_ID_STD;
 8000570:	2300      	movs	r3, #0
 8000572:	623b      	str	r3, [r7, #32]
	uint32_t mailbox1 = 0;
 8000574:	2300      	movs	r3, #0
 8000576:	617b      	str	r3, [r7, #20]
	HAL_CAN_AddTxMessage(&hcan1, &TxHeader_HCAN1, data, &mailbox1);
 8000578:	f107 0314 	add.w	r3, r7, #20
 800057c:	f107 0118 	add.w	r1, r7, #24
 8000580:	687a      	ldr	r2, [r7, #4]
 8000582:	4803      	ldr	r0, [pc, #12]	; (8000590 <_Z12Send_MessagemmPh+0x34>)
 8000584:	f001 f987 	bl	8001896 <HAL_CAN_AddTxMessage>
}
 8000588:	bf00      	nop
 800058a:	3730      	adds	r7, #48	; 0x30
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	20000114 	.word	0x20000114

08000594 <_Z9CS_Selectv>:
#define NRF24_CSN_PORT   GPIOB
#define NRF24_CSN_PIN    GPIO_PIN_6


void CS_Select (void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 8000598:	2200      	movs	r2, #0
 800059a:	2140      	movs	r1, #64	; 0x40
 800059c:	4802      	ldr	r0, [pc, #8]	; (80005a8 <_Z9CS_Selectv+0x14>)
 800059e:	f002 f891 	bl	80026c4 <HAL_GPIO_WritePin>
}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	48000400 	.word	0x48000400

080005ac <_Z11CS_UnSelectv>:

void CS_UnSelect (void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 80005b0:	2201      	movs	r2, #1
 80005b2:	2140      	movs	r1, #64	; 0x40
 80005b4:	4802      	ldr	r0, [pc, #8]	; (80005c0 <_Z11CS_UnSelectv+0x14>)
 80005b6:	f002 f885 	bl	80026c4 <HAL_GPIO_WritePin>
}
 80005ba:	bf00      	nop
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	48000400 	.word	0x48000400

080005c4 <_Z9CE_Enablev>:


void CE_Enable (void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 80005c8:	2201      	movs	r2, #1
 80005ca:	2180      	movs	r1, #128	; 0x80
 80005cc:	4802      	ldr	r0, [pc, #8]	; (80005d8 <_Z9CE_Enablev+0x14>)
 80005ce:	f002 f879 	bl	80026c4 <HAL_GPIO_WritePin>
}
 80005d2:	bf00      	nop
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	48000800 	.word	0x48000800

080005dc <_Z10CE_Disablev>:

void CE_Disable (void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 80005e0:	2200      	movs	r2, #0
 80005e2:	2180      	movs	r1, #128	; 0x80
 80005e4:	4802      	ldr	r0, [pc, #8]	; (80005f0 <_Z10CE_Disablev+0x14>)
 80005e6:	f002 f86d 	bl	80026c4 <HAL_GPIO_WritePin>
}
 80005ea:	bf00      	nop
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	48000800 	.word	0x48000800

080005f4 <_Z14nrf24_WriteReghh>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	460a      	mov	r2, r1
 80005fe:	71fb      	strb	r3, [r7, #7]
 8000600:	4613      	mov	r3, r2
 8000602:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8000604:	79fb      	ldrb	r3, [r7, #7]
 8000606:	f043 0320 	orr.w	r3, r3, #32
 800060a:	b2db      	uxtb	r3, r3
 800060c:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 800060e:	79bb      	ldrb	r3, [r7, #6]
 8000610:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000612:	f7ff ffbf 	bl	8000594 <_Z9CS_Selectv>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 8000616:	f107 010c 	add.w	r1, r7, #12
 800061a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800061e:	2202      	movs	r2, #2
 8000620:	4804      	ldr	r0, [pc, #16]	; (8000634 <_Z14nrf24_WriteReghh+0x40>)
 8000622:	f003 f8d0 	bl	80037c6 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000626:	f7ff ffc1 	bl	80005ac <_Z11CS_UnSelectv>
}
 800062a:	bf00      	nop
 800062c:	3710      	adds	r7, #16
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	2000013c 	.word	0x2000013c

08000638 <_Z19nrf24_WriteRegMultihPhi>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b086      	sub	sp, #24
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	60b9      	str	r1, [r7, #8]
 8000642:	607a      	str	r2, [r7, #4]
 8000644:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8000646:	7bfb      	ldrb	r3, [r7, #15]
 8000648:	f043 0320 	orr.w	r3, r3, #32
 800064c:	b2db      	uxtb	r3, r3
 800064e:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000650:	f7ff ffa0 	bl	8000594 <_Z9CS_Selectv>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 8000654:	f107 0114 	add.w	r1, r7, #20
 8000658:	2364      	movs	r3, #100	; 0x64
 800065a:	2201      	movs	r2, #1
 800065c:	4808      	ldr	r0, [pc, #32]	; (8000680 <_Z19nrf24_WriteRegMultihPhi+0x48>)
 800065e:	f003 f8b2 	bl	80037c6 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	b29a      	uxth	r2, r3
 8000666:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800066a:	68b9      	ldr	r1, [r7, #8]
 800066c:	4804      	ldr	r0, [pc, #16]	; (8000680 <_Z19nrf24_WriteRegMultihPhi+0x48>)
 800066e:	f003 f8aa 	bl	80037c6 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000672:	f7ff ff9b 	bl	80005ac <_Z11CS_UnSelectv>
}
 8000676:	bf00      	nop
 8000678:	3718      	adds	r7, #24
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	2000013c 	.word	0x2000013c

08000684 <_Z13nrf24_ReadRegh>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 800068e:	2300      	movs	r3, #0
 8000690:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000692:	f7ff ff7f 	bl	8000594 <_Z9CS_Selectv>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 8000696:	1df9      	adds	r1, r7, #7
 8000698:	2364      	movs	r3, #100	; 0x64
 800069a:	2201      	movs	r2, #1
 800069c:	4808      	ldr	r0, [pc, #32]	; (80006c0 <_Z13nrf24_ReadRegh+0x3c>)
 800069e:	f003 f892 	bl	80037c6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 80006a2:	f107 010f 	add.w	r1, r7, #15
 80006a6:	2364      	movs	r3, #100	; 0x64
 80006a8:	2201      	movs	r2, #1
 80006aa:	4805      	ldr	r0, [pc, #20]	; (80006c0 <_Z13nrf24_ReadRegh+0x3c>)
 80006ac:	f003 f9f9 	bl	8003aa2 <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80006b0:	f7ff ff7c 	bl	80005ac <_Z11CS_UnSelectv>

	return data;
 80006b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3710      	adds	r7, #16
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	2000013c 	.word	0x2000013c

080006c4 <_Z10nrfsendCmdh>:
}


// send the command to the NRF
void nrfsendCmd (uint8_t cmd)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	71fb      	strb	r3, [r7, #7]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 80006ce:	f7ff ff61 	bl	8000594 <_Z9CS_Selectv>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 80006d2:	1df9      	adds	r1, r7, #7
 80006d4:	2364      	movs	r3, #100	; 0x64
 80006d6:	2201      	movs	r2, #1
 80006d8:	4804      	ldr	r0, [pc, #16]	; (80006ec <_Z10nrfsendCmdh+0x28>)
 80006da:	f003 f874 	bl	80037c6 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80006de:	f7ff ff65 	bl	80005ac <_Z11CS_UnSelectv>
}
 80006e2:	bf00      	nop
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	2000013c 	.word	0x2000013c

080006f0 <_Z11nrf24_reseth>:

void nrf24_reset(uint8_t REG)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b088      	sub	sp, #32
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	2b07      	cmp	r3, #7
 80006fe:	d104      	bne.n	800070a <_Z11nrf24_reseth+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x00);
 8000700:	2100      	movs	r1, #0
 8000702:	2007      	movs	r0, #7
 8000704:	f7ff ff76 	bl	80005f4 <_Z14nrf24_WriteReghh>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 8000708:	e094      	b.n	8000834 <_Z11nrf24_reseth+0x144>
	else if (REG == FIFO_STATUS)
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	2b17      	cmp	r3, #23
 800070e:	d104      	bne.n	800071a <_Z11nrf24_reseth+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 8000710:	2111      	movs	r1, #17
 8000712:	2017      	movs	r0, #23
 8000714:	f7ff ff6e 	bl	80005f4 <_Z14nrf24_WriteReghh>
}
 8000718:	e08c      	b.n	8000834 <_Z11nrf24_reseth+0x144>
	nrf24_WriteReg(CONFIG, 0x08);
 800071a:	2108      	movs	r1, #8
 800071c:	2000      	movs	r0, #0
 800071e:	f7ff ff69 	bl	80005f4 <_Z14nrf24_WriteReghh>
	nrf24_WriteReg(EN_AA, 0x3F);
 8000722:	213f      	movs	r1, #63	; 0x3f
 8000724:	2001      	movs	r0, #1
 8000726:	f7ff ff65 	bl	80005f4 <_Z14nrf24_WriteReghh>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 800072a:	2103      	movs	r1, #3
 800072c:	2002      	movs	r0, #2
 800072e:	f7ff ff61 	bl	80005f4 <_Z14nrf24_WriteReghh>
	nrf24_WriteReg(SETUP_AW, 0x03);
 8000732:	2103      	movs	r1, #3
 8000734:	2003      	movs	r0, #3
 8000736:	f7ff ff5d 	bl	80005f4 <_Z14nrf24_WriteReghh>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 800073a:	2103      	movs	r1, #3
 800073c:	2004      	movs	r0, #4
 800073e:	f7ff ff59 	bl	80005f4 <_Z14nrf24_WriteReghh>
	nrf24_WriteReg(RF_CH, 0x02);
 8000742:	2102      	movs	r1, #2
 8000744:	2005      	movs	r0, #5
 8000746:	f7ff ff55 	bl	80005f4 <_Z14nrf24_WriteReghh>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 800074a:	210e      	movs	r1, #14
 800074c:	2006      	movs	r0, #6
 800074e:	f7ff ff51 	bl	80005f4 <_Z14nrf24_WriteReghh>
	nrf24_WriteReg(STATUS, 0x00);
 8000752:	2100      	movs	r1, #0
 8000754:	2007      	movs	r0, #7
 8000756:	f7ff ff4d 	bl	80005f4 <_Z14nrf24_WriteReghh>
	nrf24_WriteReg(STATUS, 0b01110000);
 800075a:	2170      	movs	r1, #112	; 0x70
 800075c:	2007      	movs	r0, #7
 800075e:	f7ff ff49 	bl	80005f4 <_Z14nrf24_WriteReghh>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 8000762:	2100      	movs	r1, #0
 8000764:	2008      	movs	r0, #8
 8000766:	f7ff ff45 	bl	80005f4 <_Z14nrf24_WriteReghh>
	nrf24_WriteReg(CD, 0x00);
 800076a:	2100      	movs	r1, #0
 800076c:	2009      	movs	r0, #9
 800076e:	f7ff ff41 	bl	80005f4 <_Z14nrf24_WriteReghh>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000772:	4a32      	ldr	r2, [pc, #200]	; (800083c <_Z11nrf24_reseth+0x14c>)
 8000774:	f107 0318 	add.w	r3, r7, #24
 8000778:	e892 0003 	ldmia.w	r2, {r0, r1}
 800077c:	6018      	str	r0, [r3, #0]
 800077e:	3304      	adds	r3, #4
 8000780:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 8000782:	f107 0318 	add.w	r3, r7, #24
 8000786:	2205      	movs	r2, #5
 8000788:	4619      	mov	r1, r3
 800078a:	200a      	movs	r0, #10
 800078c:	f7ff ff54 	bl	8000638 <_Z19nrf24_WriteRegMultihPhi>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8000790:	4a2b      	ldr	r2, [pc, #172]	; (8000840 <_Z11nrf24_reseth+0x150>)
 8000792:	f107 0310 	add.w	r3, r7, #16
 8000796:	e892 0003 	ldmia.w	r2, {r0, r1}
 800079a:	6018      	str	r0, [r3, #0]
 800079c:	3304      	adds	r3, #4
 800079e:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 80007a0:	f107 0310 	add.w	r3, r7, #16
 80007a4:	2205      	movs	r2, #5
 80007a6:	4619      	mov	r1, r3
 80007a8:	200b      	movs	r0, #11
 80007aa:	f7ff ff45 	bl	8000638 <_Z19nrf24_WriteRegMultihPhi>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 80007ae:	21c3      	movs	r1, #195	; 0xc3
 80007b0:	200c      	movs	r0, #12
 80007b2:	f7ff ff1f 	bl	80005f4 <_Z14nrf24_WriteReghh>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 80007b6:	21c4      	movs	r1, #196	; 0xc4
 80007b8:	200d      	movs	r0, #13
 80007ba:	f7ff ff1b 	bl	80005f4 <_Z14nrf24_WriteReghh>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 80007be:	21c5      	movs	r1, #197	; 0xc5
 80007c0:	200e      	movs	r0, #14
 80007c2:	f7ff ff17 	bl	80005f4 <_Z14nrf24_WriteReghh>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 80007c6:	21c6      	movs	r1, #198	; 0xc6
 80007c8:	200f      	movs	r0, #15
 80007ca:	f7ff ff13 	bl	80005f4 <_Z14nrf24_WriteReghh>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80007ce:	4a1b      	ldr	r2, [pc, #108]	; (800083c <_Z11nrf24_reseth+0x14c>)
 80007d0:	f107 0308 	add.w	r3, r7, #8
 80007d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007d8:	6018      	str	r0, [r3, #0]
 80007da:	3304      	adds	r3, #4
 80007dc:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 80007de:	f107 0308 	add.w	r3, r7, #8
 80007e2:	2205      	movs	r2, #5
 80007e4:	4619      	mov	r1, r3
 80007e6:	2010      	movs	r0, #16
 80007e8:	f7ff ff26 	bl	8000638 <_Z19nrf24_WriteRegMultihPhi>
	nrf24_WriteReg(RX_PW_P0, 0);
 80007ec:	2100      	movs	r1, #0
 80007ee:	2011      	movs	r0, #17
 80007f0:	f7ff ff00 	bl	80005f4 <_Z14nrf24_WriteReghh>
	nrf24_WriteReg(RX_PW_P1, 0);
 80007f4:	2100      	movs	r1, #0
 80007f6:	2012      	movs	r0, #18
 80007f8:	f7ff fefc 	bl	80005f4 <_Z14nrf24_WriteReghh>
	nrf24_WriteReg(RX_PW_P2, 0);
 80007fc:	2100      	movs	r1, #0
 80007fe:	2013      	movs	r0, #19
 8000800:	f7ff fef8 	bl	80005f4 <_Z14nrf24_WriteReghh>
	nrf24_WriteReg(RX_PW_P3, 0);
 8000804:	2100      	movs	r1, #0
 8000806:	2014      	movs	r0, #20
 8000808:	f7ff fef4 	bl	80005f4 <_Z14nrf24_WriteReghh>
	nrf24_WriteReg(RX_PW_P4, 0);
 800080c:	2100      	movs	r1, #0
 800080e:	2015      	movs	r0, #21
 8000810:	f7ff fef0 	bl	80005f4 <_Z14nrf24_WriteReghh>
	nrf24_WriteReg(RX_PW_P5, 0);
 8000814:	2100      	movs	r1, #0
 8000816:	2016      	movs	r0, #22
 8000818:	f7ff feec 	bl	80005f4 <_Z14nrf24_WriteReghh>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 800081c:	2111      	movs	r1, #17
 800081e:	2017      	movs	r0, #23
 8000820:	f7ff fee8 	bl	80005f4 <_Z14nrf24_WriteReghh>
	nrf24_WriteReg(DYNPD, 0);
 8000824:	2100      	movs	r1, #0
 8000826:	201c      	movs	r0, #28
 8000828:	f7ff fee4 	bl	80005f4 <_Z14nrf24_WriteReghh>
	nrf24_WriteReg(FEATURE, 0);
 800082c:	2100      	movs	r1, #0
 800082e:	201d      	movs	r0, #29
 8000830:	f7ff fee0 	bl	80005f4 <_Z14nrf24_WriteReghh>
}
 8000834:	bf00      	nop
 8000836:	3720      	adds	r7, #32
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	080050a0 	.word	0x080050a0
 8000840:	080050a8 	.word	0x080050a8

08000844 <_Z10NRF24_Initv>:




void NRF24_Init (void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 800084a:	f7ff fec7 	bl	80005dc <_Z10CE_Disablev>
	// reset everything
	nrf24_reset (0);
 800084e:	2000      	movs	r0, #0
 8000850:	f7ff ff4e 	bl	80006f0 <_Z11nrf24_reseth>
	//old works
	nrf24_WriteReg (CONFIG, 0);  // will be configured later
 8000854:	2100      	movs	r1, #0
 8000856:	2000      	movs	r0, #0
 8000858:	f7ff fecc 	bl	80005f4 <_Z14nrf24_WriteReghh>
	nrf24_WriteReg (EN_AA, 0);  // No Auto ACK
 800085c:	2100      	movs	r1, #0
 800085e:	2001      	movs	r0, #1
 8000860:	f7ff fec8 	bl	80005f4 <_Z14nrf24_WriteReghh>
	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 8000864:	2100      	movs	r1, #0
 8000866:	2002      	movs	r0, #2
 8000868:	f7ff fec4 	bl	80005f4 <_Z14nrf24_WriteReghh>
	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 800086c:	2103      	movs	r1, #3
 800086e:	2003      	movs	r0, #3
 8000870:	f7ff fec0 	bl	80005f4 <_Z14nrf24_WriteReghh>
	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 8000874:	2100      	movs	r1, #0
 8000876:	2004      	movs	r0, #4
 8000878:	f7ff febc 	bl	80005f4 <_Z14nrf24_WriteReghh>
	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 800087c:	2100      	movs	r1, #0
 800087e:	2005      	movs	r0, #5
 8000880:	f7ff feb8 	bl	80005f4 <_Z14nrf24_WriteReghh>
	nrf24_WriteReg (RF_SETUP, 0x0E);   // Power= 0db, data rate = 2Mbps
 8000884:	210e      	movs	r1, #14
 8000886:	2006      	movs	r0, #6
 8000888:	f7ff feb4 	bl	80005f4 <_Z14nrf24_WriteReghh>
	//NEW
	//AutoACK works
	nrf24_WriteReg(EN_AA, 		0b00000111);  // AutoACK
 800088c:	2107      	movs	r1, #7
 800088e:	2001      	movs	r0, #1
 8000890:	f7ff feb0 	bl	80005f4 <_Z14nrf24_WriteReghh>
	nrf24_WriteReg(SETUP_RETR, 	0b00011111);
 8000894:	211f      	movs	r1, #31
 8000896:	2004      	movs	r0, #4
 8000898:	f7ff feac 	bl	80005f4 <_Z14nrf24_WriteReghh>
	nrf24_WriteReg (EN_RXADDR, 	0b00000111);
 800089c:	2107      	movs	r1, #7
 800089e:	2002      	movs	r0, #2
 80008a0:	f7ff fea8 	bl	80005f4 <_Z14nrf24_WriteReghh>
	//Activate Features
	uint8_t CmdToSend    = ACTIVATE;
 80008a4:	2350      	movs	r3, #80	; 0x50
 80008a6:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(NRF24_SPI, &CmdToSend,     1, 100);
 80008a8:	1df9      	adds	r1, r7, #7
 80008aa:	2364      	movs	r3, #100	; 0x64
 80008ac:	2201      	movs	r2, #1
 80008ae:	480e      	ldr	r0, [pc, #56]	; (80008e8 <_Z10NRF24_Initv+0xa4>)
 80008b0:	f002 ff89 	bl	80037c6 <HAL_SPI_Transmit>
	CmdToSend    = ACT_FEATURE;
 80008b4:	2373      	movs	r3, #115	; 0x73
 80008b6:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(NRF24_SPI, &CmdToSend,  1, 100);
 80008b8:	1df9      	adds	r1, r7, #7
 80008ba:	2364      	movs	r3, #100	; 0x64
 80008bc:	2201      	movs	r2, #1
 80008be:	480a      	ldr	r0, [pc, #40]	; (80008e8 <_Z10NRF24_Initv+0xa4>)
 80008c0:	f002 ff81 	bl	80037c6 <HAL_SPI_Transmit>
	//AutoACK with payload
	nrf24_WriteReg(FEATURE, 0b00000111);
 80008c4:	2107      	movs	r1, #7
 80008c6:	201d      	movs	r0, #29
 80008c8:	f7ff fe94 	bl	80005f4 <_Z14nrf24_WriteReghh>
	nrf24_ReadReg(FEATURE);
 80008cc:	201d      	movs	r0, #29
 80008ce:	f7ff fed9 	bl	8000684 <_Z13nrf24_ReadRegh>
	nrf24_WriteReg(DYNPD, 	0b00000111);
 80008d2:	2107      	movs	r1, #7
 80008d4:	201c      	movs	r0, #28
 80008d6:	f7ff fe8d 	bl	80005f4 <_Z14nrf24_WriteReghh>
	// Enable the chip after configuring the device
	CE_Enable();
 80008da:	f7ff fe73 	bl	80005c4 <_Z9CE_Enablev>
}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	2000013c 	.word	0x2000013c

080008ec <_Z12NRF24_TxModePhh>:


// set up the Tx mode

void NRF24_TxMode (uint8_t *Address, uint8_t channel)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	460b      	mov	r3, r1
 80008f6:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 80008f8:	f7ff fe70 	bl	80005dc <_Z10CE_Disablev>

	//nrf24_Readreg(CONFIG);

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 80008fc:	78fb      	ldrb	r3, [r7, #3]
 80008fe:	4619      	mov	r1, r3
 8000900:	2005      	movs	r0, #5
 8000902:	f7ff fe77 	bl	80005f4 <_Z14nrf24_WriteReghh>

	nrf24_WriteRegMulti(TX_ADDR, Address, 5);  // Write the TX address
 8000906:	2205      	movs	r2, #5
 8000908:	6879      	ldr	r1, [r7, #4]
 800090a:	2010      	movs	r0, #16
 800090c:	f7ff fe94 	bl	8000638 <_Z19nrf24_WriteRegMultihPhi>
	nrf24_WriteRegMulti(RX_ADDR_P0, Address, 5);
 8000910:	2205      	movs	r2, #5
 8000912:	6879      	ldr	r1, [r7, #4]
 8000914:	200a      	movs	r0, #10
 8000916:	f7ff fe8f 	bl	8000638 <_Z19nrf24_WriteRegMultihPhi>
	nrf24_WriteRegMulti(RX_ADDR_P1, Address, 5);
 800091a:	2205      	movs	r2, #5
 800091c:	6879      	ldr	r1, [r7, #4]
 800091e:	200b      	movs	r0, #11
 8000920:	f7ff fe8a 	bl	8000638 <_Z19nrf24_WriteRegMultihPhi>

	// power up the device
	uint8_t config = nrf24_ReadReg(CONFIG);
 8000924:	2000      	movs	r0, #0
 8000926:	f7ff fead 	bl	8000684 <_Z13nrf24_ReadRegh>
 800092a:	4603      	mov	r3, r0
 800092c:	73fb      	strb	r3, [r7, #15]
	config = config | (1<<1);   // write 1 in the PWR_UP bit
 800092e:	7bfb      	ldrb	r3, [r7, #15]
 8000930:	f043 0302 	orr.w	r3, r3, #2
 8000934:	73fb      	strb	r3, [r7, #15]
	config = config & (0xF2);    // write 0 in the PRIM_RX, and 1 in the PWR_UP, and all other bits are masked
 8000936:	7bfb      	ldrb	r3, [r7, #15]
 8000938:	f023 030d 	bic.w	r3, r3, #13
 800093c:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg (CONFIG, config);
 800093e:	7bfb      	ldrb	r3, [r7, #15]
 8000940:	4619      	mov	r1, r3
 8000942:	2000      	movs	r0, #0
 8000944:	f7ff fe56 	bl	80005f4 <_Z14nrf24_WriteReghh>
	//nrf24_ReadReg (CONFIG);

	// Enable the chip after configuring the device
	CE_Enable();
 8000948:	f7ff fe3c 	bl	80005c4 <_Z9CE_Enablev>
}
 800094c:	bf00      	nop
 800094e:	3710      	adds	r7, #16
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}

08000954 <_Z24Clear_retrasmission_flagv>:

void Clear_retrasmission_flag()
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
	CE_Disable();
 8000958:	f7ff fe40 	bl	80005dc <_Z10CE_Disablev>
	nrf24_reset(0x00);
 800095c:	2000      	movs	r0, #0
 800095e:	f7ff fec7 	bl	80006f0 <_Z11nrf24_reseth>
	NRF24_Init();
 8000962:	f7ff ff6f 	bl	8000844 <_Z10NRF24_Initv>
	nrf24_WriteReg(STATUS, 0b00011110);
 8000966:	211e      	movs	r1, #30
 8000968:	2007      	movs	r0, #7
 800096a:	f7ff fe43 	bl	80005f4 <_Z14nrf24_WriteReghh>
	NRF24_TxMode(TxAddress, 10);
 800096e:	210a      	movs	r1, #10
 8000970:	4803      	ldr	r0, [pc, #12]	; (8000980 <_Z24Clear_retrasmission_flagv+0x2c>)
 8000972:	f7ff ffbb 	bl	80008ec <_Z12NRF24_TxModePhh>
	CE_Enable();
 8000976:	f7ff fe25 	bl	80005c4 <_Z9CE_Enablev>
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20000000 	.word	0x20000000

08000984 <_Z14NRF24_TransmitPh>:
uint8_t NRF24_Transmit (uint8_t *data1)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 800098c:	2300      	movs	r3, #0
 800098e:	737b      	strb	r3, [r7, #13]
	uint8_t tell_me = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	73fb      	strb	r3, [r7, #15]
	// select the device
 	//CS_Select();
	tell_me = nrf24_ReadReg(FIFO_STATUS);
 8000994:	2017      	movs	r0, #23
 8000996:	f7ff fe75 	bl	8000684 <_Z13nrf24_ReadRegh>
 800099a:	4603      	mov	r3, r0
 800099c:	73fb      	strb	r3, [r7, #15]
	tell_me = nrf24_ReadReg(STATUS);
 800099e:	2007      	movs	r0, #7
 80009a0:	f7ff fe70 	bl	8000684 <_Z13nrf24_ReadRegh>
 80009a4:	4603      	mov	r3, r0
 80009a6:	73fb      	strb	r3, [r7, #15]
	tell_me = nrf24_ReadReg(CONFIG);
 80009a8:	2000      	movs	r0, #0
 80009aa:	f7ff fe6b 	bl	8000684 <_Z13nrf24_ReadRegh>
 80009ae:	4603      	mov	r3, r0
 80009b0:	73fb      	strb	r3, [r7, #15]
	CS_Select();
 80009b2:	f7ff fdef 	bl	8000594 <_Z9CS_Selectv>
	// payload command
	cmdtosend = W_TX_PAYLOAD;
 80009b6:	23a0      	movs	r3, #160	; 0xa0
 80009b8:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 80009ba:	f107 010d 	add.w	r1, r7, #13
 80009be:	2364      	movs	r3, #100	; 0x64
 80009c0:	2201      	movs	r2, #1
 80009c2:	481f      	ldr	r0, [pc, #124]	; (8000a40 <_Z14NRF24_TransmitPh+0xbc>)
 80009c4:	f002 feff 	bl	80037c6 <HAL_SPI_Transmit>
	// send the payload
	HAL_SPI_Transmit(NRF24_SPI, data1, 32, 1000);
 80009c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009cc:	2220      	movs	r2, #32
 80009ce:	6879      	ldr	r1, [r7, #4]
 80009d0:	481b      	ldr	r0, [pc, #108]	; (8000a40 <_Z14NRF24_TransmitPh+0xbc>)
 80009d2:	f002 fef8 	bl	80037c6 <HAL_SPI_Transmit>
	// Transmit packet
	CS_UnSelect();
 80009d6:	f7ff fde9 	bl	80005ac <_Z11CS_UnSelectv>

	HAL_Delay(1);
 80009da:	2001      	movs	r0, #1
 80009dc:	f000 fd2e 	bl	800143c <HAL_Delay>

	uint8_t fifostatus = nrf24_ReadReg(FIFO_STATUS);
 80009e0:	2017      	movs	r0, #23
 80009e2:	f7ff fe4f 	bl	8000684 <_Z13nrf24_ReadRegh>
 80009e6:	4603      	mov	r3, r0
 80009e8:	73bb      	strb	r3, [r7, #14]
	tell_me = fifostatus;
 80009ea:	7bbb      	ldrb	r3, [r7, #14]
 80009ec:	73fb      	strb	r3, [r7, #15]
	tell_me = nrf24_ReadReg(STATUS);
 80009ee:	2007      	movs	r0, #7
 80009f0:	f7ff fe48 	bl	8000684 <_Z13nrf24_ReadRegh>
 80009f4:	4603      	mov	r3, r0
 80009f6:	73fb      	strb	r3, [r7, #15]
	tell_me = nrf24_ReadReg(CONFIG);
 80009f8:	2000      	movs	r0, #0
 80009fa:	f7ff fe43 	bl	8000684 <_Z13nrf24_ReadRegh>
 80009fe:	4603      	mov	r3, r0
 8000a00:	73fb      	strb	r3, [r7, #15]
	tell_me = nrf24_ReadReg(OBSERVE_TX);
 8000a02:	2008      	movs	r0, #8
 8000a04:	f7ff fe3e 	bl	8000684 <_Z13nrf24_ReadRegh>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	73fb      	strb	r3, [r7, #15]
	// check the fourth bit of FIFO_STATUS to know if the TX fifo is empty
	if ((fifostatus&(1<<4)) && (!(fifostatus&(1<<3))))
 8000a0c:	7bbb      	ldrb	r3, [r7, #14]
 8000a0e:	f003 0310 	and.w	r3, r3, #16
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d00f      	beq.n	8000a36 <_Z14NRF24_TransmitPh+0xb2>
 8000a16:	7bbb      	ldrb	r3, [r7, #14]
 8000a18:	f003 0308 	and.w	r3, r3, #8
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d10a      	bne.n	8000a36 <_Z14NRF24_TransmitPh+0xb2>
	{
		cmdtosend = FLUSH_TX;
 8000a20:	23e1      	movs	r3, #225	; 0xe1
 8000a22:	737b      	strb	r3, [r7, #13]
		nrfsendCmd(cmdtosend);
 8000a24:	7b7b      	ldrb	r3, [r7, #13]
 8000a26:	4618      	mov	r0, r3
 8000a28:	f7ff fe4c 	bl	80006c4 <_Z10nrfsendCmdh>
		// reset FIFO_STATUS
		nrf24_reset (FIFO_STATUS);
 8000a2c:	2017      	movs	r0, #23
 8000a2e:	f7ff fe5f 	bl	80006f0 <_Z11nrf24_reseth>
		return 1;
 8000a32:	2301      	movs	r3, #1
 8000a34:	e000      	b.n	8000a38 <_Z14NRF24_TransmitPh+0xb4>
	}
	return 0;
 8000a36:	2300      	movs	r3, #0
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3710      	adds	r7, #16
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	2000013c 	.word	0x2000013c

08000a44 <_Z25Setup_Radio_As_Transmiterv>:
* This function turns on the radio, initilize it and set up as transmiter
* @param: none
* @retval true if everything is ok, false if error occured.
*/
bool Setup_Radio_As_Transmiter()
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
	NRF24_Init();
 8000a48:	f7ff fefc 	bl	8000844 <_Z10NRF24_Initv>
	NRF24_TxMode(TxAddress, 10);
 8000a4c:	210a      	movs	r1, #10
 8000a4e:	4803      	ldr	r0, [pc, #12]	; (8000a5c <_Z25Setup_Radio_As_Transmiterv+0x18>)
 8000a50:	f7ff ff4c 	bl	80008ec <_Z12NRF24_TxModePhh>
	return true;
 8000a54:	2301      	movs	r3, #1
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	20000000 	.word	0x20000000

08000a60 <_Z9Send_DataPh>:
* This function Sends the data packet to the radio, wich trigger transmission.
* @param: Pointer to the data packet
* @retval true if everything is ok, false if error occured.
*/
bool Send_Data(uint8_t* pData)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
	if(NRF24_Transmit(pData) == 1)
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	f7ff ff8b 	bl	8000984 <_Z14NRF24_TransmitPh>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	bf0c      	ite	eq
 8000a74:	2301      	moveq	r3, #1
 8000a76:	2300      	movne	r3, #0
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <_Z9Send_DataPh+0x22>
	{
		return true;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e002      	b.n	8000a88 <_Z9Send_DataPh+0x28>
	}
	else
	{
		Clear_retrasmission_flag();
 8000a82:	f7ff ff67 	bl	8000954 <_Z24Clear_retrasmission_flagv>
		return false;
 8000a86:	2300      	movs	r3, #0
	}
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <_ZN11Can_MessageC1Ev>:
	Can_Message()
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
		ID   = 0;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	801a      	strh	r2, [r3, #0]
		DLC  = 0;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	709a      	strb	r2, [r3, #2]
		Data = 0;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	605a      	str	r2, [r3, #4]
	}
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4618      	mov	r0, r3
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <_ZN8Packet_1C1Ev>:
	Packet_1()
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
	{
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	330a      	adds	r3, #10
 8000ac4:	2220      	movs	r2, #32
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f004 fa19 	bl	8004f00 <memset>
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	332a      	adds	r3, #42	; 0x2a
 8000ad2:	2220      	movs	r2, #32
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f004 fa12 	bl	8004f00 <memset>
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	334a      	adds	r3, #74	; 0x4a
 8000ae0:	2220      	movs	r2, #32
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f004 fa0b 	bl	8004f00 <memset>
		APPS = 0;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2200      	movs	r2, #0
 8000aee:	801a      	strh	r2, [r3, #0]
		Motor_RPM = 0;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2200      	movs	r2, #0
 8000af4:	805a      	strh	r2, [r3, #2]
		RMS_Current = 0;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2200      	movs	r2, #0
 8000afa:	809a      	strh	r2, [r3, #4]
		Status = 0;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	2200      	movs	r2, #0
 8000b00:	80da      	strh	r2, [r3, #6]
		Temperature_1 = 0;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	2200      	movs	r2, #0
 8000b06:	721a      	strb	r2, [r3, #8]
		Temperature_2 = 0;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	725a      	strb	r2, [r3, #9]
		DataBuffer1[32] = { 0 };
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2200      	movs	r2, #0
 8000b12:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		DataBuffer2[32] = { 0 };
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2200      	movs	r2, #0
 8000b1a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
		DataBuffer3[32] = { 0 };
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2200      	movs	r2, #0
 8000b22:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
		flag_buffer = 0;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	2200      	movs	r2, #0
 8000b2a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	}
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4618      	mov	r0, r3
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <_ZN8Packet_118Return_flag_bufferEv>:
	uint16_t Return_flag_buffer()
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
		return flag_buffer;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
	}
 8000b46:	4618      	mov	r0, r3
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr

08000b52 <_ZN6StatesC1Ev>:
	States()
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b082      	sub	sp, #8
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
	{
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	3302      	adds	r3, #2
 8000b5e:	2220      	movs	r2, #32
 8000b60:	2100      	movs	r1, #0
 8000b62:	4618      	mov	r0, r3
 8000b64:	f004 f9cc 	bl	8004f00 <memset>
	}
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
	...

08000b74 <_Z4SendP8Packet_1P6States>:
static void MX_CAN1_Init(void);
static void MX_SPI1_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */
void Send(Packet_1 *pck1, States *st1)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	6039      	str	r1, [r7, #0]
	HAL_TIM_Base_Stop(&htim2);
 8000b7e:	4814      	ldr	r0, [pc, #80]	; (8000bd0 <_Z4SendP8Packet_1P6States+0x5c>)
 8000b80:	f003 fd4e 	bl	8004620 <HAL_TIM_Base_Stop>
	if(Send_Data(pck1->Prepare_Data(pck1->Return_flag_buffer())) == false)
 8000b84:	6878      	ldr	r0, [r7, #4]
 8000b86:	f7ff ffd7 	bl	8000b38 <_ZN8Packet_118Return_flag_bufferEv>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	6878      	ldr	r0, [r7, #4]
 8000b90:	f7ff fbb2 	bl	80002f8 <_ZN8Packet_112Prepare_DataEt>
 8000b94:	4603      	mov	r3, r0
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff ff62 	bl	8000a60 <_Z9Send_DataPh>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	bf0c      	ite	eq
 8000ba2:	2301      	moveq	r3, #1
 8000ba4:	2300      	movne	r3, #0
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d106      	bne.n	8000bba <_Z4SendP8Packet_1P6States+0x46>
		//Flash yellow LED. Maybe send telemetry status.
	}
	else
	{
		//Send States
		Send_Data(st1->Build_State_Message());
 8000bac:	6838      	ldr	r0, [r7, #0]
 8000bae:	f7ff fbef 	bl	8000390 <_ZN6States19Build_State_MessageEv>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff ff53 	bl	8000a60 <_Z9Send_DataPh>
	}
	pck1->Clear_Packet();
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f7ff fbd9 	bl	8000372 <_ZN8Packet_112Clear_PacketEv>
	HAL_TIM_Base_Start(&htim2);
 8000bc0:	4803      	ldr	r0, [pc, #12]	; (8000bd0 <_Z4SendP8Packet_1P6States+0x5c>)
 8000bc2:	f003 fcc5 	bl	8004550 <HAL_TIM_Base_Start>
}
 8000bc6:	bf00      	nop
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	200001a0 	.word	0x200001a0

08000bd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd4:	b590      	push	{r4, r7, lr}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bda:	f000 fbba 	bl	8001352 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bde:	f000 f881 	bl	8000ce4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000be2:	f000 f9bb 	bl	8000f5c <_ZL12MX_GPIO_Initv>
  MX_CAN1_Init();
 8000be6:	f000 f8df 	bl	8000da8 <_ZL12MX_CAN1_Initv>
  MX_SPI1_Init();
 8000bea:	f000 f919 	bl	8000e20 <_ZL12MX_SPI1_Initv>
  MX_TIM2_Init();
 8000bee:	f000 f959 	bl	8000ea4 <_ZL12MX_TIM2_Initv>
  /* USER CODE BEGIN 2 */
  Can_Message *msg1 = new Can_Message();
 8000bf2:	2008      	movs	r0, #8
 8000bf4:	f004 f930 	bl	8004e58 <_Znwj>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	461c      	mov	r4, r3
 8000bfc:	4620      	mov	r0, r4
 8000bfe:	f7ff ff47 	bl	8000a90 <_ZN11Can_MessageC1Ev>
 8000c02:	60fc      	str	r4, [r7, #12]
  Packet_1 *pck1 = new Packet_1();
 8000c04:	206c      	movs	r0, #108	; 0x6c
 8000c06:	f004 f927 	bl	8004e58 <_Znwj>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	461c      	mov	r4, r3
 8000c0e:	4620      	mov	r0, r4
 8000c10:	f7ff ff52 	bl	8000ab8 <_ZN8Packet_1C1Ev>
 8000c14:	60bc      	str	r4, [r7, #8]
  States * st1 = new States();
 8000c16:	2022      	movs	r0, #34	; 0x22
 8000c18:	f004 f91e 	bl	8004e58 <_Znwj>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	461c      	mov	r4, r3
 8000c20:	4620      	mov	r0, r4
 8000c22:	f7ff ff96 	bl	8000b52 <_ZN6StatesC1Ev>
 8000c26:	607c      	str	r4, [r7, #4]

  Create_parsing_array();
 8000c28:	f7ff fb18 	bl	800025c <_Z20Create_parsing_arrayv>

  Open_Filter();
 8000c2c:	f7ff fc0a 	bl	8000444 <_Z11Open_Filterv>

  CAN_Init();
 8000c30:	f7ff fbfa 	bl	8000428 <_Z8CAN_Initv>

  if(Setup_Radio_As_Transmiter() == false)
 8000c34:	f7ff ff06 	bl	8000a44 <_Z25Setup_Radio_As_Transmiterv>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	bf0c      	ite	eq
 8000c3e:	2301      	moveq	r3, #1
 8000c40:	2300      	movne	r3, #0
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <main+0x78>
  {
 	 Error_Handler();
 8000c48:	f000 f9b8 	bl	8000fbc <Error_Handler>

     /* USER CODE BEGIN 3 */
 	  /*
 	   * Regular state of the code, used to receive, pack and send data
 	   */
	  Send_Message(0x0A, 8, TestData);
 8000c4c:	4a22      	ldr	r2, [pc, #136]	; (8000cd8 <main+0x104>)
 8000c4e:	2108      	movs	r1, #8
 8000c50:	200a      	movs	r0, #10
 8000c52:	f7ff fc83 	bl	800055c <_Z12Send_MessagemmPh>
	  HAL_Delay(1);
 8000c56:	2001      	movs	r0, #1
 8000c58:	f000 fbf0 	bl	800143c <HAL_Delay>
 	  if((Can_Interrupt_flag  == 1) & (TIM_IRQ_Mode_flag == 0))
 8000c5c:	4b1f      	ldr	r3, [pc, #124]	; (8000cdc <main+0x108>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	bf0c      	ite	eq
 8000c64:	2301      	moveq	r3, #1
 8000c66:	2300      	movne	r3, #0
 8000c68:	b2da      	uxtb	r2, r3
 8000c6a:	4b1d      	ldr	r3, [pc, #116]	; (8000ce0 <main+0x10c>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	bf0c      	ite	eq
 8000c72:	2301      	moveq	r3, #1
 8000c74:	2300      	movne	r3, #0
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	4013      	ands	r3, r2
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d01b      	beq.n	8000cb8 <main+0xe4>
 	  {
 		  msg1->Build_Message();
 8000c80:	68f8      	ldr	r0, [r7, #12]
 8000c82:	f7ff fc41 	bl	8000508 <_ZN11Can_Message13Build_MessageEv>
 		  pck1->Choose_Parser(msg1, pck1, st1);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	68ba      	ldr	r2, [r7, #8]
 8000c8a:	68f9      	ldr	r1, [r7, #12]
 8000c8c:	68b8      	ldr	r0, [r7, #8]
 8000c8e:	f7ff fb13 	bl	80002b8 <_ZN8Packet_113Choose_ParserEP11Can_MessagePS_P6States>
 		  if(pck1->Return_flag_buffer() == PACKET_FULL)
 8000c92:	68b8      	ldr	r0, [r7, #8]
 8000c94:	f7ff ff50 	bl	8000b38 <_ZN8Packet_118Return_flag_bufferEv>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	bf0c      	ite	eq
 8000ca4:	2301      	moveq	r3, #1
 8000ca6:	2300      	movne	r3, #0
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d00f      	beq.n	8000cce <main+0xfa>
 		  {
 			  //Send
 			  Send(pck1, st1);
 8000cae:	6879      	ldr	r1, [r7, #4]
 8000cb0:	68b8      	ldr	r0, [r7, #8]
 8000cb2:	f7ff ff5f 	bl	8000b74 <_Z4SendP8Packet_1P6States>
 8000cb6:	e00a      	b.n	8000cce <main+0xfa>
 		  }
 	  }
 	  /*
 	   * TIM_IRQ_Mode. Used when not enough data arrives in sufficient time.
 	   */
 	  else if(TIM_IRQ_Mode_flag == 1)
 8000cb8:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <main+0x10c>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d106      	bne.n	8000cce <main+0xfa>
 	  {
 		  Send(pck1, st1);
 8000cc0:	6879      	ldr	r1, [r7, #4]
 8000cc2:	68b8      	ldr	r0, [r7, #8]
 8000cc4:	f7ff ff56 	bl	8000b74 <_Z4SendP8Packet_1P6States>
 		  TIM_IRQ_Mode_flag = 0;
 8000cc8:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <main+0x10c>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	701a      	strb	r2, [r3, #0]
 	  }
 	  Can_Interrupt_flag = 0;
 8000cce:	4b03      	ldr	r3, [pc, #12]	; (8000cdc <main+0x108>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	701a      	strb	r2, [r3, #0]
	  Send_Message(0x0A, 8, TestData);
 8000cd4:	e7ba      	b.n	8000c4c <main+0x78>
 8000cd6:	bf00      	nop
 8000cd8:	20000008 	.word	0x20000008
 8000cdc:	200001ec 	.word	0x200001ec
 8000ce0:	200001ed 	.word	0x200001ed

08000ce4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b098      	sub	sp, #96	; 0x60
 8000ce8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cea:	f107 0318 	add.w	r3, r7, #24
 8000cee:	2248      	movs	r2, #72	; 0x48
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f004 f904 	bl	8004f00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf8:	1d3b      	adds	r3, r7, #4
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	609a      	str	r2, [r3, #8]
 8000d02:	60da      	str	r2, [r3, #12]
 8000d04:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d06:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d0a:	f001 fd13 	bl	8002734 <HAL_PWREx_ControlVoltageScaling>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	bf14      	ite	ne
 8000d14:	2301      	movne	r3, #1
 8000d16:	2300      	moveq	r3, #0
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 8000d1e:	f000 f94d 	bl	8000fbc <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000d22:	2310      	movs	r3, #16
 8000d24:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000d26:	2301      	movs	r3, #1
 8000d28:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000d2e:	2360      	movs	r3, #96	; 0x60
 8000d30:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d32:	2302      	movs	r3, #2
 8000d34:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000d36:	2301      	movs	r3, #1
 8000d38:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000d3e:	2310      	movs	r3, #16
 8000d40:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d42:	2302      	movs	r3, #2
 8000d44:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d46:	2302      	movs	r3, #2
 8000d48:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d4e:	f107 0318 	add.w	r3, r7, #24
 8000d52:	4618      	mov	r0, r3
 8000d54:	f001 fd92 	bl	800287c <HAL_RCC_OscConfig>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	bf14      	ite	ne
 8000d5e:	2301      	movne	r3, #1
 8000d60:	2300      	moveq	r3, #0
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <_Z18SystemClock_Configv+0x88>
  {
    Error_Handler();
 8000d68:	f000 f928 	bl	8000fbc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d6c:	230f      	movs	r3, #15
 8000d6e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d70:	2303      	movs	r3, #3
 8000d72:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d74:	2300      	movs	r3, #0
 8000d76:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d80:	1d3b      	adds	r3, r7, #4
 8000d82:	2101      	movs	r1, #1
 8000d84:	4618      	mov	r0, r3
 8000d86:	f002 fa01 	bl	800318c <HAL_RCC_ClockConfig>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	bf14      	ite	ne
 8000d90:	2301      	movne	r3, #1
 8000d92:	2300      	moveq	r3, #0
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 8000d9a:	f000 f90f 	bl	8000fbc <Error_Handler>
  }
}
 8000d9e:	bf00      	nop
 8000da0:	3760      	adds	r7, #96	; 0x60
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
	...

08000da8 <_ZL12MX_CAN1_Initv>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000dac:	4b1a      	ldr	r3, [pc, #104]	; (8000e18 <_ZL12MX_CAN1_Initv+0x70>)
 8000dae:	4a1b      	ldr	r2, [pc, #108]	; (8000e1c <_ZL12MX_CAN1_Initv+0x74>)
 8000db0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 8000db2:	4b19      	ldr	r3, [pc, #100]	; (8000e18 <_ZL12MX_CAN1_Initv+0x70>)
 8000db4:	2202      	movs	r2, #2
 8000db6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 8000db8:	4b17      	ldr	r3, [pc, #92]	; (8000e18 <_ZL12MX_CAN1_Initv+0x70>)
 8000dba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dbe:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000dc0:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <_ZL12MX_CAN1_Initv+0x70>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000dc6:	4b14      	ldr	r3, [pc, #80]	; (8000e18 <_ZL12MX_CAN1_Initv+0x70>)
 8000dc8:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000dcc:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000dce:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <_ZL12MX_CAN1_Initv+0x70>)
 8000dd0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000dd4:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000dd6:	4b10      	ldr	r3, [pc, #64]	; (8000e18 <_ZL12MX_CAN1_Initv+0x70>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000ddc:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <_ZL12MX_CAN1_Initv+0x70>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000de2:	4b0d      	ldr	r3, [pc, #52]	; (8000e18 <_ZL12MX_CAN1_Initv+0x70>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000de8:	4b0b      	ldr	r3, [pc, #44]	; (8000e18 <_ZL12MX_CAN1_Initv+0x70>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000dee:	4b0a      	ldr	r3, [pc, #40]	; (8000e18 <_ZL12MX_CAN1_Initv+0x70>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000df4:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <_ZL12MX_CAN1_Initv+0x70>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000dfa:	4807      	ldr	r0, [pc, #28]	; (8000e18 <_ZL12MX_CAN1_Initv+0x70>)
 8000dfc:	f000 fb42 	bl	8001484 <HAL_CAN_Init>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	bf14      	ite	ne
 8000e06:	2301      	movne	r3, #1
 8000e08:	2300      	moveq	r3, #0
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <_ZL12MX_CAN1_Initv+0x6c>
  {
    Error_Handler();
 8000e10:	f000 f8d4 	bl	8000fbc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000e14:	bf00      	nop
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20000114 	.word	0x20000114
 8000e1c:	40006400 	.word	0x40006400

08000e20 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e24:	4b1d      	ldr	r3, [pc, #116]	; (8000e9c <_ZL12MX_SPI1_Initv+0x7c>)
 8000e26:	4a1e      	ldr	r2, [pc, #120]	; (8000ea0 <_ZL12MX_SPI1_Initv+0x80>)
 8000e28:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e2a:	4b1c      	ldr	r3, [pc, #112]	; (8000e9c <_ZL12MX_SPI1_Initv+0x7c>)
 8000e2c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e30:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e32:	4b1a      	ldr	r3, [pc, #104]	; (8000e9c <_ZL12MX_SPI1_Initv+0x7c>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000e38:	4b18      	ldr	r3, [pc, #96]	; (8000e9c <_ZL12MX_SPI1_Initv+0x7c>)
 8000e3a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000e3e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e40:	4b16      	ldr	r3, [pc, #88]	; (8000e9c <_ZL12MX_SPI1_Initv+0x7c>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e46:	4b15      	ldr	r3, [pc, #84]	; (8000e9c <_ZL12MX_SPI1_Initv+0x7c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000e4c:	4b13      	ldr	r3, [pc, #76]	; (8000e9c <_ZL12MX_SPI1_Initv+0x7c>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e52:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <_ZL12MX_SPI1_Initv+0x7c>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e58:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <_ZL12MX_SPI1_Initv+0x7c>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e5e:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <_ZL12MX_SPI1_Initv+0x7c>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e64:	4b0d      	ldr	r3, [pc, #52]	; (8000e9c <_ZL12MX_SPI1_Initv+0x7c>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000e6a:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <_ZL12MX_SPI1_Initv+0x7c>)
 8000e6c:	2207      	movs	r2, #7
 8000e6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e70:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <_ZL12MX_SPI1_Initv+0x7c>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e76:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <_ZL12MX_SPI1_Initv+0x7c>)
 8000e78:	2208      	movs	r2, #8
 8000e7a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e7c:	4807      	ldr	r0, [pc, #28]	; (8000e9c <_ZL12MX_SPI1_Initv+0x7c>)
 8000e7e:	f002 fbff 	bl	8003680 <HAL_SPI_Init>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	bf14      	ite	ne
 8000e88:	2301      	movne	r3, #1
 8000e8a:	2300      	moveq	r3, #0
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <_ZL12MX_SPI1_Initv+0x76>
  {
    Error_Handler();
 8000e92:	f000 f893 	bl	8000fbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	2000013c 	.word	0x2000013c
 8000ea0:	40013000 	.word	0x40013000

08000ea4 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b088      	sub	sp, #32
 8000ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eaa:	f107 0310 	add.w	r3, r7, #16
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	605a      	str	r2, [r3, #4]
 8000eb4:	609a      	str	r2, [r3, #8]
 8000eb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eb8:	1d3b      	adds	r3, r7, #4
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	605a      	str	r2, [r3, #4]
 8000ec0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ec2:	4b25      	ldr	r3, [pc, #148]	; (8000f58 <_ZL12MX_TIM2_Initv+0xb4>)
 8000ec4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ec8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000eca:	4b23      	ldr	r3, [pc, #140]	; (8000f58 <_ZL12MX_TIM2_Initv+0xb4>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed0:	4b21      	ldr	r3, [pc, #132]	; (8000f58 <_ZL12MX_TIM2_Initv+0xb4>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000ed6:	4b20      	ldr	r3, [pc, #128]	; (8000f58 <_ZL12MX_TIM2_Initv+0xb4>)
 8000ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8000edc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ede:	4b1e      	ldr	r3, [pc, #120]	; (8000f58 <_ZL12MX_TIM2_Initv+0xb4>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ee4:	4b1c      	ldr	r3, [pc, #112]	; (8000f58 <_ZL12MX_TIM2_Initv+0xb4>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000eea:	481b      	ldr	r0, [pc, #108]	; (8000f58 <_ZL12MX_TIM2_Initv+0xb4>)
 8000eec:	f003 fad8 	bl	80044a0 <HAL_TIM_Base_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	bf14      	ite	ne
 8000ef6:	2301      	movne	r3, #1
 8000ef8:	2300      	moveq	r3, #0
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <_ZL12MX_TIM2_Initv+0x60>
  {
    Error_Handler();
 8000f00:	f000 f85c 	bl	8000fbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f08:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f0a:	f107 0310 	add.w	r3, r7, #16
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4811      	ldr	r0, [pc, #68]	; (8000f58 <_ZL12MX_TIM2_Initv+0xb4>)
 8000f12:	f003 fccb 	bl	80048ac <HAL_TIM_ConfigClockSource>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	bf14      	ite	ne
 8000f1c:	2301      	movne	r3, #1
 8000f1e:	2300      	moveq	r3, #0
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <_ZL12MX_TIM2_Initv+0x86>
  {
    Error_Handler();
 8000f26:	f000 f849 	bl	8000fbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f32:	1d3b      	adds	r3, r7, #4
 8000f34:	4619      	mov	r1, r3
 8000f36:	4808      	ldr	r0, [pc, #32]	; (8000f58 <_ZL12MX_TIM2_Initv+0xb4>)
 8000f38:	f003 fee8 	bl	8004d0c <HAL_TIMEx_MasterConfigSynchronization>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	bf14      	ite	ne
 8000f42:	2301      	movne	r3, #1
 8000f44:	2300      	moveq	r3, #0
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <_ZL12MX_TIM2_Initv+0xac>
  {
    Error_Handler();
 8000f4c:	f000 f836 	bl	8000fbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f50:	bf00      	nop
 8000f52:	3720      	adds	r7, #32
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	200001a0 	.word	0x200001a0

08000f5c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f62:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <_ZL12MX_GPIO_Initv+0x5c>)
 8000f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f66:	4a14      	ldr	r2, [pc, #80]	; (8000fb8 <_ZL12MX_GPIO_Initv+0x5c>)
 8000f68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f6e:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <_ZL12MX_GPIO_Initv+0x5c>)
 8000f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7a:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <_ZL12MX_GPIO_Initv+0x5c>)
 8000f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7e:	4a0e      	ldr	r2, [pc, #56]	; (8000fb8 <_ZL12MX_GPIO_Initv+0x5c>)
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f86:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <_ZL12MX_GPIO_Initv+0x5c>)
 8000f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	60bb      	str	r3, [r7, #8]
 8000f90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f92:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <_ZL12MX_GPIO_Initv+0x5c>)
 8000f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f96:	4a08      	ldr	r2, [pc, #32]	; (8000fb8 <_ZL12MX_GPIO_Initv+0x5c>)
 8000f98:	f043 0302 	orr.w	r3, r3, #2
 8000f9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f9e:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <_ZL12MX_GPIO_Initv+0x5c>)
 8000fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa2:	f003 0302 	and.w	r3, r3, #2
 8000fa6:	607b      	str	r3, [r7, #4]
 8000fa8:	687b      	ldr	r3, [r7, #4]

}
 8000faa:	bf00      	nop
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	40021000 	.word	0x40021000

08000fbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc0:	b672      	cpsid	i
}
 8000fc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fc4:	e7fe      	b.n	8000fc4 <Error_Handler+0x8>
	...

08000fc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fce:	4b0f      	ldr	r3, [pc, #60]	; (800100c <HAL_MspInit+0x44>)
 8000fd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fd2:	4a0e      	ldr	r2, [pc, #56]	; (800100c <HAL_MspInit+0x44>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	6613      	str	r3, [r2, #96]	; 0x60
 8000fda:	4b0c      	ldr	r3, [pc, #48]	; (800100c <HAL_MspInit+0x44>)
 8000fdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	607b      	str	r3, [r7, #4]
 8000fe4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fe6:	4b09      	ldr	r3, [pc, #36]	; (800100c <HAL_MspInit+0x44>)
 8000fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fea:	4a08      	ldr	r2, [pc, #32]	; (800100c <HAL_MspInit+0x44>)
 8000fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <HAL_MspInit+0x44>)
 8000ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ffa:	603b      	str	r3, [r7, #0]
 8000ffc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	40021000 	.word	0x40021000

08001010 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b08a      	sub	sp, #40	; 0x28
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001018:	f107 0314 	add.w	r3, r7, #20
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a1f      	ldr	r2, [pc, #124]	; (80010ac <HAL_CAN_MspInit+0x9c>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d138      	bne.n	80010a4 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001032:	4b1f      	ldr	r3, [pc, #124]	; (80010b0 <HAL_CAN_MspInit+0xa0>)
 8001034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001036:	4a1e      	ldr	r2, [pc, #120]	; (80010b0 <HAL_CAN_MspInit+0xa0>)
 8001038:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800103c:	6593      	str	r3, [r2, #88]	; 0x58
 800103e:	4b1c      	ldr	r3, [pc, #112]	; (80010b0 <HAL_CAN_MspInit+0xa0>)
 8001040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001046:	613b      	str	r3, [r7, #16]
 8001048:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800104a:	4b19      	ldr	r3, [pc, #100]	; (80010b0 <HAL_CAN_MspInit+0xa0>)
 800104c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104e:	4a18      	ldr	r2, [pc, #96]	; (80010b0 <HAL_CAN_MspInit+0xa0>)
 8001050:	f043 0302 	orr.w	r3, r3, #2
 8001054:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001056:	4b16      	ldr	r3, [pc, #88]	; (80010b0 <HAL_CAN_MspInit+0xa0>)
 8001058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001062:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001066:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001068:	2302      	movs	r3, #2
 800106a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001070:	2303      	movs	r3, #3
 8001072:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001074:	2309      	movs	r3, #9
 8001076:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	4619      	mov	r1, r3
 800107e:	480d      	ldr	r0, [pc, #52]	; (80010b4 <HAL_CAN_MspInit+0xa4>)
 8001080:	f001 f98e 	bl	80023a0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001084:	2200      	movs	r2, #0
 8001086:	2100      	movs	r1, #0
 8001088:	2014      	movs	r0, #20
 800108a:	f001 f952 	bl	8002332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800108e:	2014      	movs	r0, #20
 8001090:	f001 f96b 	bl	800236a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001094:	2200      	movs	r2, #0
 8001096:	2100      	movs	r1, #0
 8001098:	2015      	movs	r0, #21
 800109a:	f001 f94a 	bl	8002332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800109e:	2015      	movs	r0, #21
 80010a0:	f001 f963 	bl	800236a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80010a4:	bf00      	nop
 80010a6:	3728      	adds	r7, #40	; 0x28
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	40006400 	.word	0x40006400
 80010b0:	40021000 	.word	0x40021000
 80010b4:	48000400 	.word	0x48000400

080010b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b08a      	sub	sp, #40	; 0x28
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a17      	ldr	r2, [pc, #92]	; (8001134 <HAL_SPI_MspInit+0x7c>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d128      	bne.n	800112c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010da:	4b17      	ldr	r3, [pc, #92]	; (8001138 <HAL_SPI_MspInit+0x80>)
 80010dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010de:	4a16      	ldr	r2, [pc, #88]	; (8001138 <HAL_SPI_MspInit+0x80>)
 80010e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010e4:	6613      	str	r3, [r2, #96]	; 0x60
 80010e6:	4b14      	ldr	r3, [pc, #80]	; (8001138 <HAL_SPI_MspInit+0x80>)
 80010e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010ee:	613b      	str	r3, [r7, #16]
 80010f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f2:	4b11      	ldr	r3, [pc, #68]	; (8001138 <HAL_SPI_MspInit+0x80>)
 80010f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f6:	4a10      	ldr	r2, [pc, #64]	; (8001138 <HAL_SPI_MspInit+0x80>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010fe:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <HAL_SPI_MspInit+0x80>)
 8001100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> SPI1_SCK
    PA4     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 800110a:	23d2      	movs	r3, #210	; 0xd2
 800110c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110e:	2302      	movs	r3, #2
 8001110:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001116:	2303      	movs	r3, #3
 8001118:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800111a:	2305      	movs	r3, #5
 800111c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111e:	f107 0314 	add.w	r3, r7, #20
 8001122:	4619      	mov	r1, r3
 8001124:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001128:	f001 f93a 	bl	80023a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800112c:	bf00      	nop
 800112e:	3728      	adds	r7, #40	; 0x28
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40013000 	.word	0x40013000
 8001138:	40021000 	.word	0x40021000

0800113c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800114c:	d113      	bne.n	8001176 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800114e:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <HAL_TIM_Base_MspInit+0x44>)
 8001150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001152:	4a0b      	ldr	r2, [pc, #44]	; (8001180 <HAL_TIM_Base_MspInit+0x44>)
 8001154:	f043 0301 	orr.w	r3, r3, #1
 8001158:	6593      	str	r3, [r2, #88]	; 0x58
 800115a:	4b09      	ldr	r3, [pc, #36]	; (8001180 <HAL_TIM_Base_MspInit+0x44>)
 800115c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001166:	2200      	movs	r2, #0
 8001168:	2100      	movs	r1, #0
 800116a:	201c      	movs	r0, #28
 800116c:	f001 f8e1 	bl	8002332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001170:	201c      	movs	r0, #28
 8001172:	f001 f8fa 	bl	800236a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001176:	bf00      	nop
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40021000 	.word	0x40021000

08001184 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001188:	e7fe      	b.n	8001188 <NMI_Handler+0x4>

0800118a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800118a:	b480      	push	{r7}
 800118c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800118e:	e7fe      	b.n	800118e <HardFault_Handler+0x4>

08001190 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001194:	e7fe      	b.n	8001194 <MemManage_Handler+0x4>

08001196 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001196:	b480      	push	{r7}
 8001198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800119a:	e7fe      	b.n	800119a <BusFault_Handler+0x4>

0800119c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a0:	e7fe      	b.n	80011a0 <UsageFault_Handler+0x4>

080011a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011a2:	b480      	push	{r7}
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr

080011be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011be:	b480      	push	{r7}
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011c2:	bf00      	nop
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011d0:	f000 f914 	bl	80013fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80011dc:	4802      	ldr	r0, [pc, #8]	; (80011e8 <CAN1_RX0_IRQHandler+0x10>)
 80011de:	f000 fd94 	bl	8001d0a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000114 	.word	0x20000114

080011ec <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */
  Can_Interrupt_flag = 1;
 80011f0:	4b05      	ldr	r3, [pc, #20]	; (8001208 <CAN1_RX1_IRQHandler+0x1c>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	701a      	strb	r2, [r3, #0]
  HAL_CAN_DeactivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80011f6:	2102      	movs	r1, #2
 80011f8:	4804      	ldr	r0, [pc, #16]	; (800120c <CAN1_RX1_IRQHandler+0x20>)
 80011fa:	f000 fd5f 	bl	8001cbc <HAL_CAN_DeactivateNotification>
  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80011fe:	4803      	ldr	r0, [pc, #12]	; (800120c <CAN1_RX1_IRQHandler+0x20>)
 8001200:	f000 fd83 	bl	8001d0a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}
 8001208:	200001ec 	.word	0x200001ec
 800120c:	20000114 	.word	0x20000114

08001210 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	TIM_IRQ_Mode_flag = 1;
 8001214:	4b03      	ldr	r3, [pc, #12]	; (8001224 <TIM2_IRQHandler+0x14>)
 8001216:	2201      	movs	r2, #1
 8001218:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800121a:	4803      	ldr	r0, [pc, #12]	; (8001228 <TIM2_IRQHandler+0x18>)
 800121c:	f003 fa27 	bl	800466e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}
 8001224:	200001ed 	.word	0x200001ed
 8001228:	200001a0 	.word	0x200001a0

0800122c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
	return 1;
 8001230:	2301      	movs	r3, #1
}
 8001232:	4618      	mov	r0, r3
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <_kill>:

int _kill(int pid, int sig)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001246:	f003 fe29 	bl	8004e9c <__errno>
 800124a:	4603      	mov	r3, r0
 800124c:	2216      	movs	r2, #22
 800124e:	601a      	str	r2, [r3, #0]
	return -1;
 8001250:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001254:	4618      	mov	r0, r3
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <_exit>:

void _exit (int status)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001264:	f04f 31ff 	mov.w	r1, #4294967295
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff ffe7 	bl	800123c <_kill>
	while (1) {}		/* Make sure we hang here */
 800126e:	e7fe      	b.n	800126e <_exit+0x12>

08001270 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001278:	4a14      	ldr	r2, [pc, #80]	; (80012cc <_sbrk+0x5c>)
 800127a:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <_sbrk+0x60>)
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001284:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <_sbrk+0x64>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d102      	bne.n	8001292 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800128c:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <_sbrk+0x64>)
 800128e:	4a12      	ldr	r2, [pc, #72]	; (80012d8 <_sbrk+0x68>)
 8001290:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001292:	4b10      	ldr	r3, [pc, #64]	; (80012d4 <_sbrk+0x64>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4413      	add	r3, r2
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	429a      	cmp	r2, r3
 800129e:	d207      	bcs.n	80012b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012a0:	f003 fdfc 	bl	8004e9c <__errno>
 80012a4:	4603      	mov	r3, r0
 80012a6:	220c      	movs	r2, #12
 80012a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012aa:	f04f 33ff 	mov.w	r3, #4294967295
 80012ae:	e009      	b.n	80012c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012b0:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <_sbrk+0x64>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012b6:	4b07      	ldr	r3, [pc, #28]	; (80012d4 <_sbrk+0x64>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4413      	add	r3, r2
 80012be:	4a05      	ldr	r2, [pc, #20]	; (80012d4 <_sbrk+0x64>)
 80012c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012c2:	68fb      	ldr	r3, [r7, #12]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3718      	adds	r7, #24
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20050000 	.word	0x20050000
 80012d0:	00000400 	.word	0x00000400
 80012d4:	200001f0 	.word	0x200001f0
 80012d8:	20000218 	.word	0x20000218

080012dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80012e0:	4b06      	ldr	r3, [pc, #24]	; (80012fc <SystemInit+0x20>)
 80012e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012e6:	4a05      	ldr	r2, [pc, #20]	; (80012fc <SystemInit+0x20>)
 80012e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	e000ed00 	.word	0xe000ed00

08001300 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001300:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001338 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001304:	f7ff ffea 	bl	80012dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001308:	480c      	ldr	r0, [pc, #48]	; (800133c <LoopForever+0x6>)
  ldr r1, =_edata
 800130a:	490d      	ldr	r1, [pc, #52]	; (8001340 <LoopForever+0xa>)
  ldr r2, =_sidata
 800130c:	4a0d      	ldr	r2, [pc, #52]	; (8001344 <LoopForever+0xe>)
  movs r3, #0
 800130e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001310:	e002      	b.n	8001318 <LoopCopyDataInit>

08001312 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001312:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001314:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001316:	3304      	adds	r3, #4

08001318 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001318:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800131a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800131c:	d3f9      	bcc.n	8001312 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800131e:	4a0a      	ldr	r2, [pc, #40]	; (8001348 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001320:	4c0a      	ldr	r4, [pc, #40]	; (800134c <LoopForever+0x16>)
  movs r3, #0
 8001322:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001324:	e001      	b.n	800132a <LoopFillZerobss>

08001326 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001326:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001328:	3204      	adds	r2, #4

0800132a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800132a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800132c:	d3fb      	bcc.n	8001326 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800132e:	f003 fdbb 	bl	8004ea8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001332:	f7ff fc4f 	bl	8000bd4 <main>

08001336 <LoopForever>:

LoopForever:
    b LoopForever
 8001336:	e7fe      	b.n	8001336 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001338:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800133c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001340:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001344:	080050f8 	.word	0x080050f8
  ldr r2, =_sbss
 8001348:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 800134c:	20000214 	.word	0x20000214

08001350 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001350:	e7fe      	b.n	8001350 <ADC1_2_IRQHandler>

08001352 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b082      	sub	sp, #8
 8001356:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001358:	2300      	movs	r3, #0
 800135a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800135c:	2003      	movs	r0, #3
 800135e:	f000 ffdd 	bl	800231c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001362:	200f      	movs	r0, #15
 8001364:	f000 f80e 	bl	8001384 <HAL_InitTick>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d002      	beq.n	8001374 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	71fb      	strb	r3, [r7, #7]
 8001372:	e001      	b.n	8001378 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001374:	f7ff fe28 	bl	8000fc8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001378:	79fb      	ldrb	r3, [r7, #7]
}
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800138c:	2300      	movs	r3, #0
 800138e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001390:	4b17      	ldr	r3, [pc, #92]	; (80013f0 <HAL_InitTick+0x6c>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d023      	beq.n	80013e0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001398:	4b16      	ldr	r3, [pc, #88]	; (80013f4 <HAL_InitTick+0x70>)
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	4b14      	ldr	r3, [pc, #80]	; (80013f0 <HAL_InitTick+0x6c>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	4619      	mov	r1, r3
 80013a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ae:	4618      	mov	r0, r3
 80013b0:	f000 ffe9 	bl	8002386 <HAL_SYSTICK_Config>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d10f      	bne.n	80013da <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2b0f      	cmp	r3, #15
 80013be:	d809      	bhi.n	80013d4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013c0:	2200      	movs	r2, #0
 80013c2:	6879      	ldr	r1, [r7, #4]
 80013c4:	f04f 30ff 	mov.w	r0, #4294967295
 80013c8:	f000 ffb3 	bl	8002332 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013cc:	4a0a      	ldr	r2, [pc, #40]	; (80013f8 <HAL_InitTick+0x74>)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6013      	str	r3, [r2, #0]
 80013d2:	e007      	b.n	80013e4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	73fb      	strb	r3, [r7, #15]
 80013d8:	e004      	b.n	80013e4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	73fb      	strb	r3, [r7, #15]
 80013de:	e001      	b.n	80013e4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20000018 	.word	0x20000018
 80013f4:	20000010 	.word	0x20000010
 80013f8:	20000014 	.word	0x20000014

080013fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001400:	4b06      	ldr	r3, [pc, #24]	; (800141c <HAL_IncTick+0x20>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	461a      	mov	r2, r3
 8001406:	4b06      	ldr	r3, [pc, #24]	; (8001420 <HAL_IncTick+0x24>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4413      	add	r3, r2
 800140c:	4a04      	ldr	r2, [pc, #16]	; (8001420 <HAL_IncTick+0x24>)
 800140e:	6013      	str	r3, [r2, #0]
}
 8001410:	bf00      	nop
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	20000018 	.word	0x20000018
 8001420:	20000200 	.word	0x20000200

08001424 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  return uwTick;
 8001428:	4b03      	ldr	r3, [pc, #12]	; (8001438 <HAL_GetTick+0x14>)
 800142a:	681b      	ldr	r3, [r3, #0]
}
 800142c:	4618      	mov	r0, r3
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	20000200 	.word	0x20000200

0800143c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001444:	f7ff ffee 	bl	8001424 <HAL_GetTick>
 8001448:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001454:	d005      	beq.n	8001462 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001456:	4b0a      	ldr	r3, [pc, #40]	; (8001480 <HAL_Delay+0x44>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	461a      	mov	r2, r3
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	4413      	add	r3, r2
 8001460:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001462:	bf00      	nop
 8001464:	f7ff ffde 	bl	8001424 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	68fa      	ldr	r2, [r7, #12]
 8001470:	429a      	cmp	r2, r3
 8001472:	d8f7      	bhi.n	8001464 <HAL_Delay+0x28>
  {
  }
}
 8001474:	bf00      	nop
 8001476:	bf00      	nop
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20000018 	.word	0x20000018

08001484 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d101      	bne.n	8001496 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e0ed      	b.n	8001672 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f893 3020 	ldrb.w	r3, [r3, #32]
 800149c:	b2db      	uxtb	r3, r3
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d102      	bne.n	80014a8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f7ff fdb4 	bl	8001010 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f042 0201 	orr.w	r2, r2, #1
 80014b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014b8:	f7ff ffb4 	bl	8001424 <HAL_GetTick>
 80014bc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80014be:	e012      	b.n	80014e6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014c0:	f7ff ffb0 	bl	8001424 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b0a      	cmp	r3, #10
 80014cc:	d90b      	bls.n	80014e6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2205      	movs	r2, #5
 80014de:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e0c5      	b.n	8001672 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d0e5      	beq.n	80014c0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f022 0202 	bic.w	r2, r2, #2
 8001502:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001504:	f7ff ff8e 	bl	8001424 <HAL_GetTick>
 8001508:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800150a:	e012      	b.n	8001532 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800150c:	f7ff ff8a 	bl	8001424 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b0a      	cmp	r3, #10
 8001518:	d90b      	bls.n	8001532 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2205      	movs	r2, #5
 800152a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e09f      	b.n	8001672 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f003 0302 	and.w	r3, r3, #2
 800153c:	2b00      	cmp	r3, #0
 800153e:	d1e5      	bne.n	800150c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	7e1b      	ldrb	r3, [r3, #24]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d108      	bne.n	800155a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	e007      	b.n	800156a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001568:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	7e5b      	ldrb	r3, [r3, #25]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d108      	bne.n	8001584 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	e007      	b.n	8001594 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001592:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	7e9b      	ldrb	r3, [r3, #26]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d108      	bne.n	80015ae <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f042 0220 	orr.w	r2, r2, #32
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	e007      	b.n	80015be <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f022 0220 	bic.w	r2, r2, #32
 80015bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	7edb      	ldrb	r3, [r3, #27]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d108      	bne.n	80015d8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f022 0210 	bic.w	r2, r2, #16
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	e007      	b.n	80015e8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f042 0210 	orr.w	r2, r2, #16
 80015e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	7f1b      	ldrb	r3, [r3, #28]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d108      	bne.n	8001602 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f042 0208 	orr.w	r2, r2, #8
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	e007      	b.n	8001612 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f022 0208 	bic.w	r2, r2, #8
 8001610:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	7f5b      	ldrb	r3, [r3, #29]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d108      	bne.n	800162c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f042 0204 	orr.w	r2, r2, #4
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	e007      	b.n	800163c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f022 0204 	bic.w	r2, r2, #4
 800163a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	431a      	orrs	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	691b      	ldr	r3, [r3, #16]
 800164a:	431a      	orrs	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	695b      	ldr	r3, [r3, #20]
 8001650:	ea42 0103 	orr.w	r1, r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	1e5a      	subs	r2, r3, #1
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	430a      	orrs	r2, r1
 8001660:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2201      	movs	r2, #1
 800166c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800167a:	b480      	push	{r7}
 800167c:	b087      	sub	sp, #28
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
 8001682:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001690:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001692:	7cfb      	ldrb	r3, [r7, #19]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d003      	beq.n	80016a0 <HAL_CAN_ConfigFilter+0x26>
 8001698:	7cfb      	ldrb	r3, [r7, #19]
 800169a:	2b02      	cmp	r3, #2
 800169c:	f040 80aa 	bne.w	80017f4 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80016a6:	f043 0201 	orr.w	r2, r3, #1
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	695b      	ldr	r3, [r3, #20]
 80016b4:	f003 031f 	and.w	r3, r3, #31
 80016b8:	2201      	movs	r2, #1
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	43db      	mvns	r3, r3
 80016ca:	401a      	ands	r2, r3
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d123      	bne.n	8001722 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	43db      	mvns	r3, r3
 80016e4:	401a      	ands	r2, r3
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80016f8:	683a      	ldr	r2, [r7, #0]
 80016fa:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80016fc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	3248      	adds	r2, #72	; 0x48
 8001702:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001716:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001718:	6979      	ldr	r1, [r7, #20]
 800171a:	3348      	adds	r3, #72	; 0x48
 800171c:	00db      	lsls	r3, r3, #3
 800171e:	440b      	add	r3, r1
 8001720:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	69db      	ldr	r3, [r3, #28]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d122      	bne.n	8001770 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	431a      	orrs	r2, r3
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001746:	683a      	ldr	r2, [r7, #0]
 8001748:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800174a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	3248      	adds	r2, #72	; 0x48
 8001750:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001764:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001766:	6979      	ldr	r1, [r7, #20]
 8001768:	3348      	adds	r3, #72	; 0x48
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	440b      	add	r3, r1
 800176e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d109      	bne.n	800178c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	43db      	mvns	r3, r3
 8001782:	401a      	ands	r2, r3
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800178a:	e007      	b.n	800179c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	431a      	orrs	r2, r3
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	691b      	ldr	r3, [r3, #16]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d109      	bne.n	80017b8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	43db      	mvns	r3, r3
 80017ae:	401a      	ands	r2, r3
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80017b6:	e007      	b.n	80017c8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	431a      	orrs	r2, r3
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	6a1b      	ldr	r3, [r3, #32]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d107      	bne.n	80017e0 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	431a      	orrs	r2, r3
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80017e6:	f023 0201 	bic.w	r2, r3, #1
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80017f0:	2300      	movs	r3, #0
 80017f2:	e006      	b.n	8001802 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
  }
}
 8001802:	4618      	mov	r0, r3
 8001804:	371c      	adds	r7, #28
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b084      	sub	sp, #16
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f893 3020 	ldrb.w	r3, [r3, #32]
 800181c:	b2db      	uxtb	r3, r3
 800181e:	2b01      	cmp	r3, #1
 8001820:	d12e      	bne.n	8001880 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2202      	movs	r2, #2
 8001826:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f022 0201 	bic.w	r2, r2, #1
 8001838:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800183a:	f7ff fdf3 	bl	8001424 <HAL_GetTick>
 800183e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001840:	e012      	b.n	8001868 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001842:	f7ff fdef 	bl	8001424 <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b0a      	cmp	r3, #10
 800184e:	d90b      	bls.n	8001868 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001854:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2205      	movs	r2, #5
 8001860:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e012      	b.n	800188e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	2b00      	cmp	r3, #0
 8001874:	d1e5      	bne.n	8001842 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800187c:	2300      	movs	r3, #0
 800187e:	e006      	b.n	800188e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001884:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
  }
}
 800188e:	4618      	mov	r0, r3
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001896:	b480      	push	{r7}
 8001898:	b089      	sub	sp, #36	; 0x24
 800189a:	af00      	add	r7, sp, #0
 800189c:	60f8      	str	r0, [r7, #12]
 800189e:	60b9      	str	r1, [r7, #8]
 80018a0:	607a      	str	r2, [r7, #4]
 80018a2:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018aa:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80018b4:	7ffb      	ldrb	r3, [r7, #31]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d003      	beq.n	80018c2 <HAL_CAN_AddTxMessage+0x2c>
 80018ba:	7ffb      	ldrb	r3, [r7, #31]
 80018bc:	2b02      	cmp	r3, #2
 80018be:	f040 80b8 	bne.w	8001a32 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d10a      	bne.n	80018e2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d105      	bne.n	80018e2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80018dc:	2b00      	cmp	r3, #0
 80018de:	f000 80a0 	beq.w	8001a22 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	0e1b      	lsrs	r3, r3, #24
 80018e6:	f003 0303 	and.w	r3, r3, #3
 80018ea:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d907      	bls.n	8001902 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e09e      	b.n	8001a40 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001902:	2201      	movs	r2, #1
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	409a      	lsls	r2, r3
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d10d      	bne.n	8001930 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800191e:	68f9      	ldr	r1, [r7, #12]
 8001920:	6809      	ldr	r1, [r1, #0]
 8001922:	431a      	orrs	r2, r3
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	3318      	adds	r3, #24
 8001928:	011b      	lsls	r3, r3, #4
 800192a:	440b      	add	r3, r1
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	e00f      	b.n	8001950 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800193a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001940:	68f9      	ldr	r1, [r7, #12]
 8001942:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001944:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	3318      	adds	r3, #24
 800194a:	011b      	lsls	r3, r3, #4
 800194c:	440b      	add	r3, r1
 800194e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	6819      	ldr	r1, [r3, #0]
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	691a      	ldr	r2, [r3, #16]
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	3318      	adds	r3, #24
 800195c:	011b      	lsls	r3, r3, #4
 800195e:	440b      	add	r3, r1
 8001960:	3304      	adds	r3, #4
 8001962:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	7d1b      	ldrb	r3, [r3, #20]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d111      	bne.n	8001990 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	3318      	adds	r3, #24
 8001974:	011b      	lsls	r3, r3, #4
 8001976:	4413      	add	r3, r2
 8001978:	3304      	adds	r3, #4
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	68fa      	ldr	r2, [r7, #12]
 800197e:	6811      	ldr	r1, [r2, #0]
 8001980:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	3318      	adds	r3, #24
 8001988:	011b      	lsls	r3, r3, #4
 800198a:	440b      	add	r3, r1
 800198c:	3304      	adds	r3, #4
 800198e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3307      	adds	r3, #7
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	061a      	lsls	r2, r3, #24
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3306      	adds	r3, #6
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	041b      	lsls	r3, r3, #16
 80019a0:	431a      	orrs	r2, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	3305      	adds	r3, #5
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	021b      	lsls	r3, r3, #8
 80019aa:	4313      	orrs	r3, r2
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	3204      	adds	r2, #4
 80019b0:	7812      	ldrb	r2, [r2, #0]
 80019b2:	4610      	mov	r0, r2
 80019b4:	68fa      	ldr	r2, [r7, #12]
 80019b6:	6811      	ldr	r1, [r2, #0]
 80019b8:	ea43 0200 	orr.w	r2, r3, r0
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	011b      	lsls	r3, r3, #4
 80019c0:	440b      	add	r3, r1
 80019c2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80019c6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3303      	adds	r3, #3
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	061a      	lsls	r2, r3, #24
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	3302      	adds	r3, #2
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	041b      	lsls	r3, r3, #16
 80019d8:	431a      	orrs	r2, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	3301      	adds	r3, #1
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	021b      	lsls	r3, r3, #8
 80019e2:	4313      	orrs	r3, r2
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	7812      	ldrb	r2, [r2, #0]
 80019e8:	4610      	mov	r0, r2
 80019ea:	68fa      	ldr	r2, [r7, #12]
 80019ec:	6811      	ldr	r1, [r2, #0]
 80019ee:	ea43 0200 	orr.w	r2, r3, r0
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	011b      	lsls	r3, r3, #4
 80019f6:	440b      	add	r3, r1
 80019f8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80019fc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	3318      	adds	r3, #24
 8001a06:	011b      	lsls	r3, r3, #4
 8001a08:	4413      	add	r3, r2
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	68fa      	ldr	r2, [r7, #12]
 8001a0e:	6811      	ldr	r1, [r2, #0]
 8001a10:	f043 0201 	orr.w	r2, r3, #1
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	3318      	adds	r3, #24
 8001a18:	011b      	lsls	r3, r3, #4
 8001a1a:	440b      	add	r3, r1
 8001a1c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	e00e      	b.n	8001a40 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a26:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e006      	b.n	8001a40 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a36:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
  }
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3724      	adds	r7, #36	; 0x24
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b087      	sub	sp, #28
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
 8001a58:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a60:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a62:	7dfb      	ldrb	r3, [r7, #23]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d003      	beq.n	8001a70 <HAL_CAN_GetRxMessage+0x24>
 8001a68:	7dfb      	ldrb	r3, [r7, #23]
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	f040 80f3 	bne.w	8001c56 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d10e      	bne.n	8001a94 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	f003 0303 	and.w	r3, r3, #3
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d116      	bne.n	8001ab2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a88:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e0e7      	b.n	8001c64 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	691b      	ldr	r3, [r3, #16]
 8001a9a:	f003 0303 	and.w	r3, r3, #3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d107      	bne.n	8001ab2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e0d8      	b.n	8001c64 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	331b      	adds	r3, #27
 8001aba:	011b      	lsls	r3, r3, #4
 8001abc:	4413      	add	r3, r2
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0204 	and.w	r2, r3, #4
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d10c      	bne.n	8001aea <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	331b      	adds	r3, #27
 8001ad8:	011b      	lsls	r3, r3, #4
 8001ada:	4413      	add	r3, r2
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	0d5b      	lsrs	r3, r3, #21
 8001ae0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	e00b      	b.n	8001b02 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	331b      	adds	r3, #27
 8001af2:	011b      	lsls	r3, r3, #4
 8001af4:	4413      	add	r3, r2
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	08db      	lsrs	r3, r3, #3
 8001afa:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	331b      	adds	r3, #27
 8001b0a:	011b      	lsls	r3, r3, #4
 8001b0c:	4413      	add	r3, r2
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0202 	and.w	r2, r3, #2
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	331b      	adds	r3, #27
 8001b20:	011b      	lsls	r3, r3, #4
 8001b22:	4413      	add	r3, r2
 8001b24:	3304      	adds	r3, #4
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 020f 	and.w	r2, r3, #15
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	331b      	adds	r3, #27
 8001b38:	011b      	lsls	r3, r3, #4
 8001b3a:	4413      	add	r3, r2
 8001b3c:	3304      	adds	r3, #4
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	0a1b      	lsrs	r3, r3, #8
 8001b42:	b2da      	uxtb	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	331b      	adds	r3, #27
 8001b50:	011b      	lsls	r3, r3, #4
 8001b52:	4413      	add	r3, r2
 8001b54:	3304      	adds	r3, #4
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	0c1b      	lsrs	r3, r3, #16
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	011b      	lsls	r3, r3, #4
 8001b68:	4413      	add	r3, r2
 8001b6a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	b2da      	uxtb	r2, r3
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	011b      	lsls	r3, r3, #4
 8001b7e:	4413      	add	r3, r2
 8001b80:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	0a1a      	lsrs	r2, r3, #8
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	b2d2      	uxtb	r2, r2
 8001b8e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	011b      	lsls	r3, r3, #4
 8001b98:	4413      	add	r3, r2
 8001b9a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	0c1a      	lsrs	r2, r3, #16
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	3302      	adds	r3, #2
 8001ba6:	b2d2      	uxtb	r2, r2
 8001ba8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	011b      	lsls	r3, r3, #4
 8001bb2:	4413      	add	r3, r2
 8001bb4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	0e1a      	lsrs	r2, r3, #24
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	3303      	adds	r3, #3
 8001bc0:	b2d2      	uxtb	r2, r2
 8001bc2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	011b      	lsls	r3, r3, #4
 8001bcc:	4413      	add	r3, r2
 8001bce:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	3304      	adds	r3, #4
 8001bd8:	b2d2      	uxtb	r2, r2
 8001bda:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	011b      	lsls	r3, r3, #4
 8001be4:	4413      	add	r3, r2
 8001be6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	0a1a      	lsrs	r2, r3, #8
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	3305      	adds	r3, #5
 8001bf2:	b2d2      	uxtb	r2, r2
 8001bf4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	011b      	lsls	r3, r3, #4
 8001bfe:	4413      	add	r3, r2
 8001c00:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	0c1a      	lsrs	r2, r3, #16
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	3306      	adds	r3, #6
 8001c0c:	b2d2      	uxtb	r2, r2
 8001c0e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	011b      	lsls	r3, r3, #4
 8001c18:	4413      	add	r3, r2
 8001c1a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	0e1a      	lsrs	r2, r3, #24
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	3307      	adds	r3, #7
 8001c26:	b2d2      	uxtb	r2, r2
 8001c28:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d108      	bne.n	8001c42 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	68da      	ldr	r2, [r3, #12]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f042 0220 	orr.w	r2, r2, #32
 8001c3e:	60da      	str	r2, [r3, #12]
 8001c40:	e007      	b.n	8001c52 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	691a      	ldr	r2, [r3, #16]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f042 0220 	orr.w	r2, r2, #32
 8001c50:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001c52:	2300      	movs	r3, #0
 8001c54:	e006      	b.n	8001c64 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
  }
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	371c      	adds	r7, #28
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c80:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c82:	7bfb      	ldrb	r3, [r7, #15]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d002      	beq.n	8001c8e <HAL_CAN_ActivateNotification+0x1e>
 8001c88:	7bfb      	ldrb	r3, [r7, #15]
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d109      	bne.n	8001ca2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	6959      	ldr	r1, [r3, #20]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	683a      	ldr	r2, [r7, #0]
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	e006      	b.n	8001cb0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
  }
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3714      	adds	r7, #20
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ccc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001cce:	7bfb      	ldrb	r3, [r7, #15]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d002      	beq.n	8001cda <HAL_CAN_DeactivateNotification+0x1e>
 8001cd4:	7bfb      	ldrb	r3, [r7, #15]
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d10a      	bne.n	8001cf0 <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	6959      	ldr	r1, [r3, #20]
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	43da      	mvns	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	400a      	ands	r2, r1
 8001cea:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001cec:	2300      	movs	r3, #0
 8001cee:	e006      	b.n	8001cfe <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
  }
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3714      	adds	r7, #20
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr

08001d0a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b08a      	sub	sp, #40	; 0x28
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001d12:	2300      	movs	r3, #0
 8001d14:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	695b      	ldr	r3, [r3, #20]
 8001d1c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	691b      	ldr	r3, [r3, #16]
 8001d3c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001d46:	6a3b      	ldr	r3, [r7, #32]
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d07c      	beq.n	8001e4a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d023      	beq.n	8001da2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d003      	beq.n	8001d74 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f000 f983 	bl	8002078 <HAL_CAN_TxMailbox0CompleteCallback>
 8001d72:	e016      	b.n	8001da2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	f003 0304 	and.w	r3, r3, #4
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d004      	beq.n	8001d88 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d80:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d84:	627b      	str	r3, [r7, #36]	; 0x24
 8001d86:	e00c      	b.n	8001da2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	f003 0308 	and.w	r3, r3, #8
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d004      	beq.n	8001d9c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d98:	627b      	str	r3, [r7, #36]	; 0x24
 8001d9a:	e002      	b.n	8001da2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f000 f989 	bl	80020b4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d024      	beq.n	8001df6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001db4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d003      	beq.n	8001dc8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f000 f963 	bl	800208c <HAL_CAN_TxMailbox1CompleteCallback>
 8001dc6:	e016      	b.n	8001df6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d004      	beq.n	8001ddc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001dd8:	627b      	str	r3, [r7, #36]	; 0x24
 8001dda:	e00c      	b.n	8001df6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d004      	beq.n	8001df0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dec:	627b      	str	r3, [r7, #36]	; 0x24
 8001dee:	e002      	b.n	8001df6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f000 f969 	bl	80020c8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d024      	beq.n	8001e4a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e08:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d003      	beq.n	8001e1c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 f943 	bl	80020a0 <HAL_CAN_TxMailbox2CompleteCallback>
 8001e1a:	e016      	b.n	8001e4a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d004      	beq.n	8001e30 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e2c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e2e:	e00c      	b.n	8001e4a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d004      	beq.n	8001e44 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e40:	627b      	str	r3, [r7, #36]	; 0x24
 8001e42:	e002      	b.n	8001e4a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f000 f949 	bl	80020dc <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001e4a:	6a3b      	ldr	r3, [r7, #32]
 8001e4c:	f003 0308 	and.w	r3, r3, #8
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d00c      	beq.n	8001e6e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	f003 0310 	and.w	r3, r3, #16
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d007      	beq.n	8001e6e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e64:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2210      	movs	r2, #16
 8001e6c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001e6e:	6a3b      	ldr	r3, [r7, #32]
 8001e70:	f003 0304 	and.w	r3, r3, #4
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d00b      	beq.n	8001e90 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	f003 0308 	and.w	r3, r3, #8
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d006      	beq.n	8001e90 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2208      	movs	r2, #8
 8001e88:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f93a 	bl	8002104 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001e90:	6a3b      	ldr	r3, [r7, #32]
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d009      	beq.n	8001eae <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	f003 0303 	and.w	r3, r3, #3
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d002      	beq.n	8001eae <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f000 f921 	bl	80020f0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001eae:	6a3b      	ldr	r3, [r7, #32]
 8001eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d00c      	beq.n	8001ed2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	f003 0310 	and.w	r3, r3, #16
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d007      	beq.n	8001ed2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ec8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2210      	movs	r2, #16
 8001ed0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001ed2:	6a3b      	ldr	r3, [r7, #32]
 8001ed4:	f003 0320 	and.w	r3, r3, #32
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d00b      	beq.n	8001ef4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	f003 0308 	and.w	r3, r3, #8
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d006      	beq.n	8001ef4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2208      	movs	r2, #8
 8001eec:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 f91c 	bl	800212c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001ef4:	6a3b      	ldr	r3, [r7, #32]
 8001ef6:	f003 0310 	and.w	r3, r3, #16
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d009      	beq.n	8001f12 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	691b      	ldr	r3, [r3, #16]
 8001f04:	f003 0303 	and.w	r3, r3, #3
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d002      	beq.n	8001f12 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f000 f903 	bl	8002118 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001f12:	6a3b      	ldr	r3, [r7, #32]
 8001f14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d00b      	beq.n	8001f34 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	f003 0310 	and.w	r3, r3, #16
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d006      	beq.n	8001f34 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2210      	movs	r2, #16
 8001f2c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 f906 	bl	8002140 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001f34:	6a3b      	ldr	r3, [r7, #32]
 8001f36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00b      	beq.n	8001f56 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	f003 0308 	and.w	r3, r3, #8
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d006      	beq.n	8001f56 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2208      	movs	r2, #8
 8001f4e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f000 f8ff 	bl	8002154 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001f56:	6a3b      	ldr	r3, [r7, #32]
 8001f58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d07b      	beq.n	8002058 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	f003 0304 	and.w	r3, r3, #4
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d072      	beq.n	8002050 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001f6a:	6a3b      	ldr	r3, [r7, #32]
 8001f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d008      	beq.n	8001f86 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f80:	f043 0301 	orr.w	r3, r3, #1
 8001f84:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001f86:	6a3b      	ldr	r3, [r7, #32]
 8001f88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d008      	beq.n	8001fa2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9c:	f043 0302 	orr.w	r3, r3, #2
 8001fa0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001fa2:	6a3b      	ldr	r3, [r7, #32]
 8001fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d008      	beq.n	8001fbe <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d003      	beq.n	8001fbe <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb8:	f043 0304 	orr.w	r3, r3, #4
 8001fbc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001fbe:	6a3b      	ldr	r3, [r7, #32]
 8001fc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d043      	beq.n	8002050 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d03e      	beq.n	8002050 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001fd8:	2b60      	cmp	r3, #96	; 0x60
 8001fda:	d02b      	beq.n	8002034 <HAL_CAN_IRQHandler+0x32a>
 8001fdc:	2b60      	cmp	r3, #96	; 0x60
 8001fde:	d82e      	bhi.n	800203e <HAL_CAN_IRQHandler+0x334>
 8001fe0:	2b50      	cmp	r3, #80	; 0x50
 8001fe2:	d022      	beq.n	800202a <HAL_CAN_IRQHandler+0x320>
 8001fe4:	2b50      	cmp	r3, #80	; 0x50
 8001fe6:	d82a      	bhi.n	800203e <HAL_CAN_IRQHandler+0x334>
 8001fe8:	2b40      	cmp	r3, #64	; 0x40
 8001fea:	d019      	beq.n	8002020 <HAL_CAN_IRQHandler+0x316>
 8001fec:	2b40      	cmp	r3, #64	; 0x40
 8001fee:	d826      	bhi.n	800203e <HAL_CAN_IRQHandler+0x334>
 8001ff0:	2b30      	cmp	r3, #48	; 0x30
 8001ff2:	d010      	beq.n	8002016 <HAL_CAN_IRQHandler+0x30c>
 8001ff4:	2b30      	cmp	r3, #48	; 0x30
 8001ff6:	d822      	bhi.n	800203e <HAL_CAN_IRQHandler+0x334>
 8001ff8:	2b10      	cmp	r3, #16
 8001ffa:	d002      	beq.n	8002002 <HAL_CAN_IRQHandler+0x2f8>
 8001ffc:	2b20      	cmp	r3, #32
 8001ffe:	d005      	beq.n	800200c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002000:	e01d      	b.n	800203e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002004:	f043 0308 	orr.w	r3, r3, #8
 8002008:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800200a:	e019      	b.n	8002040 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800200c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200e:	f043 0310 	orr.w	r3, r3, #16
 8002012:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002014:	e014      	b.n	8002040 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002018:	f043 0320 	orr.w	r3, r3, #32
 800201c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800201e:	e00f      	b.n	8002040 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002022:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002026:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002028:	e00a      	b.n	8002040 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800202a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002030:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002032:	e005      	b.n	8002040 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002036:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800203a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800203c:	e000      	b.n	8002040 <HAL_CAN_IRQHandler+0x336>
            break;
 800203e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	699a      	ldr	r2, [r3, #24]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800204e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2204      	movs	r2, #4
 8002056:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205a:	2b00      	cmp	r3, #0
 800205c:	d008      	beq.n	8002070 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002064:	431a      	orrs	r2, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 f87c 	bl	8002168 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002070:	bf00      	nop
 8002072:	3728      	adds	r7, #40	; 0x28
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800218c:	4b0c      	ldr	r3, [pc, #48]	; (80021c0 <__NVIC_SetPriorityGrouping+0x44>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002192:	68ba      	ldr	r2, [r7, #8]
 8002194:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002198:	4013      	ands	r3, r2
 800219a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021ae:	4a04      	ldr	r2, [pc, #16]	; (80021c0 <__NVIC_SetPriorityGrouping+0x44>)
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	60d3      	str	r3, [r2, #12]
}
 80021b4:	bf00      	nop
 80021b6:	3714      	adds	r7, #20
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	e000ed00 	.word	0xe000ed00

080021c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021c8:	4b04      	ldr	r3, [pc, #16]	; (80021dc <__NVIC_GetPriorityGrouping+0x18>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	0a1b      	lsrs	r3, r3, #8
 80021ce:	f003 0307 	and.w	r3, r3, #7
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	e000ed00 	.word	0xe000ed00

080021e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	4603      	mov	r3, r0
 80021e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	db0b      	blt.n	800220a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021f2:	79fb      	ldrb	r3, [r7, #7]
 80021f4:	f003 021f 	and.w	r2, r3, #31
 80021f8:	4907      	ldr	r1, [pc, #28]	; (8002218 <__NVIC_EnableIRQ+0x38>)
 80021fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fe:	095b      	lsrs	r3, r3, #5
 8002200:	2001      	movs	r0, #1
 8002202:	fa00 f202 	lsl.w	r2, r0, r2
 8002206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800220a:	bf00      	nop
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	e000e100 	.word	0xe000e100

0800221c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	4603      	mov	r3, r0
 8002224:	6039      	str	r1, [r7, #0]
 8002226:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222c:	2b00      	cmp	r3, #0
 800222e:	db0a      	blt.n	8002246 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	b2da      	uxtb	r2, r3
 8002234:	490c      	ldr	r1, [pc, #48]	; (8002268 <__NVIC_SetPriority+0x4c>)
 8002236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223a:	0112      	lsls	r2, r2, #4
 800223c:	b2d2      	uxtb	r2, r2
 800223e:	440b      	add	r3, r1
 8002240:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002244:	e00a      	b.n	800225c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	b2da      	uxtb	r2, r3
 800224a:	4908      	ldr	r1, [pc, #32]	; (800226c <__NVIC_SetPriority+0x50>)
 800224c:	79fb      	ldrb	r3, [r7, #7]
 800224e:	f003 030f 	and.w	r3, r3, #15
 8002252:	3b04      	subs	r3, #4
 8002254:	0112      	lsls	r2, r2, #4
 8002256:	b2d2      	uxtb	r2, r2
 8002258:	440b      	add	r3, r1
 800225a:	761a      	strb	r2, [r3, #24]
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	e000e100 	.word	0xe000e100
 800226c:	e000ed00 	.word	0xe000ed00

08002270 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002270:	b480      	push	{r7}
 8002272:	b089      	sub	sp, #36	; 0x24
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	f1c3 0307 	rsb	r3, r3, #7
 800228a:	2b04      	cmp	r3, #4
 800228c:	bf28      	it	cs
 800228e:	2304      	movcs	r3, #4
 8002290:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	3304      	adds	r3, #4
 8002296:	2b06      	cmp	r3, #6
 8002298:	d902      	bls.n	80022a0 <NVIC_EncodePriority+0x30>
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	3b03      	subs	r3, #3
 800229e:	e000      	b.n	80022a2 <NVIC_EncodePriority+0x32>
 80022a0:	2300      	movs	r3, #0
 80022a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a4:	f04f 32ff 	mov.w	r2, #4294967295
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	43da      	mvns	r2, r3
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	401a      	ands	r2, r3
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022b8:	f04f 31ff 	mov.w	r1, #4294967295
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	fa01 f303 	lsl.w	r3, r1, r3
 80022c2:	43d9      	mvns	r1, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c8:	4313      	orrs	r3, r2
         );
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3724      	adds	r7, #36	; 0x24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
	...

080022d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	3b01      	subs	r3, #1
 80022e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022e8:	d301      	bcc.n	80022ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ea:	2301      	movs	r3, #1
 80022ec:	e00f      	b.n	800230e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ee:	4a0a      	ldr	r2, [pc, #40]	; (8002318 <SysTick_Config+0x40>)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	3b01      	subs	r3, #1
 80022f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022f6:	210f      	movs	r1, #15
 80022f8:	f04f 30ff 	mov.w	r0, #4294967295
 80022fc:	f7ff ff8e 	bl	800221c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002300:	4b05      	ldr	r3, [pc, #20]	; (8002318 <SysTick_Config+0x40>)
 8002302:	2200      	movs	r2, #0
 8002304:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002306:	4b04      	ldr	r3, [pc, #16]	; (8002318 <SysTick_Config+0x40>)
 8002308:	2207      	movs	r2, #7
 800230a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	e000e010 	.word	0xe000e010

0800231c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f7ff ff29 	bl	800217c <__NVIC_SetPriorityGrouping>
}
 800232a:	bf00      	nop
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b086      	sub	sp, #24
 8002336:	af00      	add	r7, sp, #0
 8002338:	4603      	mov	r3, r0
 800233a:	60b9      	str	r1, [r7, #8]
 800233c:	607a      	str	r2, [r7, #4]
 800233e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002340:	2300      	movs	r3, #0
 8002342:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002344:	f7ff ff3e 	bl	80021c4 <__NVIC_GetPriorityGrouping>
 8002348:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	68b9      	ldr	r1, [r7, #8]
 800234e:	6978      	ldr	r0, [r7, #20]
 8002350:	f7ff ff8e 	bl	8002270 <NVIC_EncodePriority>
 8002354:	4602      	mov	r2, r0
 8002356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800235a:	4611      	mov	r1, r2
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff ff5d 	bl	800221c <__NVIC_SetPriority>
}
 8002362:	bf00      	nop
 8002364:	3718      	adds	r7, #24
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b082      	sub	sp, #8
 800236e:	af00      	add	r7, sp, #0
 8002370:	4603      	mov	r3, r0
 8002372:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff ff31 	bl	80021e0 <__NVIC_EnableIRQ>
}
 800237e:	bf00      	nop
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b082      	sub	sp, #8
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f7ff ffa2 	bl	80022d8 <SysTick_Config>
 8002394:	4603      	mov	r3, r0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
	...

080023a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b087      	sub	sp, #28
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023aa:	2300      	movs	r3, #0
 80023ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023ae:	e166      	b.n	800267e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	2101      	movs	r1, #1
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	fa01 f303 	lsl.w	r3, r1, r3
 80023bc:	4013      	ands	r3, r2
 80023be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f000 8158 	beq.w	8002678 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f003 0303 	and.w	r3, r3, #3
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d005      	beq.n	80023e0 <HAL_GPIO_Init+0x40>
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f003 0303 	and.w	r3, r3, #3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d130      	bne.n	8002442 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	2203      	movs	r2, #3
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	43db      	mvns	r3, r3
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	4013      	ands	r3, r2
 80023f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	68da      	ldr	r2, [r3, #12]
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	4313      	orrs	r3, r2
 8002408:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002416:	2201      	movs	r2, #1
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	43db      	mvns	r3, r3
 8002420:	693a      	ldr	r2, [r7, #16]
 8002422:	4013      	ands	r3, r2
 8002424:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	091b      	lsrs	r3, r3, #4
 800242c:	f003 0201 	and.w	r2, r3, #1
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	4313      	orrs	r3, r2
 800243a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f003 0303 	and.w	r3, r3, #3
 800244a:	2b03      	cmp	r3, #3
 800244c:	d017      	beq.n	800247e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	2203      	movs	r2, #3
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	43db      	mvns	r3, r3
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	4013      	ands	r3, r2
 8002464:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	689a      	ldr	r2, [r3, #8]
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	4313      	orrs	r3, r2
 8002476:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f003 0303 	and.w	r3, r3, #3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d123      	bne.n	80024d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	08da      	lsrs	r2, r3, #3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	3208      	adds	r2, #8
 8002492:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002496:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	f003 0307 	and.w	r3, r3, #7
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	220f      	movs	r2, #15
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	43db      	mvns	r3, r3
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	4013      	ands	r3, r2
 80024ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	691a      	ldr	r2, [r3, #16]
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	f003 0307 	and.w	r3, r3, #7
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	08da      	lsrs	r2, r3, #3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	3208      	adds	r2, #8
 80024cc:	6939      	ldr	r1, [r7, #16]
 80024ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	2203      	movs	r2, #3
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	43db      	mvns	r3, r3
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	4013      	ands	r3, r2
 80024e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f003 0203 	and.w	r2, r3, #3
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	fa02 f303 	lsl.w	r3, r2, r3
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800250e:	2b00      	cmp	r3, #0
 8002510:	f000 80b2 	beq.w	8002678 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002514:	4b61      	ldr	r3, [pc, #388]	; (800269c <HAL_GPIO_Init+0x2fc>)
 8002516:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002518:	4a60      	ldr	r2, [pc, #384]	; (800269c <HAL_GPIO_Init+0x2fc>)
 800251a:	f043 0301 	orr.w	r3, r3, #1
 800251e:	6613      	str	r3, [r2, #96]	; 0x60
 8002520:	4b5e      	ldr	r3, [pc, #376]	; (800269c <HAL_GPIO_Init+0x2fc>)
 8002522:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002524:	f003 0301 	and.w	r3, r3, #1
 8002528:	60bb      	str	r3, [r7, #8]
 800252a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800252c:	4a5c      	ldr	r2, [pc, #368]	; (80026a0 <HAL_GPIO_Init+0x300>)
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	089b      	lsrs	r3, r3, #2
 8002532:	3302      	adds	r3, #2
 8002534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002538:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	f003 0303 	and.w	r3, r3, #3
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	220f      	movs	r2, #15
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	43db      	mvns	r3, r3
 800254a:	693a      	ldr	r2, [r7, #16]
 800254c:	4013      	ands	r3, r2
 800254e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002556:	d02b      	beq.n	80025b0 <HAL_GPIO_Init+0x210>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4a52      	ldr	r2, [pc, #328]	; (80026a4 <HAL_GPIO_Init+0x304>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d025      	beq.n	80025ac <HAL_GPIO_Init+0x20c>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4a51      	ldr	r2, [pc, #324]	; (80026a8 <HAL_GPIO_Init+0x308>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d01f      	beq.n	80025a8 <HAL_GPIO_Init+0x208>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4a50      	ldr	r2, [pc, #320]	; (80026ac <HAL_GPIO_Init+0x30c>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d019      	beq.n	80025a4 <HAL_GPIO_Init+0x204>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4a4f      	ldr	r2, [pc, #316]	; (80026b0 <HAL_GPIO_Init+0x310>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d013      	beq.n	80025a0 <HAL_GPIO_Init+0x200>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a4e      	ldr	r2, [pc, #312]	; (80026b4 <HAL_GPIO_Init+0x314>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d00d      	beq.n	800259c <HAL_GPIO_Init+0x1fc>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a4d      	ldr	r2, [pc, #308]	; (80026b8 <HAL_GPIO_Init+0x318>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d007      	beq.n	8002598 <HAL_GPIO_Init+0x1f8>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a4c      	ldr	r2, [pc, #304]	; (80026bc <HAL_GPIO_Init+0x31c>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d101      	bne.n	8002594 <HAL_GPIO_Init+0x1f4>
 8002590:	2307      	movs	r3, #7
 8002592:	e00e      	b.n	80025b2 <HAL_GPIO_Init+0x212>
 8002594:	2308      	movs	r3, #8
 8002596:	e00c      	b.n	80025b2 <HAL_GPIO_Init+0x212>
 8002598:	2306      	movs	r3, #6
 800259a:	e00a      	b.n	80025b2 <HAL_GPIO_Init+0x212>
 800259c:	2305      	movs	r3, #5
 800259e:	e008      	b.n	80025b2 <HAL_GPIO_Init+0x212>
 80025a0:	2304      	movs	r3, #4
 80025a2:	e006      	b.n	80025b2 <HAL_GPIO_Init+0x212>
 80025a4:	2303      	movs	r3, #3
 80025a6:	e004      	b.n	80025b2 <HAL_GPIO_Init+0x212>
 80025a8:	2302      	movs	r3, #2
 80025aa:	e002      	b.n	80025b2 <HAL_GPIO_Init+0x212>
 80025ac:	2301      	movs	r3, #1
 80025ae:	e000      	b.n	80025b2 <HAL_GPIO_Init+0x212>
 80025b0:	2300      	movs	r3, #0
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	f002 0203 	and.w	r2, r2, #3
 80025b8:	0092      	lsls	r2, r2, #2
 80025ba:	4093      	lsls	r3, r2
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	4313      	orrs	r3, r2
 80025c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80025c2:	4937      	ldr	r1, [pc, #220]	; (80026a0 <HAL_GPIO_Init+0x300>)
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	089b      	lsrs	r3, r3, #2
 80025c8:	3302      	adds	r3, #2
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025d0:	4b3b      	ldr	r3, [pc, #236]	; (80026c0 <HAL_GPIO_Init+0x320>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	43db      	mvns	r3, r3
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	4013      	ands	r3, r2
 80025de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d003      	beq.n	80025f4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80025ec:	693a      	ldr	r2, [r7, #16]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80025f4:	4a32      	ldr	r2, [pc, #200]	; (80026c0 <HAL_GPIO_Init+0x320>)
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80025fa:	4b31      	ldr	r3, [pc, #196]	; (80026c0 <HAL_GPIO_Init+0x320>)
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	43db      	mvns	r3, r3
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	4013      	ands	r3, r2
 8002608:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d003      	beq.n	800261e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	4313      	orrs	r3, r2
 800261c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800261e:	4a28      	ldr	r2, [pc, #160]	; (80026c0 <HAL_GPIO_Init+0x320>)
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002624:	4b26      	ldr	r3, [pc, #152]	; (80026c0 <HAL_GPIO_Init+0x320>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	43db      	mvns	r3, r3
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	4013      	ands	r3, r2
 8002632:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d003      	beq.n	8002648 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	4313      	orrs	r3, r2
 8002646:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002648:	4a1d      	ldr	r2, [pc, #116]	; (80026c0 <HAL_GPIO_Init+0x320>)
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800264e:	4b1c      	ldr	r3, [pc, #112]	; (80026c0 <HAL_GPIO_Init+0x320>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	43db      	mvns	r3, r3
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	4013      	ands	r3, r2
 800265c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	4313      	orrs	r3, r2
 8002670:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002672:	4a13      	ldr	r2, [pc, #76]	; (80026c0 <HAL_GPIO_Init+0x320>)
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	3301      	adds	r3, #1
 800267c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	fa22 f303 	lsr.w	r3, r2, r3
 8002688:	2b00      	cmp	r3, #0
 800268a:	f47f ae91 	bne.w	80023b0 <HAL_GPIO_Init+0x10>
  }
}
 800268e:	bf00      	nop
 8002690:	bf00      	nop
 8002692:	371c      	adds	r7, #28
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr
 800269c:	40021000 	.word	0x40021000
 80026a0:	40010000 	.word	0x40010000
 80026a4:	48000400 	.word	0x48000400
 80026a8:	48000800 	.word	0x48000800
 80026ac:	48000c00 	.word	0x48000c00
 80026b0:	48001000 	.word	0x48001000
 80026b4:	48001400 	.word	0x48001400
 80026b8:	48001800 	.word	0x48001800
 80026bc:	48001c00 	.word	0x48001c00
 80026c0:	40010400 	.word	0x40010400

080026c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	460b      	mov	r3, r1
 80026ce:	807b      	strh	r3, [r7, #2]
 80026d0:	4613      	mov	r3, r2
 80026d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026d4:	787b      	ldrb	r3, [r7, #1]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026da:	887a      	ldrh	r2, [r7, #2]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80026e0:	e002      	b.n	80026e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026e2:	887a      	ldrh	r2, [r7, #2]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80026f8:	4b0d      	ldr	r3, [pc, #52]	; (8002730 <HAL_PWREx_GetVoltageRange+0x3c>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002700:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002704:	d102      	bne.n	800270c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002706:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800270a:	e00b      	b.n	8002724 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800270c:	4b08      	ldr	r3, [pc, #32]	; (8002730 <HAL_PWREx_GetVoltageRange+0x3c>)
 800270e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002716:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800271a:	d102      	bne.n	8002722 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800271c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002720:	e000      	b.n	8002724 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002722:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002724:	4618      	mov	r0, r3
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	40007000 	.word	0x40007000

08002734 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002734:	b480      	push	{r7}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d141      	bne.n	80027c6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002742:	4b4b      	ldr	r3, [pc, #300]	; (8002870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800274a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800274e:	d131      	bne.n	80027b4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002750:	4b47      	ldr	r3, [pc, #284]	; (8002870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002752:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002756:	4a46      	ldr	r2, [pc, #280]	; (8002870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002758:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800275c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002760:	4b43      	ldr	r3, [pc, #268]	; (8002870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002768:	4a41      	ldr	r2, [pc, #260]	; (8002870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800276a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800276e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002770:	4b40      	ldr	r3, [pc, #256]	; (8002874 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2232      	movs	r2, #50	; 0x32
 8002776:	fb02 f303 	mul.w	r3, r2, r3
 800277a:	4a3f      	ldr	r2, [pc, #252]	; (8002878 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800277c:	fba2 2303 	umull	r2, r3, r2, r3
 8002780:	0c9b      	lsrs	r3, r3, #18
 8002782:	3301      	adds	r3, #1
 8002784:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002786:	e002      	b.n	800278e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	3b01      	subs	r3, #1
 800278c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800278e:	4b38      	ldr	r3, [pc, #224]	; (8002870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002796:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800279a:	d102      	bne.n	80027a2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1f2      	bne.n	8002788 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027a2:	4b33      	ldr	r3, [pc, #204]	; (8002870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ae:	d158      	bne.n	8002862 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e057      	b.n	8002864 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80027b4:	4b2e      	ldr	r3, [pc, #184]	; (8002870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027ba:	4a2d      	ldr	r2, [pc, #180]	; (8002870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80027c4:	e04d      	b.n	8002862 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027cc:	d141      	bne.n	8002852 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80027ce:	4b28      	ldr	r3, [pc, #160]	; (8002870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80027d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027da:	d131      	bne.n	8002840 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80027dc:	4b24      	ldr	r3, [pc, #144]	; (8002870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027e2:	4a23      	ldr	r2, [pc, #140]	; (8002870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80027ec:	4b20      	ldr	r3, [pc, #128]	; (8002870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80027f4:	4a1e      	ldr	r2, [pc, #120]	; (8002870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80027fc:	4b1d      	ldr	r3, [pc, #116]	; (8002874 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2232      	movs	r2, #50	; 0x32
 8002802:	fb02 f303 	mul.w	r3, r2, r3
 8002806:	4a1c      	ldr	r2, [pc, #112]	; (8002878 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002808:	fba2 2303 	umull	r2, r3, r2, r3
 800280c:	0c9b      	lsrs	r3, r3, #18
 800280e:	3301      	adds	r3, #1
 8002810:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002812:	e002      	b.n	800281a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	3b01      	subs	r3, #1
 8002818:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800281a:	4b15      	ldr	r3, [pc, #84]	; (8002870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002822:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002826:	d102      	bne.n	800282e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1f2      	bne.n	8002814 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800282e:	4b10      	ldr	r3, [pc, #64]	; (8002870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002836:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800283a:	d112      	bne.n	8002862 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e011      	b.n	8002864 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002840:	4b0b      	ldr	r3, [pc, #44]	; (8002870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002842:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002846:	4a0a      	ldr	r2, [pc, #40]	; (8002870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002848:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800284c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002850:	e007      	b.n	8002862 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002852:	4b07      	ldr	r3, [pc, #28]	; (8002870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800285a:	4a05      	ldr	r2, [pc, #20]	; (8002870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800285c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002860:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002862:	2300      	movs	r3, #0
}
 8002864:	4618      	mov	r0, r3
 8002866:	3714      	adds	r7, #20
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	40007000 	.word	0x40007000
 8002874:	20000010 	.word	0x20000010
 8002878:	431bde83 	.word	0x431bde83

0800287c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b08a      	sub	sp, #40	; 0x28
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d102      	bne.n	8002890 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	f000 bc76 	b.w	800317c <HAL_RCC_OscConfig+0x900>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002890:	4ba1      	ldr	r3, [pc, #644]	; (8002b18 <HAL_RCC_OscConfig+0x29c>)
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f003 030c 	and.w	r3, r3, #12
 8002898:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800289a:	4b9f      	ldr	r3, [pc, #636]	; (8002b18 <HAL_RCC_OscConfig+0x29c>)
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	f003 0303 	and.w	r3, r3, #3
 80028a2:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0310 	and.w	r3, r3, #16
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	f000 80e6 	beq.w	8002a7e <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028b2:	6a3b      	ldr	r3, [r7, #32]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d007      	beq.n	80028c8 <HAL_RCC_OscConfig+0x4c>
 80028b8:	6a3b      	ldr	r3, [r7, #32]
 80028ba:	2b0c      	cmp	r3, #12
 80028bc:	f040 808d 	bne.w	80029da <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	f040 8089 	bne.w	80029da <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028c8:	4b93      	ldr	r3, [pc, #588]	; (8002b18 <HAL_RCC_OscConfig+0x29c>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0302 	and.w	r3, r3, #2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d006      	beq.n	80028e2 <HAL_RCC_OscConfig+0x66>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	69db      	ldr	r3, [r3, #28]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d102      	bne.n	80028e2 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	f000 bc4d 	b.w	800317c <HAL_RCC_OscConfig+0x900>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028e6:	4b8c      	ldr	r3, [pc, #560]	; (8002b18 <HAL_RCC_OscConfig+0x29c>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0308 	and.w	r3, r3, #8
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d004      	beq.n	80028fc <HAL_RCC_OscConfig+0x80>
 80028f2:	4b89      	ldr	r3, [pc, #548]	; (8002b18 <HAL_RCC_OscConfig+0x29c>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028fa:	e005      	b.n	8002908 <HAL_RCC_OscConfig+0x8c>
 80028fc:	4b86      	ldr	r3, [pc, #536]	; (8002b18 <HAL_RCC_OscConfig+0x29c>)
 80028fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002902:	091b      	lsrs	r3, r3, #4
 8002904:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002908:	4293      	cmp	r3, r2
 800290a:	d224      	bcs.n	8002956 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002910:	4618      	mov	r0, r3
 8002912:	f000 fdf3 	bl	80034fc <RCC_SetFlashLatencyFromMSIRange>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d002      	beq.n	8002922 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	f000 bc2d 	b.w	800317c <HAL_RCC_OscConfig+0x900>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002922:	4b7d      	ldr	r3, [pc, #500]	; (8002b18 <HAL_RCC_OscConfig+0x29c>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a7c      	ldr	r2, [pc, #496]	; (8002b18 <HAL_RCC_OscConfig+0x29c>)
 8002928:	f043 0308 	orr.w	r3, r3, #8
 800292c:	6013      	str	r3, [r2, #0]
 800292e:	4b7a      	ldr	r3, [pc, #488]	; (8002b18 <HAL_RCC_OscConfig+0x29c>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293a:	4977      	ldr	r1, [pc, #476]	; (8002b18 <HAL_RCC_OscConfig+0x29c>)
 800293c:	4313      	orrs	r3, r2
 800293e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002940:	4b75      	ldr	r3, [pc, #468]	; (8002b18 <HAL_RCC_OscConfig+0x29c>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a1b      	ldr	r3, [r3, #32]
 800294c:	021b      	lsls	r3, r3, #8
 800294e:	4972      	ldr	r1, [pc, #456]	; (8002b18 <HAL_RCC_OscConfig+0x29c>)
 8002950:	4313      	orrs	r3, r2
 8002952:	604b      	str	r3, [r1, #4]
 8002954:	e025      	b.n	80029a2 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002956:	4b70      	ldr	r3, [pc, #448]	; (8002b18 <HAL_RCC_OscConfig+0x29c>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a6f      	ldr	r2, [pc, #444]	; (8002b18 <HAL_RCC_OscConfig+0x29c>)
 800295c:	f043 0308 	orr.w	r3, r3, #8
 8002960:	6013      	str	r3, [r2, #0]
 8002962:	4b6d      	ldr	r3, [pc, #436]	; (8002b18 <HAL_RCC_OscConfig+0x29c>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296e:	496a      	ldr	r1, [pc, #424]	; (8002b18 <HAL_RCC_OscConfig+0x29c>)
 8002970:	4313      	orrs	r3, r2
 8002972:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002974:	4b68      	ldr	r3, [pc, #416]	; (8002b18 <HAL_RCC_OscConfig+0x29c>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a1b      	ldr	r3, [r3, #32]
 8002980:	021b      	lsls	r3, r3, #8
 8002982:	4965      	ldr	r1, [pc, #404]	; (8002b18 <HAL_RCC_OscConfig+0x29c>)
 8002984:	4313      	orrs	r3, r2
 8002986:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002988:	6a3b      	ldr	r3, [r7, #32]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d109      	bne.n	80029a2 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002992:	4618      	mov	r0, r3
 8002994:	f000 fdb2 	bl	80034fc <RCC_SetFlashLatencyFromMSIRange>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e3ec      	b.n	800317c <HAL_RCC_OscConfig+0x900>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029a2:	f000 fd1f 	bl	80033e4 <HAL_RCC_GetSysClockFreq>
 80029a6:	4602      	mov	r2, r0
 80029a8:	4b5b      	ldr	r3, [pc, #364]	; (8002b18 <HAL_RCC_OscConfig+0x29c>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	091b      	lsrs	r3, r3, #4
 80029ae:	f003 030f 	and.w	r3, r3, #15
 80029b2:	495a      	ldr	r1, [pc, #360]	; (8002b1c <HAL_RCC_OscConfig+0x2a0>)
 80029b4:	5ccb      	ldrb	r3, [r1, r3]
 80029b6:	f003 031f 	and.w	r3, r3, #31
 80029ba:	fa22 f303 	lsr.w	r3, r2, r3
 80029be:	4a58      	ldr	r2, [pc, #352]	; (8002b20 <HAL_RCC_OscConfig+0x2a4>)
 80029c0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80029c2:	4b58      	ldr	r3, [pc, #352]	; (8002b24 <HAL_RCC_OscConfig+0x2a8>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7fe fcdc 	bl	8001384 <HAL_InitTick>
 80029cc:	4603      	mov	r3, r0
 80029ce:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80029d0:	7dfb      	ldrb	r3, [r7, #23]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d052      	beq.n	8002a7c <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80029d6:	7dfb      	ldrb	r3, [r7, #23]
 80029d8:	e3d0      	b.n	800317c <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	69db      	ldr	r3, [r3, #28]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d032      	beq.n	8002a48 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80029e2:	4b4d      	ldr	r3, [pc, #308]	; (8002b18 <HAL_RCC_OscConfig+0x29c>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a4c      	ldr	r2, [pc, #304]	; (8002b18 <HAL_RCC_OscConfig+0x29c>)
 80029e8:	f043 0301 	orr.w	r3, r3, #1
 80029ec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029ee:	f7fe fd19 	bl	8001424 <HAL_GetTick>
 80029f2:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029f4:	e008      	b.n	8002a08 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029f6:	f7fe fd15 	bl	8001424 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d901      	bls.n	8002a08 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e3b9      	b.n	800317c <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a08:	4b43      	ldr	r3, [pc, #268]	; (8002b18 <HAL_RCC_OscConfig+0x29c>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d0f0      	beq.n	80029f6 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a14:	4b40      	ldr	r3, [pc, #256]	; (8002b18 <HAL_RCC_OscConfig+0x29c>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a3f      	ldr	r2, [pc, #252]	; (8002b18 <HAL_RCC_OscConfig+0x29c>)
 8002a1a:	f043 0308 	orr.w	r3, r3, #8
 8002a1e:	6013      	str	r3, [r2, #0]
 8002a20:	4b3d      	ldr	r3, [pc, #244]	; (8002b18 <HAL_RCC_OscConfig+0x29c>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2c:	493a      	ldr	r1, [pc, #232]	; (8002b18 <HAL_RCC_OscConfig+0x29c>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a32:	4b39      	ldr	r3, [pc, #228]	; (8002b18 <HAL_RCC_OscConfig+0x29c>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
 8002a3e:	021b      	lsls	r3, r3, #8
 8002a40:	4935      	ldr	r1, [pc, #212]	; (8002b18 <HAL_RCC_OscConfig+0x29c>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	604b      	str	r3, [r1, #4]
 8002a46:	e01a      	b.n	8002a7e <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a48:	4b33      	ldr	r3, [pc, #204]	; (8002b18 <HAL_RCC_OscConfig+0x29c>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a32      	ldr	r2, [pc, #200]	; (8002b18 <HAL_RCC_OscConfig+0x29c>)
 8002a4e:	f023 0301 	bic.w	r3, r3, #1
 8002a52:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a54:	f7fe fce6 	bl	8001424 <HAL_GetTick>
 8002a58:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a5a:	e008      	b.n	8002a6e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a5c:	f7fe fce2 	bl	8001424 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e386      	b.n	800317c <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a6e:	4b2a      	ldr	r3, [pc, #168]	; (8002b18 <HAL_RCC_OscConfig+0x29c>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1f0      	bne.n	8002a5c <HAL_RCC_OscConfig+0x1e0>
 8002a7a:	e000      	b.n	8002a7e <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a7c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d073      	beq.n	8002b72 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002a8a:	6a3b      	ldr	r3, [r7, #32]
 8002a8c:	2b08      	cmp	r3, #8
 8002a8e:	d005      	beq.n	8002a9c <HAL_RCC_OscConfig+0x220>
 8002a90:	6a3b      	ldr	r3, [r7, #32]
 8002a92:	2b0c      	cmp	r3, #12
 8002a94:	d10e      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	2b03      	cmp	r3, #3
 8002a9a:	d10b      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a9c:	4b1e      	ldr	r3, [pc, #120]	; (8002b18 <HAL_RCC_OscConfig+0x29c>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d063      	beq.n	8002b70 <HAL_RCC_OscConfig+0x2f4>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d15f      	bne.n	8002b70 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e363      	b.n	800317c <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002abc:	d106      	bne.n	8002acc <HAL_RCC_OscConfig+0x250>
 8002abe:	4b16      	ldr	r3, [pc, #88]	; (8002b18 <HAL_RCC_OscConfig+0x29c>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a15      	ldr	r2, [pc, #84]	; (8002b18 <HAL_RCC_OscConfig+0x29c>)
 8002ac4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ac8:	6013      	str	r3, [r2, #0]
 8002aca:	e01d      	b.n	8002b08 <HAL_RCC_OscConfig+0x28c>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ad4:	d10c      	bne.n	8002af0 <HAL_RCC_OscConfig+0x274>
 8002ad6:	4b10      	ldr	r3, [pc, #64]	; (8002b18 <HAL_RCC_OscConfig+0x29c>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a0f      	ldr	r2, [pc, #60]	; (8002b18 <HAL_RCC_OscConfig+0x29c>)
 8002adc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ae0:	6013      	str	r3, [r2, #0]
 8002ae2:	4b0d      	ldr	r3, [pc, #52]	; (8002b18 <HAL_RCC_OscConfig+0x29c>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a0c      	ldr	r2, [pc, #48]	; (8002b18 <HAL_RCC_OscConfig+0x29c>)
 8002ae8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aec:	6013      	str	r3, [r2, #0]
 8002aee:	e00b      	b.n	8002b08 <HAL_RCC_OscConfig+0x28c>
 8002af0:	4b09      	ldr	r3, [pc, #36]	; (8002b18 <HAL_RCC_OscConfig+0x29c>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a08      	ldr	r2, [pc, #32]	; (8002b18 <HAL_RCC_OscConfig+0x29c>)
 8002af6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002afa:	6013      	str	r3, [r2, #0]
 8002afc:	4b06      	ldr	r3, [pc, #24]	; (8002b18 <HAL_RCC_OscConfig+0x29c>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a05      	ldr	r2, [pc, #20]	; (8002b18 <HAL_RCC_OscConfig+0x29c>)
 8002b02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d01b      	beq.n	8002b48 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b10:	f7fe fc88 	bl	8001424 <HAL_GetTick>
 8002b14:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b16:	e010      	b.n	8002b3a <HAL_RCC_OscConfig+0x2be>
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	080050b0 	.word	0x080050b0
 8002b20:	20000010 	.word	0x20000010
 8002b24:	20000014 	.word	0x20000014
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b28:	f7fe fc7c 	bl	8001424 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b64      	cmp	r3, #100	; 0x64
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e320      	b.n	800317c <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b3a:	4ba0      	ldr	r3, [pc, #640]	; (8002dbc <HAL_RCC_OscConfig+0x540>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d0f0      	beq.n	8002b28 <HAL_RCC_OscConfig+0x2ac>
 8002b46:	e014      	b.n	8002b72 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b48:	f7fe fc6c 	bl	8001424 <HAL_GetTick>
 8002b4c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b4e:	e008      	b.n	8002b62 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b50:	f7fe fc68 	bl	8001424 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b64      	cmp	r3, #100	; 0x64
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e30c      	b.n	800317c <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b62:	4b96      	ldr	r3, [pc, #600]	; (8002dbc <HAL_RCC_OscConfig+0x540>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d1f0      	bne.n	8002b50 <HAL_RCC_OscConfig+0x2d4>
 8002b6e:	e000      	b.n	8002b72 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d060      	beq.n	8002c40 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002b7e:	6a3b      	ldr	r3, [r7, #32]
 8002b80:	2b04      	cmp	r3, #4
 8002b82:	d005      	beq.n	8002b90 <HAL_RCC_OscConfig+0x314>
 8002b84:	6a3b      	ldr	r3, [r7, #32]
 8002b86:	2b0c      	cmp	r3, #12
 8002b88:	d119      	bne.n	8002bbe <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d116      	bne.n	8002bbe <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b90:	4b8a      	ldr	r3, [pc, #552]	; (8002dbc <HAL_RCC_OscConfig+0x540>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d005      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x32c>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d101      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e2e9      	b.n	800317c <HAL_RCC_OscConfig+0x900>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ba8:	4b84      	ldr	r3, [pc, #528]	; (8002dbc <HAL_RCC_OscConfig+0x540>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	691b      	ldr	r3, [r3, #16]
 8002bb4:	061b      	lsls	r3, r3, #24
 8002bb6:	4981      	ldr	r1, [pc, #516]	; (8002dbc <HAL_RCC_OscConfig+0x540>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bbc:	e040      	b.n	8002c40 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d023      	beq.n	8002c0e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bc6:	4b7d      	ldr	r3, [pc, #500]	; (8002dbc <HAL_RCC_OscConfig+0x540>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a7c      	ldr	r2, [pc, #496]	; (8002dbc <HAL_RCC_OscConfig+0x540>)
 8002bcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd2:	f7fe fc27 	bl	8001424 <HAL_GetTick>
 8002bd6:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bd8:	e008      	b.n	8002bec <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bda:	f7fe fc23 	bl	8001424 <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d901      	bls.n	8002bec <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e2c7      	b.n	800317c <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bec:	4b73      	ldr	r3, [pc, #460]	; (8002dbc <HAL_RCC_OscConfig+0x540>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d0f0      	beq.n	8002bda <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bf8:	4b70      	ldr	r3, [pc, #448]	; (8002dbc <HAL_RCC_OscConfig+0x540>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	061b      	lsls	r3, r3, #24
 8002c06:	496d      	ldr	r1, [pc, #436]	; (8002dbc <HAL_RCC_OscConfig+0x540>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	604b      	str	r3, [r1, #4]
 8002c0c:	e018      	b.n	8002c40 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c0e:	4b6b      	ldr	r3, [pc, #428]	; (8002dbc <HAL_RCC_OscConfig+0x540>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a6a      	ldr	r2, [pc, #424]	; (8002dbc <HAL_RCC_OscConfig+0x540>)
 8002c14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c1a:	f7fe fc03 	bl	8001424 <HAL_GetTick>
 8002c1e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c20:	e008      	b.n	8002c34 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c22:	f7fe fbff 	bl	8001424 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d901      	bls.n	8002c34 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e2a3      	b.n	800317c <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c34:	4b61      	ldr	r3, [pc, #388]	; (8002dbc <HAL_RCC_OscConfig+0x540>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d1f0      	bne.n	8002c22 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0308 	and.w	r3, r3, #8
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d07f      	beq.n	8002d4c <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	695b      	ldr	r3, [r3, #20]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d05f      	beq.n	8002d14 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8002c54:	4b59      	ldr	r3, [pc, #356]	; (8002dbc <HAL_RCC_OscConfig+0x540>)
 8002c56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c5a:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	699a      	ldr	r2, [r3, #24]
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	f003 0310 	and.w	r3, r3, #16
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d037      	beq.n	8002cda <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d006      	beq.n	8002c82 <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e27c      	b.n	800317c <HAL_RCC_OscConfig+0x900>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	f003 0301 	and.w	r3, r3, #1
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d01b      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8002c8c:	4b4b      	ldr	r3, [pc, #300]	; (8002dbc <HAL_RCC_OscConfig+0x540>)
 8002c8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c92:	4a4a      	ldr	r2, [pc, #296]	; (8002dbc <HAL_RCC_OscConfig+0x540>)
 8002c94:	f023 0301 	bic.w	r3, r3, #1
 8002c98:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c9c:	f7fe fbc2 	bl	8001424 <HAL_GetTick>
 8002ca0:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ca4:	f7fe fbbe 	bl	8001424 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b11      	cmp	r3, #17
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e262      	b.n	800317c <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cb6:	4b41      	ldr	r3, [pc, #260]	; (8002dbc <HAL_RCC_OscConfig+0x540>)
 8002cb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d1ef      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8002cc4:	4b3d      	ldr	r3, [pc, #244]	; (8002dbc <HAL_RCC_OscConfig+0x540>)
 8002cc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cca:	f023 0210 	bic.w	r2, r3, #16
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	493a      	ldr	r1, [pc, #232]	; (8002dbc <HAL_RCC_OscConfig+0x540>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cda:	4b38      	ldr	r3, [pc, #224]	; (8002dbc <HAL_RCC_OscConfig+0x540>)
 8002cdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ce0:	4a36      	ldr	r2, [pc, #216]	; (8002dbc <HAL_RCC_OscConfig+0x540>)
 8002ce2:	f043 0301 	orr.w	r3, r3, #1
 8002ce6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cea:	f7fe fb9b 	bl	8001424 <HAL_GetTick>
 8002cee:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cf0:	e008      	b.n	8002d04 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cf2:	f7fe fb97 	bl	8001424 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	2b11      	cmp	r3, #17
 8002cfe:	d901      	bls.n	8002d04 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e23b      	b.n	800317c <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d04:	4b2d      	ldr	r3, [pc, #180]	; (8002dbc <HAL_RCC_OscConfig+0x540>)
 8002d06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d0ef      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x476>
 8002d12:	e01b      	b.n	8002d4c <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d14:	4b29      	ldr	r3, [pc, #164]	; (8002dbc <HAL_RCC_OscConfig+0x540>)
 8002d16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d1a:	4a28      	ldr	r2, [pc, #160]	; (8002dbc <HAL_RCC_OscConfig+0x540>)
 8002d1c:	f023 0301 	bic.w	r3, r3, #1
 8002d20:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d24:	f7fe fb7e 	bl	8001424 <HAL_GetTick>
 8002d28:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d2c:	f7fe fb7a 	bl	8001424 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b11      	cmp	r3, #17
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e21e      	b.n	800317c <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d3e:	4b1f      	ldr	r3, [pc, #124]	; (8002dbc <HAL_RCC_OscConfig+0x540>)
 8002d40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1ef      	bne.n	8002d2c <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0304 	and.w	r3, r3, #4
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f000 80c1 	beq.w	8002edc <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002d60:	4b16      	ldr	r3, [pc, #88]	; (8002dbc <HAL_RCC_OscConfig+0x540>)
 8002d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d10e      	bne.n	8002d8a <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d6c:	4b13      	ldr	r3, [pc, #76]	; (8002dbc <HAL_RCC_OscConfig+0x540>)
 8002d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d70:	4a12      	ldr	r2, [pc, #72]	; (8002dbc <HAL_RCC_OscConfig+0x540>)
 8002d72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d76:	6593      	str	r3, [r2, #88]	; 0x58
 8002d78:	4b10      	ldr	r3, [pc, #64]	; (8002dbc <HAL_RCC_OscConfig+0x540>)
 8002d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d80:	60fb      	str	r3, [r7, #12]
 8002d82:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002d84:	2301      	movs	r3, #1
 8002d86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d8a:	4b0d      	ldr	r3, [pc, #52]	; (8002dc0 <HAL_RCC_OscConfig+0x544>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d11c      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d96:	4b0a      	ldr	r3, [pc, #40]	; (8002dc0 <HAL_RCC_OscConfig+0x544>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a09      	ldr	r2, [pc, #36]	; (8002dc0 <HAL_RCC_OscConfig+0x544>)
 8002d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002da0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002da2:	f7fe fb3f 	bl	8001424 <HAL_GetTick>
 8002da6:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002da8:	e00c      	b.n	8002dc4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002daa:	f7fe fb3b 	bl	8001424 <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d905      	bls.n	8002dc4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e1df      	b.n	800317c <HAL_RCC_OscConfig+0x900>
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dc4:	4b99      	ldr	r3, [pc, #612]	; (800302c <HAL_RCC_OscConfig+0x7b0>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d0ec      	beq.n	8002daa <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d02c      	beq.n	8002e36 <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8002ddc:	4b94      	ldr	r3, [pc, #592]	; (8003030 <HAL_RCC_OscConfig+0x7b4>)
 8002dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dee:	4990      	ldr	r1, [pc, #576]	; (8003030 <HAL_RCC_OscConfig+0x7b4>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f003 0304 	and.w	r3, r3, #4
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d010      	beq.n	8002e24 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002e02:	4b8b      	ldr	r3, [pc, #556]	; (8003030 <HAL_RCC_OscConfig+0x7b4>)
 8002e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e08:	4a89      	ldr	r2, [pc, #548]	; (8003030 <HAL_RCC_OscConfig+0x7b4>)
 8002e0a:	f043 0304 	orr.w	r3, r3, #4
 8002e0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002e12:	4b87      	ldr	r3, [pc, #540]	; (8003030 <HAL_RCC_OscConfig+0x7b4>)
 8002e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e18:	4a85      	ldr	r2, [pc, #532]	; (8003030 <HAL_RCC_OscConfig+0x7b4>)
 8002e1a:	f043 0301 	orr.w	r3, r3, #1
 8002e1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e22:	e018      	b.n	8002e56 <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002e24:	4b82      	ldr	r3, [pc, #520]	; (8003030 <HAL_RCC_OscConfig+0x7b4>)
 8002e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e2a:	4a81      	ldr	r2, [pc, #516]	; (8003030 <HAL_RCC_OscConfig+0x7b4>)
 8002e2c:	f043 0301 	orr.w	r3, r3, #1
 8002e30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e34:	e00f      	b.n	8002e56 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002e36:	4b7e      	ldr	r3, [pc, #504]	; (8003030 <HAL_RCC_OscConfig+0x7b4>)
 8002e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e3c:	4a7c      	ldr	r2, [pc, #496]	; (8003030 <HAL_RCC_OscConfig+0x7b4>)
 8002e3e:	f023 0301 	bic.w	r3, r3, #1
 8002e42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002e46:	4b7a      	ldr	r3, [pc, #488]	; (8003030 <HAL_RCC_OscConfig+0x7b4>)
 8002e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e4c:	4a78      	ldr	r2, [pc, #480]	; (8003030 <HAL_RCC_OscConfig+0x7b4>)
 8002e4e:	f023 0304 	bic.w	r3, r3, #4
 8002e52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d016      	beq.n	8002e8c <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e5e:	f7fe fae1 	bl	8001424 <HAL_GetTick>
 8002e62:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e64:	e00a      	b.n	8002e7c <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e66:	f7fe fadd 	bl	8001424 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d901      	bls.n	8002e7c <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e17f      	b.n	800317c <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e7c:	4b6c      	ldr	r3, [pc, #432]	; (8003030 <HAL_RCC_OscConfig+0x7b4>)
 8002e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d0ed      	beq.n	8002e66 <HAL_RCC_OscConfig+0x5ea>
 8002e8a:	e01d      	b.n	8002ec8 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e8c:	f7fe faca 	bl	8001424 <HAL_GetTick>
 8002e90:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e92:	e00a      	b.n	8002eaa <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e94:	f7fe fac6 	bl	8001424 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e168      	b.n	800317c <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002eaa:	4b61      	ldr	r3, [pc, #388]	; (8003030 <HAL_RCC_OscConfig+0x7b4>)
 8002eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb0:	f003 0302 	and.w	r3, r3, #2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1ed      	bne.n	8002e94 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8002eb8:	4b5d      	ldr	r3, [pc, #372]	; (8003030 <HAL_RCC_OscConfig+0x7b4>)
 8002eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ebe:	4a5c      	ldr	r2, [pc, #368]	; (8003030 <HAL_RCC_OscConfig+0x7b4>)
 8002ec0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ec4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ec8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d105      	bne.n	8002edc <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ed0:	4b57      	ldr	r3, [pc, #348]	; (8003030 <HAL_RCC_OscConfig+0x7b4>)
 8002ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed4:	4a56      	ldr	r2, [pc, #344]	; (8003030 <HAL_RCC_OscConfig+0x7b4>)
 8002ed6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eda:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0320 	and.w	r3, r3, #32
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d03c      	beq.n	8002f62 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d01c      	beq.n	8002f2a <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002ef0:	4b4f      	ldr	r3, [pc, #316]	; (8003030 <HAL_RCC_OscConfig+0x7b4>)
 8002ef2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ef6:	4a4e      	ldr	r2, [pc, #312]	; (8003030 <HAL_RCC_OscConfig+0x7b4>)
 8002ef8:	f043 0301 	orr.w	r3, r3, #1
 8002efc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f00:	f7fe fa90 	bl	8001424 <HAL_GetTick>
 8002f04:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f08:	f7fe fa8c 	bl	8001424 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e130      	b.n	800317c <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f1a:	4b45      	ldr	r3, [pc, #276]	; (8003030 <HAL_RCC_OscConfig+0x7b4>)
 8002f1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d0ef      	beq.n	8002f08 <HAL_RCC_OscConfig+0x68c>
 8002f28:	e01b      	b.n	8002f62 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002f2a:	4b41      	ldr	r3, [pc, #260]	; (8003030 <HAL_RCC_OscConfig+0x7b4>)
 8002f2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f30:	4a3f      	ldr	r2, [pc, #252]	; (8003030 <HAL_RCC_OscConfig+0x7b4>)
 8002f32:	f023 0301 	bic.w	r3, r3, #1
 8002f36:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f3a:	f7fe fa73 	bl	8001424 <HAL_GetTick>
 8002f3e:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f40:	e008      	b.n	8002f54 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f42:	f7fe fa6f 	bl	8001424 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e113      	b.n	800317c <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f54:	4b36      	ldr	r3, [pc, #216]	; (8003030 <HAL_RCC_OscConfig+0x7b4>)
 8002f56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1ef      	bne.n	8002f42 <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f000 8107 	beq.w	800317a <HAL_RCC_OscConfig+0x8fe>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	f040 80cf 	bne.w	8003114 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002f76:	4b2e      	ldr	r3, [pc, #184]	; (8003030 <HAL_RCC_OscConfig+0x7b4>)
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	f003 0203 	and.w	r2, r3, #3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d12c      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f94:	3b01      	subs	r3, #1
 8002f96:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d123      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d11b      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x768>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d113      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x768>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc6:	085b      	lsrs	r3, r3, #1
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d109      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fda:	085b      	lsrs	r3, r3, #1
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d071      	beq.n	80030c8 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fe4:	6a3b      	ldr	r3, [r7, #32]
 8002fe6:	2b0c      	cmp	r3, #12
 8002fe8:	d06c      	beq.n	80030c4 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002fea:	4b11      	ldr	r3, [pc, #68]	; (8003030 <HAL_RCC_OscConfig+0x7b4>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d105      	bne.n	8003002 <HAL_RCC_OscConfig+0x786>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002ff6:	4b0e      	ldr	r3, [pc, #56]	; (8003030 <HAL_RCC_OscConfig+0x7b4>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <HAL_RCC_OscConfig+0x78a>
#endif
            )
          {
            return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e0ba      	b.n	800317c <HAL_RCC_OscConfig+0x900>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003006:	4b0a      	ldr	r3, [pc, #40]	; (8003030 <HAL_RCC_OscConfig+0x7b4>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a09      	ldr	r2, [pc, #36]	; (8003030 <HAL_RCC_OscConfig+0x7b4>)
 800300c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003010:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003012:	f7fe fa07 	bl	8001424 <HAL_GetTick>
 8003016:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003018:	e00c      	b.n	8003034 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800301a:	f7fe fa03 	bl	8001424 <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	2b02      	cmp	r3, #2
 8003026:	d905      	bls.n	8003034 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e0a7      	b.n	800317c <HAL_RCC_OscConfig+0x900>
 800302c:	40007000 	.word	0x40007000
 8003030:	40021000 	.word	0x40021000
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003034:	4b53      	ldr	r3, [pc, #332]	; (8003184 <HAL_RCC_OscConfig+0x908>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d1ec      	bne.n	800301a <HAL_RCC_OscConfig+0x79e>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003040:	4b50      	ldr	r3, [pc, #320]	; (8003184 <HAL_RCC_OscConfig+0x908>)
 8003042:	68da      	ldr	r2, [r3, #12]
 8003044:	4b50      	ldr	r3, [pc, #320]	; (8003188 <HAL_RCC_OscConfig+0x90c>)
 8003046:	4013      	ands	r3, r2
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003050:	3a01      	subs	r2, #1
 8003052:	0112      	lsls	r2, r2, #4
 8003054:	4311      	orrs	r1, r2
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800305a:	0212      	lsls	r2, r2, #8
 800305c:	4311      	orrs	r1, r2
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003062:	0852      	lsrs	r2, r2, #1
 8003064:	3a01      	subs	r2, #1
 8003066:	0552      	lsls	r2, r2, #21
 8003068:	4311      	orrs	r1, r2
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800306e:	0852      	lsrs	r2, r2, #1
 8003070:	3a01      	subs	r2, #1
 8003072:	0652      	lsls	r2, r2, #25
 8003074:	4311      	orrs	r1, r2
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800307a:	06d2      	lsls	r2, r2, #27
 800307c:	430a      	orrs	r2, r1
 800307e:	4941      	ldr	r1, [pc, #260]	; (8003184 <HAL_RCC_OscConfig+0x908>)
 8003080:	4313      	orrs	r3, r2
 8003082:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003084:	4b3f      	ldr	r3, [pc, #252]	; (8003184 <HAL_RCC_OscConfig+0x908>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a3e      	ldr	r2, [pc, #248]	; (8003184 <HAL_RCC_OscConfig+0x908>)
 800308a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800308e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003090:	4b3c      	ldr	r3, [pc, #240]	; (8003184 <HAL_RCC_OscConfig+0x908>)
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	4a3b      	ldr	r2, [pc, #236]	; (8003184 <HAL_RCC_OscConfig+0x908>)
 8003096:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800309a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800309c:	f7fe f9c2 	bl	8001424 <HAL_GetTick>
 80030a0:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030a4:	f7fe f9be 	bl	8001424 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e062      	b.n	800317c <HAL_RCC_OscConfig+0x900>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030b6:	4b33      	ldr	r3, [pc, #204]	; (8003184 <HAL_RCC_OscConfig+0x908>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d0f0      	beq.n	80030a4 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030c2:	e05a      	b.n	800317a <HAL_RCC_OscConfig+0x8fe>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e059      	b.n	800317c <HAL_RCC_OscConfig+0x900>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030c8:	4b2e      	ldr	r3, [pc, #184]	; (8003184 <HAL_RCC_OscConfig+0x908>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d152      	bne.n	800317a <HAL_RCC_OscConfig+0x8fe>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80030d4:	4b2b      	ldr	r3, [pc, #172]	; (8003184 <HAL_RCC_OscConfig+0x908>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a2a      	ldr	r2, [pc, #168]	; (8003184 <HAL_RCC_OscConfig+0x908>)
 80030da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030de:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030e0:	4b28      	ldr	r3, [pc, #160]	; (8003184 <HAL_RCC_OscConfig+0x908>)
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	4a27      	ldr	r2, [pc, #156]	; (8003184 <HAL_RCC_OscConfig+0x908>)
 80030e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030ea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80030ec:	f7fe f99a 	bl	8001424 <HAL_GetTick>
 80030f0:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030f4:	f7fe f996 	bl	8001424 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e03a      	b.n	800317c <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003106:	4b1f      	ldr	r3, [pc, #124]	; (8003184 <HAL_RCC_OscConfig+0x908>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d0f0      	beq.n	80030f4 <HAL_RCC_OscConfig+0x878>
 8003112:	e032      	b.n	800317a <HAL_RCC_OscConfig+0x8fe>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003114:	6a3b      	ldr	r3, [r7, #32]
 8003116:	2b0c      	cmp	r3, #12
 8003118:	d02d      	beq.n	8003176 <HAL_RCC_OscConfig+0x8fa>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800311a:	4b1a      	ldr	r3, [pc, #104]	; (8003184 <HAL_RCC_OscConfig+0x908>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a19      	ldr	r2, [pc, #100]	; (8003184 <HAL_RCC_OscConfig+0x908>)
 8003120:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003124:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003126:	4b17      	ldr	r3, [pc, #92]	; (8003184 <HAL_RCC_OscConfig+0x908>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d105      	bne.n	800313e <HAL_RCC_OscConfig+0x8c2>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003132:	4b14      	ldr	r3, [pc, #80]	; (8003184 <HAL_RCC_OscConfig+0x908>)
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	4a13      	ldr	r2, [pc, #76]	; (8003184 <HAL_RCC_OscConfig+0x908>)
 8003138:	f023 0303 	bic.w	r3, r3, #3
 800313c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800313e:	4b11      	ldr	r3, [pc, #68]	; (8003184 <HAL_RCC_OscConfig+0x908>)
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	4a10      	ldr	r2, [pc, #64]	; (8003184 <HAL_RCC_OscConfig+0x908>)
 8003144:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003148:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800314c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800314e:	f7fe f969 	bl	8001424 <HAL_GetTick>
 8003152:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003154:	e008      	b.n	8003168 <HAL_RCC_OscConfig+0x8ec>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003156:	f7fe f965 	bl	8001424 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	2b02      	cmp	r3, #2
 8003162:	d901      	bls.n	8003168 <HAL_RCC_OscConfig+0x8ec>
          {
            return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e009      	b.n	800317c <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003168:	4b06      	ldr	r3, [pc, #24]	; (8003184 <HAL_RCC_OscConfig+0x908>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d1f0      	bne.n	8003156 <HAL_RCC_OscConfig+0x8da>
 8003174:	e001      	b.n	800317a <HAL_RCC_OscConfig+0x8fe>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e000      	b.n	800317c <HAL_RCC_OscConfig+0x900>
      }
    }
  }
  return HAL_OK;
 800317a:	2300      	movs	r3, #0
}
 800317c:	4618      	mov	r0, r3
 800317e:	3728      	adds	r7, #40	; 0x28
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	40021000 	.word	0x40021000
 8003188:	019d800c 	.word	0x019d800c

0800318c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b086      	sub	sp, #24
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003196:	2300      	movs	r3, #0
 8003198:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d101      	bne.n	80031a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e10f      	b.n	80033c4 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031a4:	4b89      	ldr	r3, [pc, #548]	; (80033cc <HAL_RCC_ClockConfig+0x240>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 030f 	and.w	r3, r3, #15
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d910      	bls.n	80031d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031b2:	4b86      	ldr	r3, [pc, #536]	; (80033cc <HAL_RCC_ClockConfig+0x240>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f023 020f 	bic.w	r2, r3, #15
 80031ba:	4984      	ldr	r1, [pc, #528]	; (80033cc <HAL_RCC_ClockConfig+0x240>)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	4313      	orrs	r3, r2
 80031c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031c2:	4b82      	ldr	r3, [pc, #520]	; (80033cc <HAL_RCC_ClockConfig+0x240>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 030f 	and.w	r3, r3, #15
 80031ca:	683a      	ldr	r2, [r7, #0]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d001      	beq.n	80031d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e0f7      	b.n	80033c4 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0301 	and.w	r3, r3, #1
 80031dc:	2b00      	cmp	r3, #0
 80031de:	f000 8089 	beq.w	80032f4 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	2b03      	cmp	r3, #3
 80031e8:	d133      	bne.n	8003252 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031ea:	4b79      	ldr	r3, [pc, #484]	; (80033d0 <HAL_RCC_ClockConfig+0x244>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e0e4      	b.n	80033c4 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80031fa:	f000 f9d9 	bl	80035b0 <RCC_GetSysClockFreqFromPLLSource>
 80031fe:	4603      	mov	r3, r0
 8003200:	4a74      	ldr	r2, [pc, #464]	; (80033d4 <HAL_RCC_ClockConfig+0x248>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d955      	bls.n	80032b2 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003206:	4b72      	ldr	r3, [pc, #456]	; (80033d0 <HAL_RCC_ClockConfig+0x244>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d10a      	bne.n	8003228 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003212:	4b6f      	ldr	r3, [pc, #444]	; (80033d0 <HAL_RCC_ClockConfig+0x244>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800321a:	4a6d      	ldr	r2, [pc, #436]	; (80033d0 <HAL_RCC_ClockConfig+0x244>)
 800321c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003220:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003222:	2380      	movs	r3, #128	; 0x80
 8003224:	617b      	str	r3, [r7, #20]
 8003226:	e044      	b.n	80032b2 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0302 	and.w	r3, r3, #2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d03e      	beq.n	80032b2 <HAL_RCC_ClockConfig+0x126>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d13a      	bne.n	80032b2 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800323c:	4b64      	ldr	r3, [pc, #400]	; (80033d0 <HAL_RCC_ClockConfig+0x244>)
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003244:	4a62      	ldr	r2, [pc, #392]	; (80033d0 <HAL_RCC_ClockConfig+0x244>)
 8003246:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800324a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800324c:	2380      	movs	r3, #128	; 0x80
 800324e:	617b      	str	r3, [r7, #20]
 8003250:	e02f      	b.n	80032b2 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	2b02      	cmp	r3, #2
 8003258:	d107      	bne.n	800326a <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800325a:	4b5d      	ldr	r3, [pc, #372]	; (80033d0 <HAL_RCC_ClockConfig+0x244>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d115      	bne.n	8003292 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e0ac      	b.n	80033c4 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d107      	bne.n	8003282 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003272:	4b57      	ldr	r3, [pc, #348]	; (80033d0 <HAL_RCC_ClockConfig+0x244>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d109      	bne.n	8003292 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e0a0      	b.n	80033c4 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003282:	4b53      	ldr	r3, [pc, #332]	; (80033d0 <HAL_RCC_ClockConfig+0x244>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800328a:	2b00      	cmp	r3, #0
 800328c:	d101      	bne.n	8003292 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e098      	b.n	80033c4 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003292:	f000 f8a7 	bl	80033e4 <HAL_RCC_GetSysClockFreq>
 8003296:	4603      	mov	r3, r0
 8003298:	4a4e      	ldr	r2, [pc, #312]	; (80033d4 <HAL_RCC_ClockConfig+0x248>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d909      	bls.n	80032b2 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800329e:	4b4c      	ldr	r3, [pc, #304]	; (80033d0 <HAL_RCC_ClockConfig+0x244>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032a6:	4a4a      	ldr	r2, [pc, #296]	; (80033d0 <HAL_RCC_ClockConfig+0x244>)
 80032a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032ac:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80032ae:	2380      	movs	r3, #128	; 0x80
 80032b0:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032b2:	4b47      	ldr	r3, [pc, #284]	; (80033d0 <HAL_RCC_ClockConfig+0x244>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f023 0203 	bic.w	r2, r3, #3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	4944      	ldr	r1, [pc, #272]	; (80033d0 <HAL_RCC_ClockConfig+0x244>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032c4:	f7fe f8ae 	bl	8001424 <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ca:	e00a      	b.n	80032e2 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032cc:	f7fe f8aa 	bl	8001424 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032da:	4293      	cmp	r3, r2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e070      	b.n	80033c4 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032e2:	4b3b      	ldr	r3, [pc, #236]	; (80033d0 <HAL_RCC_ClockConfig+0x244>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f003 020c 	and.w	r2, r3, #12
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d1eb      	bne.n	80032cc <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d009      	beq.n	8003314 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003300:	4b33      	ldr	r3, [pc, #204]	; (80033d0 <HAL_RCC_ClockConfig+0x244>)
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	4930      	ldr	r1, [pc, #192]	; (80033d0 <HAL_RCC_ClockConfig+0x244>)
 800330e:	4313      	orrs	r3, r2
 8003310:	608b      	str	r3, [r1, #8]
 8003312:	e008      	b.n	8003326 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	2b80      	cmp	r3, #128	; 0x80
 8003318:	d105      	bne.n	8003326 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800331a:	4b2d      	ldr	r3, [pc, #180]	; (80033d0 <HAL_RCC_ClockConfig+0x244>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	4a2c      	ldr	r2, [pc, #176]	; (80033d0 <HAL_RCC_ClockConfig+0x244>)
 8003320:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003324:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003326:	4b29      	ldr	r3, [pc, #164]	; (80033cc <HAL_RCC_ClockConfig+0x240>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 030f 	and.w	r3, r3, #15
 800332e:	683a      	ldr	r2, [r7, #0]
 8003330:	429a      	cmp	r2, r3
 8003332:	d210      	bcs.n	8003356 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003334:	4b25      	ldr	r3, [pc, #148]	; (80033cc <HAL_RCC_ClockConfig+0x240>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f023 020f 	bic.w	r2, r3, #15
 800333c:	4923      	ldr	r1, [pc, #140]	; (80033cc <HAL_RCC_ClockConfig+0x240>)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	4313      	orrs	r3, r2
 8003342:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003344:	4b21      	ldr	r3, [pc, #132]	; (80033cc <HAL_RCC_ClockConfig+0x240>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 030f 	and.w	r3, r3, #15
 800334c:	683a      	ldr	r2, [r7, #0]
 800334e:	429a      	cmp	r2, r3
 8003350:	d001      	beq.n	8003356 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e036      	b.n	80033c4 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0304 	and.w	r3, r3, #4
 800335e:	2b00      	cmp	r3, #0
 8003360:	d008      	beq.n	8003374 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003362:	4b1b      	ldr	r3, [pc, #108]	; (80033d0 <HAL_RCC_ClockConfig+0x244>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	4918      	ldr	r1, [pc, #96]	; (80033d0 <HAL_RCC_ClockConfig+0x244>)
 8003370:	4313      	orrs	r3, r2
 8003372:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0308 	and.w	r3, r3, #8
 800337c:	2b00      	cmp	r3, #0
 800337e:	d009      	beq.n	8003394 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003380:	4b13      	ldr	r3, [pc, #76]	; (80033d0 <HAL_RCC_ClockConfig+0x244>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	00db      	lsls	r3, r3, #3
 800338e:	4910      	ldr	r1, [pc, #64]	; (80033d0 <HAL_RCC_ClockConfig+0x244>)
 8003390:	4313      	orrs	r3, r2
 8003392:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003394:	f000 f826 	bl	80033e4 <HAL_RCC_GetSysClockFreq>
 8003398:	4602      	mov	r2, r0
 800339a:	4b0d      	ldr	r3, [pc, #52]	; (80033d0 <HAL_RCC_ClockConfig+0x244>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	091b      	lsrs	r3, r3, #4
 80033a0:	f003 030f 	and.w	r3, r3, #15
 80033a4:	490c      	ldr	r1, [pc, #48]	; (80033d8 <HAL_RCC_ClockConfig+0x24c>)
 80033a6:	5ccb      	ldrb	r3, [r1, r3]
 80033a8:	f003 031f 	and.w	r3, r3, #31
 80033ac:	fa22 f303 	lsr.w	r3, r2, r3
 80033b0:	4a0a      	ldr	r2, [pc, #40]	; (80033dc <HAL_RCC_ClockConfig+0x250>)
 80033b2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80033b4:	4b0a      	ldr	r3, [pc, #40]	; (80033e0 <HAL_RCC_ClockConfig+0x254>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7fd ffe3 	bl	8001384 <HAL_InitTick>
 80033be:	4603      	mov	r3, r0
 80033c0:	73fb      	strb	r3, [r7, #15]

  return status;
 80033c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3718      	adds	r7, #24
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	40022000 	.word	0x40022000
 80033d0:	40021000 	.word	0x40021000
 80033d4:	04c4b400 	.word	0x04c4b400
 80033d8:	080050b0 	.word	0x080050b0
 80033dc:	20000010 	.word	0x20000010
 80033e0:	20000014 	.word	0x20000014

080033e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b089      	sub	sp, #36	; 0x24
 80033e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80033ea:	2300      	movs	r3, #0
 80033ec:	61fb      	str	r3, [r7, #28]
 80033ee:	2300      	movs	r3, #0
 80033f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033f2:	4b3e      	ldr	r3, [pc, #248]	; (80034ec <HAL_RCC_GetSysClockFreq+0x108>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f003 030c 	and.w	r3, r3, #12
 80033fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033fc:	4b3b      	ldr	r3, [pc, #236]	; (80034ec <HAL_RCC_GetSysClockFreq+0x108>)
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	f003 0303 	and.w	r3, r3, #3
 8003404:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d005      	beq.n	8003418 <HAL_RCC_GetSysClockFreq+0x34>
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	2b0c      	cmp	r3, #12
 8003410:	d121      	bne.n	8003456 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d11e      	bne.n	8003456 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003418:	4b34      	ldr	r3, [pc, #208]	; (80034ec <HAL_RCC_GetSysClockFreq+0x108>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0308 	and.w	r3, r3, #8
 8003420:	2b00      	cmp	r3, #0
 8003422:	d107      	bne.n	8003434 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003424:	4b31      	ldr	r3, [pc, #196]	; (80034ec <HAL_RCC_GetSysClockFreq+0x108>)
 8003426:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800342a:	0a1b      	lsrs	r3, r3, #8
 800342c:	f003 030f 	and.w	r3, r3, #15
 8003430:	61fb      	str	r3, [r7, #28]
 8003432:	e005      	b.n	8003440 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003434:	4b2d      	ldr	r3, [pc, #180]	; (80034ec <HAL_RCC_GetSysClockFreq+0x108>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	091b      	lsrs	r3, r3, #4
 800343a:	f003 030f 	and.w	r3, r3, #15
 800343e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003440:	4a2b      	ldr	r2, [pc, #172]	; (80034f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003448:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d10d      	bne.n	800346c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003454:	e00a      	b.n	800346c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	2b04      	cmp	r3, #4
 800345a:	d102      	bne.n	8003462 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800345c:	4b25      	ldr	r3, [pc, #148]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800345e:	61bb      	str	r3, [r7, #24]
 8003460:	e004      	b.n	800346c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	2b08      	cmp	r3, #8
 8003466:	d101      	bne.n	800346c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003468:	4b23      	ldr	r3, [pc, #140]	; (80034f8 <HAL_RCC_GetSysClockFreq+0x114>)
 800346a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	2b0c      	cmp	r3, #12
 8003470:	d134      	bne.n	80034dc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003472:	4b1e      	ldr	r3, [pc, #120]	; (80034ec <HAL_RCC_GetSysClockFreq+0x108>)
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	f003 0303 	and.w	r3, r3, #3
 800347a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	2b02      	cmp	r3, #2
 8003480:	d003      	beq.n	800348a <HAL_RCC_GetSysClockFreq+0xa6>
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	2b03      	cmp	r3, #3
 8003486:	d003      	beq.n	8003490 <HAL_RCC_GetSysClockFreq+0xac>
 8003488:	e005      	b.n	8003496 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800348a:	4b1a      	ldr	r3, [pc, #104]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800348c:	617b      	str	r3, [r7, #20]
      break;
 800348e:	e005      	b.n	800349c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003490:	4b19      	ldr	r3, [pc, #100]	; (80034f8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003492:	617b      	str	r3, [r7, #20]
      break;
 8003494:	e002      	b.n	800349c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	617b      	str	r3, [r7, #20]
      break;
 800349a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800349c:	4b13      	ldr	r3, [pc, #76]	; (80034ec <HAL_RCC_GetSysClockFreq+0x108>)
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	091b      	lsrs	r3, r3, #4
 80034a2:	f003 030f 	and.w	r3, r3, #15
 80034a6:	3301      	adds	r3, #1
 80034a8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80034aa:	4b10      	ldr	r3, [pc, #64]	; (80034ec <HAL_RCC_GetSysClockFreq+0x108>)
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	0a1b      	lsrs	r3, r3, #8
 80034b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034b4:	697a      	ldr	r2, [r7, #20]
 80034b6:	fb02 f203 	mul.w	r2, r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80034c0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034c2:	4b0a      	ldr	r3, [pc, #40]	; (80034ec <HAL_RCC_GetSysClockFreq+0x108>)
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	0e5b      	lsrs	r3, r3, #25
 80034c8:	f003 0303 	and.w	r3, r3, #3
 80034cc:	3301      	adds	r3, #1
 80034ce:	005b      	lsls	r3, r3, #1
 80034d0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034da:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80034dc:	69bb      	ldr	r3, [r7, #24]
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3724      	adds	r7, #36	; 0x24
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	40021000 	.word	0x40021000
 80034f0:	080050c0 	.word	0x080050c0
 80034f4:	00f42400 	.word	0x00f42400
 80034f8:	01770000 	.word	0x01770000

080034fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b086      	sub	sp, #24
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003504:	2300      	movs	r3, #0
 8003506:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003508:	4b27      	ldr	r3, [pc, #156]	; (80035a8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800350a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800350c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d003      	beq.n	800351c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003514:	f7ff f8ee 	bl	80026f4 <HAL_PWREx_GetVoltageRange>
 8003518:	6178      	str	r0, [r7, #20]
 800351a:	e014      	b.n	8003546 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800351c:	4b22      	ldr	r3, [pc, #136]	; (80035a8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800351e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003520:	4a21      	ldr	r2, [pc, #132]	; (80035a8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003522:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003526:	6593      	str	r3, [r2, #88]	; 0x58
 8003528:	4b1f      	ldr	r3, [pc, #124]	; (80035a8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800352a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800352c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003530:	60fb      	str	r3, [r7, #12]
 8003532:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003534:	f7ff f8de 	bl	80026f4 <HAL_PWREx_GetVoltageRange>
 8003538:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800353a:	4b1b      	ldr	r3, [pc, #108]	; (80035a8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800353c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800353e:	4a1a      	ldr	r2, [pc, #104]	; (80035a8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003540:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003544:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800354c:	d10b      	bne.n	8003566 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2b80      	cmp	r3, #128	; 0x80
 8003552:	d913      	bls.n	800357c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2ba0      	cmp	r3, #160	; 0xa0
 8003558:	d902      	bls.n	8003560 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800355a:	2302      	movs	r3, #2
 800355c:	613b      	str	r3, [r7, #16]
 800355e:	e00d      	b.n	800357c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003560:	2301      	movs	r3, #1
 8003562:	613b      	str	r3, [r7, #16]
 8003564:	e00a      	b.n	800357c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b7f      	cmp	r3, #127	; 0x7f
 800356a:	d902      	bls.n	8003572 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800356c:	2302      	movs	r3, #2
 800356e:	613b      	str	r3, [r7, #16]
 8003570:	e004      	b.n	800357c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2b70      	cmp	r3, #112	; 0x70
 8003576:	d101      	bne.n	800357c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003578:	2301      	movs	r3, #1
 800357a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800357c:	4b0b      	ldr	r3, [pc, #44]	; (80035ac <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f023 020f 	bic.w	r2, r3, #15
 8003584:	4909      	ldr	r1, [pc, #36]	; (80035ac <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	4313      	orrs	r3, r2
 800358a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800358c:	4b07      	ldr	r3, [pc, #28]	; (80035ac <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 030f 	and.w	r3, r3, #15
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	429a      	cmp	r2, r3
 8003598:	d001      	beq.n	800359e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e000      	b.n	80035a0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3718      	adds	r7, #24
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	40021000 	.word	0x40021000
 80035ac:	40022000 	.word	0x40022000

080035b0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b087      	sub	sp, #28
 80035b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80035b6:	2300      	movs	r3, #0
 80035b8:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80035ba:	4b2d      	ldr	r3, [pc, #180]	; (8003670 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	f003 0303 	and.w	r3, r3, #3
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d118      	bne.n	80035f8 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80035c6:	4b2a      	ldr	r3, [pc, #168]	; (8003670 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0308 	and.w	r3, r3, #8
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d107      	bne.n	80035e2 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80035d2:	4b27      	ldr	r3, [pc, #156]	; (8003670 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80035d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035d8:	0a1b      	lsrs	r3, r3, #8
 80035da:	f003 030f 	and.w	r3, r3, #15
 80035de:	617b      	str	r3, [r7, #20]
 80035e0:	e005      	b.n	80035ee <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80035e2:	4b23      	ldr	r3, [pc, #140]	; (8003670 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	091b      	lsrs	r3, r3, #4
 80035e8:	f003 030f 	and.w	r3, r3, #15
 80035ec:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80035ee:	4a21      	ldr	r2, [pc, #132]	; (8003674 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035f6:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80035f8:	4b1d      	ldr	r3, [pc, #116]	; (8003670 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	f003 0303 	and.w	r3, r3, #3
 8003600:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2b02      	cmp	r3, #2
 8003606:	d003      	beq.n	8003610 <RCC_GetSysClockFreqFromPLLSource+0x60>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2b03      	cmp	r3, #3
 800360c:	d003      	beq.n	8003616 <RCC_GetSysClockFreqFromPLLSource+0x66>
 800360e:	e005      	b.n	800361c <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003610:	4b19      	ldr	r3, [pc, #100]	; (8003678 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003612:	613b      	str	r3, [r7, #16]
    break;
 8003614:	e005      	b.n	8003622 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003616:	4b19      	ldr	r3, [pc, #100]	; (800367c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003618:	613b      	str	r3, [r7, #16]
    break;
 800361a:	e002      	b.n	8003622 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	613b      	str	r3, [r7, #16]
    break;
 8003620:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003622:	4b13      	ldr	r3, [pc, #76]	; (8003670 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	091b      	lsrs	r3, r3, #4
 8003628:	f003 030f 	and.w	r3, r3, #15
 800362c:	3301      	adds	r3, #1
 800362e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003630:	4b0f      	ldr	r3, [pc, #60]	; (8003670 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	0a1b      	lsrs	r3, r3, #8
 8003636:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	fb02 f203 	mul.w	r2, r2, r3
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	fbb2 f3f3 	udiv	r3, r2, r3
 8003646:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003648:	4b09      	ldr	r3, [pc, #36]	; (8003670 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	0e5b      	lsrs	r3, r3, #25
 800364e:	f003 0303 	and.w	r3, r3, #3
 8003652:	3301      	adds	r3, #1
 8003654:	005b      	lsls	r3, r3, #1
 8003656:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003660:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003662:	683b      	ldr	r3, [r7, #0]
}
 8003664:	4618      	mov	r0, r3
 8003666:	371c      	adds	r7, #28
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr
 8003670:	40021000 	.word	0x40021000
 8003674:	080050c0 	.word	0x080050c0
 8003678:	00f42400 	.word	0x00f42400
 800367c:	01770000 	.word	0x01770000

08003680 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d101      	bne.n	8003692 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e095      	b.n	80037be <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003696:	2b00      	cmp	r3, #0
 8003698:	d108      	bne.n	80036ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036a2:	d009      	beq.n	80036b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	61da      	str	r2, [r3, #28]
 80036aa:	e005      	b.n	80036b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d106      	bne.n	80036d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f7fd fcf0 	bl	80010b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2202      	movs	r2, #2
 80036dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036ee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80036f8:	d902      	bls.n	8003700 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80036fa:	2300      	movs	r3, #0
 80036fc:	60fb      	str	r3, [r7, #12]
 80036fe:	e002      	b.n	8003706 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003700:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003704:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800370e:	d007      	beq.n	8003720 <HAL_SPI_Init+0xa0>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003718:	d002      	beq.n	8003720 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003730:	431a      	orrs	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	431a      	orrs	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	695b      	ldr	r3, [r3, #20]
 8003740:	f003 0301 	and.w	r3, r3, #1
 8003744:	431a      	orrs	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800374e:	431a      	orrs	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	69db      	ldr	r3, [r3, #28]
 8003754:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003758:	431a      	orrs	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a1b      	ldr	r3, [r3, #32]
 800375e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003762:	ea42 0103 	orr.w	r1, r2, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	430a      	orrs	r2, r1
 8003774:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	0c1b      	lsrs	r3, r3, #16
 800377c:	f003 0204 	and.w	r2, r3, #4
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003784:	f003 0310 	and.w	r3, r3, #16
 8003788:	431a      	orrs	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800378e:	f003 0308 	and.w	r3, r3, #8
 8003792:	431a      	orrs	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800379c:	ea42 0103 	orr.w	r1, r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	430a      	orrs	r2, r1
 80037ac:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b088      	sub	sp, #32
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	60f8      	str	r0, [r7, #12]
 80037ce:	60b9      	str	r1, [r7, #8]
 80037d0:	603b      	str	r3, [r7, #0]
 80037d2:	4613      	mov	r3, r2
 80037d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80037d6:	2300      	movs	r3, #0
 80037d8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d101      	bne.n	80037e8 <HAL_SPI_Transmit+0x22>
 80037e4:	2302      	movs	r3, #2
 80037e6:	e158      	b.n	8003a9a <HAL_SPI_Transmit+0x2d4>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037f0:	f7fd fe18 	bl	8001424 <HAL_GetTick>
 80037f4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80037f6:	88fb      	ldrh	r3, [r7, #6]
 80037f8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b01      	cmp	r3, #1
 8003804:	d002      	beq.n	800380c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003806:	2302      	movs	r3, #2
 8003808:	77fb      	strb	r3, [r7, #31]
    goto error;
 800380a:	e13d      	b.n	8003a88 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d002      	beq.n	8003818 <HAL_SPI_Transmit+0x52>
 8003812:	88fb      	ldrh	r3, [r7, #6]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d102      	bne.n	800381e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800381c:	e134      	b.n	8003a88 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2203      	movs	r2, #3
 8003822:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	68ba      	ldr	r2, [r7, #8]
 8003830:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	88fa      	ldrh	r2, [r7, #6]
 8003836:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	88fa      	ldrh	r2, [r7, #6]
 800383c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003868:	d10f      	bne.n	800388a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003878:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003888:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003894:	2b40      	cmp	r3, #64	; 0x40
 8003896:	d007      	beq.n	80038a8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80038b0:	d94b      	bls.n	800394a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d002      	beq.n	80038c0 <HAL_SPI_Transmit+0xfa>
 80038ba:	8afb      	ldrh	r3, [r7, #22]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d13e      	bne.n	800393e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c4:	881a      	ldrh	r2, [r3, #0]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d0:	1c9a      	adds	r2, r3, #2
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038da:	b29b      	uxth	r3, r3
 80038dc:	3b01      	subs	r3, #1
 80038de:	b29a      	uxth	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80038e4:	e02b      	b.n	800393e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f003 0302 	and.w	r3, r3, #2
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d112      	bne.n	800391a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f8:	881a      	ldrh	r2, [r3, #0]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003904:	1c9a      	adds	r2, r3, #2
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800390e:	b29b      	uxth	r3, r3
 8003910:	3b01      	subs	r3, #1
 8003912:	b29a      	uxth	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003918:	e011      	b.n	800393e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800391a:	f7fd fd83 	bl	8001424 <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	683a      	ldr	r2, [r7, #0]
 8003926:	429a      	cmp	r2, r3
 8003928:	d803      	bhi.n	8003932 <HAL_SPI_Transmit+0x16c>
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003930:	d102      	bne.n	8003938 <HAL_SPI_Transmit+0x172>
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d102      	bne.n	800393e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800393c:	e0a4      	b.n	8003a88 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003942:	b29b      	uxth	r3, r3
 8003944:	2b00      	cmp	r3, #0
 8003946:	d1ce      	bne.n	80038e6 <HAL_SPI_Transmit+0x120>
 8003948:	e07c      	b.n	8003a44 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d002      	beq.n	8003958 <HAL_SPI_Transmit+0x192>
 8003952:	8afb      	ldrh	r3, [r7, #22]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d170      	bne.n	8003a3a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800395c:	b29b      	uxth	r3, r3
 800395e:	2b01      	cmp	r3, #1
 8003960:	d912      	bls.n	8003988 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003966:	881a      	ldrh	r2, [r3, #0]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003972:	1c9a      	adds	r2, r3, #2
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800397c:	b29b      	uxth	r3, r3
 800397e:	3b02      	subs	r3, #2
 8003980:	b29a      	uxth	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003986:	e058      	b.n	8003a3a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	330c      	adds	r3, #12
 8003992:	7812      	ldrb	r2, [r2, #0]
 8003994:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800399a:	1c5a      	adds	r2, r3, #1
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	3b01      	subs	r3, #1
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80039ae:	e044      	b.n	8003a3a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f003 0302 	and.w	r3, r3, #2
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d12b      	bne.n	8003a16 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d912      	bls.n	80039ee <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039cc:	881a      	ldrh	r2, [r3, #0]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d8:	1c9a      	adds	r2, r3, #2
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	3b02      	subs	r3, #2
 80039e6:	b29a      	uxth	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80039ec:	e025      	b.n	8003a3a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	330c      	adds	r3, #12
 80039f8:	7812      	ldrb	r2, [r2, #0]
 80039fa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a00:	1c5a      	adds	r2, r3, #1
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	b29a      	uxth	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a14:	e011      	b.n	8003a3a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a16:	f7fd fd05 	bl	8001424 <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	683a      	ldr	r2, [r7, #0]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d803      	bhi.n	8003a2e <HAL_SPI_Transmit+0x268>
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a2c:	d102      	bne.n	8003a34 <HAL_SPI_Transmit+0x26e>
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d102      	bne.n	8003a3a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a38:	e026      	b.n	8003a88 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d1b5      	bne.n	80039b0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a44:	69ba      	ldr	r2, [r7, #24]
 8003a46:	6839      	ldr	r1, [r7, #0]
 8003a48:	68f8      	ldr	r0, [r7, #12]
 8003a4a:	f000 fce3 	bl	8004414 <SPI_EndRxTxTransaction>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d002      	beq.n	8003a5a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2220      	movs	r2, #32
 8003a58:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10a      	bne.n	8003a78 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a62:	2300      	movs	r3, #0
 8003a64:	613b      	str	r3, [r7, #16]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	613b      	str	r3, [r7, #16]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	613b      	str	r3, [r7, #16]
 8003a76:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d002      	beq.n	8003a86 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	77fb      	strb	r3, [r7, #31]
 8003a84:	e000      	b.n	8003a88 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003a86:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003a98:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3720      	adds	r7, #32
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}

08003aa2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	b088      	sub	sp, #32
 8003aa6:	af02      	add	r7, sp, #8
 8003aa8:	60f8      	str	r0, [r7, #12]
 8003aaa:	60b9      	str	r1, [r7, #8]
 8003aac:	603b      	str	r3, [r7, #0]
 8003aae:	4613      	mov	r3, r2
 8003ab0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003abe:	d112      	bne.n	8003ae6 <HAL_SPI_Receive+0x44>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d10e      	bne.n	8003ae6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2204      	movs	r2, #4
 8003acc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003ad0:	88fa      	ldrh	r2, [r7, #6]
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	9300      	str	r3, [sp, #0]
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	68ba      	ldr	r2, [r7, #8]
 8003ada:	68b9      	ldr	r1, [r7, #8]
 8003adc:	68f8      	ldr	r0, [r7, #12]
 8003ade:	f000 f910 	bl	8003d02 <HAL_SPI_TransmitReceive>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	e109      	b.n	8003cfa <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d101      	bne.n	8003af4 <HAL_SPI_Receive+0x52>
 8003af0:	2302      	movs	r3, #2
 8003af2:	e102      	b.n	8003cfa <HAL_SPI_Receive+0x258>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003afc:	f7fd fc92 	bl	8001424 <HAL_GetTick>
 8003b00:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d002      	beq.n	8003b14 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003b0e:	2302      	movs	r3, #2
 8003b10:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b12:	e0e9      	b.n	8003ce8 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d002      	beq.n	8003b20 <HAL_SPI_Receive+0x7e>
 8003b1a:	88fb      	ldrh	r3, [r7, #6]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d102      	bne.n	8003b26 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b24:	e0e0      	b.n	8003ce8 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2204      	movs	r2, #4
 8003b2a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	68ba      	ldr	r2, [r7, #8]
 8003b38:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	88fa      	ldrh	r2, [r7, #6]
 8003b3e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	88fa      	ldrh	r2, [r7, #6]
 8003b46:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b70:	d908      	bls.n	8003b84 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	685a      	ldr	r2, [r3, #4]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003b80:	605a      	str	r2, [r3, #4]
 8003b82:	e007      	b.n	8003b94 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	685a      	ldr	r2, [r3, #4]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003b92:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b9c:	d10f      	bne.n	8003bbe <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003bbc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc8:	2b40      	cmp	r3, #64	; 0x40
 8003bca:	d007      	beq.n	8003bdc <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bda:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003be4:	d867      	bhi.n	8003cb6 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003be6:	e030      	b.n	8003c4a <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d117      	bne.n	8003c26 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f103 020c 	add.w	r2, r3, #12
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c02:	7812      	ldrb	r2, [r2, #0]
 8003c04:	b2d2      	uxtb	r2, r2
 8003c06:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0c:	1c5a      	adds	r2, r3, #1
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003c24:	e011      	b.n	8003c4a <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c26:	f7fd fbfd 	bl	8001424 <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	683a      	ldr	r2, [r7, #0]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d803      	bhi.n	8003c3e <HAL_SPI_Receive+0x19c>
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c3c:	d102      	bne.n	8003c44 <HAL_SPI_Receive+0x1a2>
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d102      	bne.n	8003c4a <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003c48:	e04e      	b.n	8003ce8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1c8      	bne.n	8003be8 <HAL_SPI_Receive+0x146>
 8003c56:	e034      	b.n	8003cc2 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f003 0301 	and.w	r3, r3, #1
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d115      	bne.n	8003c92 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68da      	ldr	r2, [r3, #12]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c70:	b292      	uxth	r2, r2
 8003c72:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c78:	1c9a      	adds	r2, r3, #2
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	3b01      	subs	r3, #1
 8003c88:	b29a      	uxth	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003c90:	e011      	b.n	8003cb6 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c92:	f7fd fbc7 	bl	8001424 <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	683a      	ldr	r2, [r7, #0]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d803      	bhi.n	8003caa <HAL_SPI_Receive+0x208>
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca8:	d102      	bne.n	8003cb0 <HAL_SPI_Receive+0x20e>
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d102      	bne.n	8003cb6 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003cb4:	e018      	b.n	8003ce8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1ca      	bne.n	8003c58 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	6839      	ldr	r1, [r7, #0]
 8003cc6:	68f8      	ldr	r0, [r7, #12]
 8003cc8:	f000 fb4c 	bl	8004364 <SPI_EndRxTransaction>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d002      	beq.n	8003cd8 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2220      	movs	r2, #32
 8003cd6:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d002      	beq.n	8003ce6 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	75fb      	strb	r3, [r7, #23]
 8003ce4:	e000      	b.n	8003ce8 <HAL_SPI_Receive+0x246>
  }

error :
 8003ce6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003cf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3718      	adds	r7, #24
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b08a      	sub	sp, #40	; 0x28
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	60f8      	str	r0, [r7, #12]
 8003d0a:	60b9      	str	r1, [r7, #8]
 8003d0c:	607a      	str	r2, [r7, #4]
 8003d0e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003d10:	2301      	movs	r3, #1
 8003d12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003d14:	2300      	movs	r3, #0
 8003d16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d101      	bne.n	8003d28 <HAL_SPI_TransmitReceive+0x26>
 8003d24:	2302      	movs	r3, #2
 8003d26:	e1fb      	b.n	8004120 <HAL_SPI_TransmitReceive+0x41e>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d30:	f7fd fb78 	bl	8001424 <HAL_GetTick>
 8003d34:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d3c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003d44:	887b      	ldrh	r3, [r7, #2]
 8003d46:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003d48:	887b      	ldrh	r3, [r7, #2]
 8003d4a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003d4c:	7efb      	ldrb	r3, [r7, #27]
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d00e      	beq.n	8003d70 <HAL_SPI_TransmitReceive+0x6e>
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d58:	d106      	bne.n	8003d68 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d102      	bne.n	8003d68 <HAL_SPI_TransmitReceive+0x66>
 8003d62:	7efb      	ldrb	r3, [r7, #27]
 8003d64:	2b04      	cmp	r3, #4
 8003d66:	d003      	beq.n	8003d70 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003d68:	2302      	movs	r3, #2
 8003d6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003d6e:	e1cd      	b.n	800410c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d005      	beq.n	8003d82 <HAL_SPI_TransmitReceive+0x80>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d002      	beq.n	8003d82 <HAL_SPI_TransmitReceive+0x80>
 8003d7c:	887b      	ldrh	r3, [r7, #2]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d103      	bne.n	8003d8a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003d88:	e1c0      	b.n	800410c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	2b04      	cmp	r3, #4
 8003d94:	d003      	beq.n	8003d9e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2205      	movs	r2, #5
 8003d9a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2200      	movs	r2, #0
 8003da2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	887a      	ldrh	r2, [r7, #2]
 8003dae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	887a      	ldrh	r2, [r7, #2]
 8003db6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	68ba      	ldr	r2, [r7, #8]
 8003dbe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	887a      	ldrh	r2, [r7, #2]
 8003dc4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	887a      	ldrh	r2, [r7, #2]
 8003dca:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003de0:	d802      	bhi.n	8003de8 <HAL_SPI_TransmitReceive+0xe6>
 8003de2:	8a3b      	ldrh	r3, [r7, #16]
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d908      	bls.n	8003dfa <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	685a      	ldr	r2, [r3, #4]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003df6:	605a      	str	r2, [r3, #4]
 8003df8:	e007      	b.n	8003e0a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	685a      	ldr	r2, [r3, #4]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e08:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e14:	2b40      	cmp	r3, #64	; 0x40
 8003e16:	d007      	beq.n	8003e28 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e26:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e30:	d97c      	bls.n	8003f2c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d002      	beq.n	8003e40 <HAL_SPI_TransmitReceive+0x13e>
 8003e3a:	8a7b      	ldrh	r3, [r7, #18]
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d169      	bne.n	8003f14 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e44:	881a      	ldrh	r2, [r3, #0]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e50:	1c9a      	adds	r2, r3, #2
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e64:	e056      	b.n	8003f14 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f003 0302 	and.w	r3, r3, #2
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d11b      	bne.n	8003eac <HAL_SPI_TransmitReceive+0x1aa>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d016      	beq.n	8003eac <HAL_SPI_TransmitReceive+0x1aa>
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d113      	bne.n	8003eac <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e88:	881a      	ldrh	r2, [r3, #0]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e94:	1c9a      	adds	r2, r3, #2
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	b29a      	uxth	r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d11c      	bne.n	8003ef4 <HAL_SPI_TransmitReceive+0x1f2>
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d016      	beq.n	8003ef4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68da      	ldr	r2, [r3, #12]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed0:	b292      	uxth	r2, r2
 8003ed2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed8:	1c9a      	adds	r2, r3, #2
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003ef4:	f7fd fa96 	bl	8001424 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d807      	bhi.n	8003f14 <HAL_SPI_TransmitReceive+0x212>
 8003f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f0a:	d003      	beq.n	8003f14 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003f12:	e0fb      	b.n	800410c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1a3      	bne.n	8003e66 <HAL_SPI_TransmitReceive+0x164>
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d19d      	bne.n	8003e66 <HAL_SPI_TransmitReceive+0x164>
 8003f2a:	e0df      	b.n	80040ec <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d003      	beq.n	8003f3c <HAL_SPI_TransmitReceive+0x23a>
 8003f34:	8a7b      	ldrh	r3, [r7, #18]
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	f040 80cb 	bne.w	80040d2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d912      	bls.n	8003f6c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4a:	881a      	ldrh	r2, [r3, #0]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f56:	1c9a      	adds	r2, r3, #2
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	3b02      	subs	r3, #2
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f6a:	e0b2      	b.n	80040d2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	330c      	adds	r3, #12
 8003f76:	7812      	ldrb	r2, [r2, #0]
 8003f78:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7e:	1c5a      	adds	r2, r3, #1
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f92:	e09e      	b.n	80040d2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d134      	bne.n	800400c <HAL_SPI_TransmitReceive+0x30a>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d02f      	beq.n	800400c <HAL_SPI_TransmitReceive+0x30a>
 8003fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d12c      	bne.n	800400c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d912      	bls.n	8003fe2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc0:	881a      	ldrh	r2, [r3, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fcc:	1c9a      	adds	r2, r3, #2
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	3b02      	subs	r3, #2
 8003fda:	b29a      	uxth	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003fe0:	e012      	b.n	8004008 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	330c      	adds	r3, #12
 8003fec:	7812      	ldrb	r2, [r2, #0]
 8003fee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff4:	1c5a      	adds	r2, r3, #1
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	3b01      	subs	r3, #1
 8004002:	b29a      	uxth	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004008:	2300      	movs	r3, #0
 800400a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	2b01      	cmp	r3, #1
 8004018:	d148      	bne.n	80040ac <HAL_SPI_TransmitReceive+0x3aa>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004020:	b29b      	uxth	r3, r3
 8004022:	2b00      	cmp	r3, #0
 8004024:	d042      	beq.n	80040ac <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800402c:	b29b      	uxth	r3, r3
 800402e:	2b01      	cmp	r3, #1
 8004030:	d923      	bls.n	800407a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68da      	ldr	r2, [r3, #12]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403c:	b292      	uxth	r2, r2
 800403e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004044:	1c9a      	adds	r2, r3, #2
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004050:	b29b      	uxth	r3, r3
 8004052:	3b02      	subs	r3, #2
 8004054:	b29a      	uxth	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004062:	b29b      	uxth	r3, r3
 8004064:	2b01      	cmp	r3, #1
 8004066:	d81f      	bhi.n	80040a8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	685a      	ldr	r2, [r3, #4]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004076:	605a      	str	r2, [r3, #4]
 8004078:	e016      	b.n	80040a8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f103 020c 	add.w	r2, r3, #12
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004086:	7812      	ldrb	r2, [r2, #0]
 8004088:	b2d2      	uxtb	r2, r2
 800408a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004090:	1c5a      	adds	r2, r3, #1
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800409c:	b29b      	uxth	r3, r3
 800409e:	3b01      	subs	r3, #1
 80040a0:	b29a      	uxth	r2, r3
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80040a8:	2301      	movs	r3, #1
 80040aa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80040ac:	f7fd f9ba 	bl	8001424 <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d803      	bhi.n	80040c4 <HAL_SPI_TransmitReceive+0x3c2>
 80040bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c2:	d102      	bne.n	80040ca <HAL_SPI_TransmitReceive+0x3c8>
 80040c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d103      	bne.n	80040d2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80040d0:	e01c      	b.n	800410c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f47f af5b 	bne.w	8003f94 <HAL_SPI_TransmitReceive+0x292>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	f47f af54 	bne.w	8003f94 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040ec:	69fa      	ldr	r2, [r7, #28]
 80040ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040f0:	68f8      	ldr	r0, [r7, #12]
 80040f2:	f000 f98f 	bl	8004414 <SPI_EndRxTxTransaction>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d006      	beq.n	800410a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2220      	movs	r2, #32
 8004106:	661a      	str	r2, [r3, #96]	; 0x60
 8004108:	e000      	b.n	800410c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800410a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800411c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004120:	4618      	mov	r0, r3
 8004122:	3728      	adds	r7, #40	; 0x28
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b088      	sub	sp, #32
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	603b      	str	r3, [r7, #0]
 8004134:	4613      	mov	r3, r2
 8004136:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004138:	f7fd f974 	bl	8001424 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004140:	1a9b      	subs	r3, r3, r2
 8004142:	683a      	ldr	r2, [r7, #0]
 8004144:	4413      	add	r3, r2
 8004146:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004148:	f7fd f96c 	bl	8001424 <HAL_GetTick>
 800414c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800414e:	4b39      	ldr	r3, [pc, #228]	; (8004234 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	015b      	lsls	r3, r3, #5
 8004154:	0d1b      	lsrs	r3, r3, #20
 8004156:	69fa      	ldr	r2, [r7, #28]
 8004158:	fb02 f303 	mul.w	r3, r2, r3
 800415c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800415e:	e054      	b.n	800420a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004166:	d050      	beq.n	800420a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004168:	f7fd f95c 	bl	8001424 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	69fa      	ldr	r2, [r7, #28]
 8004174:	429a      	cmp	r2, r3
 8004176:	d902      	bls.n	800417e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d13d      	bne.n	80041fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	685a      	ldr	r2, [r3, #4]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800418c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004196:	d111      	bne.n	80041bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041a0:	d004      	beq.n	80041ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041aa:	d107      	bne.n	80041bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041c4:	d10f      	bne.n	80041e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041d4:	601a      	str	r2, [r3, #0]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e017      	b.n	800422a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d101      	bne.n	8004204 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004200:	2300      	movs	r3, #0
 8004202:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	3b01      	subs	r3, #1
 8004208:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	689a      	ldr	r2, [r3, #8]
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	4013      	ands	r3, r2
 8004214:	68ba      	ldr	r2, [r7, #8]
 8004216:	429a      	cmp	r2, r3
 8004218:	bf0c      	ite	eq
 800421a:	2301      	moveq	r3, #1
 800421c:	2300      	movne	r3, #0
 800421e:	b2db      	uxtb	r3, r3
 8004220:	461a      	mov	r2, r3
 8004222:	79fb      	ldrb	r3, [r7, #7]
 8004224:	429a      	cmp	r2, r3
 8004226:	d19b      	bne.n	8004160 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	3720      	adds	r7, #32
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	20000010 	.word	0x20000010

08004238 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b08a      	sub	sp, #40	; 0x28
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	607a      	str	r2, [r7, #4]
 8004244:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004246:	2300      	movs	r3, #0
 8004248:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800424a:	f7fd f8eb 	bl	8001424 <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004252:	1a9b      	subs	r3, r3, r2
 8004254:	683a      	ldr	r2, [r7, #0]
 8004256:	4413      	add	r3, r2
 8004258:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800425a:	f7fd f8e3 	bl	8001424 <HAL_GetTick>
 800425e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	330c      	adds	r3, #12
 8004266:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004268:	4b3d      	ldr	r3, [pc, #244]	; (8004360 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	4613      	mov	r3, r2
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	4413      	add	r3, r2
 8004272:	00da      	lsls	r2, r3, #3
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	0d1b      	lsrs	r3, r3, #20
 8004278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800427a:	fb02 f303 	mul.w	r3, r2, r3
 800427e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004280:	e060      	b.n	8004344 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004288:	d107      	bne.n	800429a <SPI_WaitFifoStateUntilTimeout+0x62>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d104      	bne.n	800429a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	b2db      	uxtb	r3, r3
 8004296:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004298:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a0:	d050      	beq.n	8004344 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80042a2:	f7fd f8bf 	bl	8001424 <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	6a3b      	ldr	r3, [r7, #32]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d902      	bls.n	80042b8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80042b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d13d      	bne.n	8004334 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	685a      	ldr	r2, [r3, #4]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80042c6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042d0:	d111      	bne.n	80042f6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042da:	d004      	beq.n	80042e6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042e4:	d107      	bne.n	80042f6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042f4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042fe:	d10f      	bne.n	8004320 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800430e:	601a      	str	r2, [r3, #0]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800431e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e010      	b.n	8004356 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d101      	bne.n	800433e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800433a:	2300      	movs	r3, #0
 800433c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	3b01      	subs	r3, #1
 8004342:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	689a      	ldr	r2, [r3, #8]
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	4013      	ands	r3, r2
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	429a      	cmp	r2, r3
 8004352:	d196      	bne.n	8004282 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3728      	adds	r7, #40	; 0x28
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	20000010 	.word	0x20000010

08004364 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b086      	sub	sp, #24
 8004368:	af02      	add	r7, sp, #8
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004378:	d111      	bne.n	800439e <SPI_EndRxTransaction+0x3a>
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004382:	d004      	beq.n	800438e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800438c:	d107      	bne.n	800439e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800439c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	9300      	str	r3, [sp, #0]
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	2200      	movs	r2, #0
 80043a6:	2180      	movs	r1, #128	; 0x80
 80043a8:	68f8      	ldr	r0, [r7, #12]
 80043aa:	f7ff febd 	bl	8004128 <SPI_WaitFlagStateUntilTimeout>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d007      	beq.n	80043c4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043b8:	f043 0220 	orr.w	r2, r3, #32
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e023      	b.n	800440c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043cc:	d11d      	bne.n	800440a <SPI_EndRxTransaction+0xa6>
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043d6:	d004      	beq.n	80043e2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043e0:	d113      	bne.n	800440a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	9300      	str	r3, [sp, #0]
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80043ee:	68f8      	ldr	r0, [r7, #12]
 80043f0:	f7ff ff22 	bl	8004238 <SPI_WaitFifoStateUntilTimeout>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d007      	beq.n	800440a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043fe:	f043 0220 	orr.w	r2, r3, #32
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e000      	b.n	800440c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800440a:	2300      	movs	r3, #0
}
 800440c:	4618      	mov	r0, r3
 800440e:	3710      	adds	r7, #16
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b086      	sub	sp, #24
 8004418:	af02      	add	r7, sp, #8
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	9300      	str	r3, [sp, #0]
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	2200      	movs	r2, #0
 8004428:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800442c:	68f8      	ldr	r0, [r7, #12]
 800442e:	f7ff ff03 	bl	8004238 <SPI_WaitFifoStateUntilTimeout>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d007      	beq.n	8004448 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800443c:	f043 0220 	orr.w	r2, r3, #32
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e027      	b.n	8004498 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	9300      	str	r3, [sp, #0]
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	2200      	movs	r2, #0
 8004450:	2180      	movs	r1, #128	; 0x80
 8004452:	68f8      	ldr	r0, [r7, #12]
 8004454:	f7ff fe68 	bl	8004128 <SPI_WaitFlagStateUntilTimeout>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d007      	beq.n	800446e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004462:	f043 0220 	orr.w	r2, r3, #32
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e014      	b.n	8004498 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	9300      	str	r3, [sp, #0]
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	2200      	movs	r2, #0
 8004476:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800447a:	68f8      	ldr	r0, [r7, #12]
 800447c:	f7ff fedc 	bl	8004238 <SPI_WaitFifoStateUntilTimeout>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d007      	beq.n	8004496 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800448a:	f043 0220 	orr.w	r2, r3, #32
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e000      	b.n	8004498 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004496:	2300      	movs	r3, #0
}
 8004498:	4618      	mov	r0, r3
 800449a:	3710      	adds	r7, #16
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e049      	b.n	8004546 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d106      	bne.n	80044cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f7fc fe38 	bl	800113c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2202      	movs	r2, #2
 80044d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	3304      	adds	r3, #4
 80044dc:	4619      	mov	r1, r3
 80044de:	4610      	mov	r0, r2
 80044e0:	f000 fae0 	bl	8004aa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3708      	adds	r7, #8
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
	...

08004550 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004550:	b480      	push	{r7}
 8004552:	b085      	sub	sp, #20
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800455e:	b2db      	uxtb	r3, r3
 8004560:	2b01      	cmp	r3, #1
 8004562:	d001      	beq.n	8004568 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e047      	b.n	80045f8 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2202      	movs	r2, #2
 800456c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a23      	ldr	r2, [pc, #140]	; (8004604 <HAL_TIM_Base_Start+0xb4>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d01d      	beq.n	80045b6 <HAL_TIM_Base_Start+0x66>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004582:	d018      	beq.n	80045b6 <HAL_TIM_Base_Start+0x66>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a1f      	ldr	r2, [pc, #124]	; (8004608 <HAL_TIM_Base_Start+0xb8>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d013      	beq.n	80045b6 <HAL_TIM_Base_Start+0x66>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a1e      	ldr	r2, [pc, #120]	; (800460c <HAL_TIM_Base_Start+0xbc>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d00e      	beq.n	80045b6 <HAL_TIM_Base_Start+0x66>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a1c      	ldr	r2, [pc, #112]	; (8004610 <HAL_TIM_Base_Start+0xc0>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d009      	beq.n	80045b6 <HAL_TIM_Base_Start+0x66>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a1b      	ldr	r2, [pc, #108]	; (8004614 <HAL_TIM_Base_Start+0xc4>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d004      	beq.n	80045b6 <HAL_TIM_Base_Start+0x66>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a19      	ldr	r2, [pc, #100]	; (8004618 <HAL_TIM_Base_Start+0xc8>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d115      	bne.n	80045e2 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	689a      	ldr	r2, [r3, #8]
 80045bc:	4b17      	ldr	r3, [pc, #92]	; (800461c <HAL_TIM_Base_Start+0xcc>)
 80045be:	4013      	ands	r3, r2
 80045c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2b06      	cmp	r3, #6
 80045c6:	d015      	beq.n	80045f4 <HAL_TIM_Base_Start+0xa4>
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045ce:	d011      	beq.n	80045f4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f042 0201 	orr.w	r2, r2, #1
 80045de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045e0:	e008      	b.n	80045f4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f042 0201 	orr.w	r2, r2, #1
 80045f0:	601a      	str	r2, [r3, #0]
 80045f2:	e000      	b.n	80045f6 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045f4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3714      	adds	r7, #20
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr
 8004604:	40012c00 	.word	0x40012c00
 8004608:	40000400 	.word	0x40000400
 800460c:	40000800 	.word	0x40000800
 8004610:	40000c00 	.word	0x40000c00
 8004614:	40013400 	.word	0x40013400
 8004618:	40014000 	.word	0x40014000
 800461c:	00010007 	.word	0x00010007

08004620 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	6a1a      	ldr	r2, [r3, #32]
 800462e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004632:	4013      	ands	r3, r2
 8004634:	2b00      	cmp	r3, #0
 8004636:	d10f      	bne.n	8004658 <HAL_TIM_Base_Stop+0x38>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	6a1a      	ldr	r2, [r3, #32]
 800463e:	f240 4344 	movw	r3, #1092	; 0x444
 8004642:	4013      	ands	r3, r2
 8004644:	2b00      	cmp	r3, #0
 8004646:	d107      	bne.n	8004658 <HAL_TIM_Base_Stop+0x38>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f022 0201 	bic.w	r2, r2, #1
 8004656:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	370c      	adds	r7, #12
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr

0800466e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800466e:	b580      	push	{r7, lr}
 8004670:	b082      	sub	sp, #8
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	f003 0302 	and.w	r3, r3, #2
 8004680:	2b02      	cmp	r3, #2
 8004682:	d122      	bne.n	80046ca <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	f003 0302 	and.w	r3, r3, #2
 800468e:	2b02      	cmp	r3, #2
 8004690:	d11b      	bne.n	80046ca <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f06f 0202 	mvn.w	r2, #2
 800469a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	f003 0303 	and.w	r3, r3, #3
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d003      	beq.n	80046b8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f000 f9d8 	bl	8004a66 <HAL_TIM_IC_CaptureCallback>
 80046b6:	e005      	b.n	80046c4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f000 f9ca 	bl	8004a52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 f9db 	bl	8004a7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	f003 0304 	and.w	r3, r3, #4
 80046d4:	2b04      	cmp	r3, #4
 80046d6:	d122      	bne.n	800471e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	f003 0304 	and.w	r3, r3, #4
 80046e2:	2b04      	cmp	r3, #4
 80046e4:	d11b      	bne.n	800471e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f06f 0204 	mvn.w	r2, #4
 80046ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2202      	movs	r2, #2
 80046f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004700:	2b00      	cmp	r3, #0
 8004702:	d003      	beq.n	800470c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f000 f9ae 	bl	8004a66 <HAL_TIM_IC_CaptureCallback>
 800470a:	e005      	b.n	8004718 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f000 f9a0 	bl	8004a52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 f9b1 	bl	8004a7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	f003 0308 	and.w	r3, r3, #8
 8004728:	2b08      	cmp	r3, #8
 800472a:	d122      	bne.n	8004772 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	f003 0308 	and.w	r3, r3, #8
 8004736:	2b08      	cmp	r3, #8
 8004738:	d11b      	bne.n	8004772 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f06f 0208 	mvn.w	r2, #8
 8004742:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2204      	movs	r2, #4
 8004748:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	69db      	ldr	r3, [r3, #28]
 8004750:	f003 0303 	and.w	r3, r3, #3
 8004754:	2b00      	cmp	r3, #0
 8004756:	d003      	beq.n	8004760 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f000 f984 	bl	8004a66 <HAL_TIM_IC_CaptureCallback>
 800475e:	e005      	b.n	800476c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f000 f976 	bl	8004a52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 f987 	bl	8004a7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	f003 0310 	and.w	r3, r3, #16
 800477c:	2b10      	cmp	r3, #16
 800477e:	d122      	bne.n	80047c6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	f003 0310 	and.w	r3, r3, #16
 800478a:	2b10      	cmp	r3, #16
 800478c:	d11b      	bne.n	80047c6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f06f 0210 	mvn.w	r2, #16
 8004796:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2208      	movs	r2, #8
 800479c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	69db      	ldr	r3, [r3, #28]
 80047a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d003      	beq.n	80047b4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f000 f95a 	bl	8004a66 <HAL_TIM_IC_CaptureCallback>
 80047b2:	e005      	b.n	80047c0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f000 f94c 	bl	8004a52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 f95d 	bl	8004a7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	f003 0301 	and.w	r3, r3, #1
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d10e      	bne.n	80047f2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d107      	bne.n	80047f2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f06f 0201 	mvn.w	r2, #1
 80047ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f000 f926 	bl	8004a3e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047fc:	2b80      	cmp	r3, #128	; 0x80
 80047fe:	d10e      	bne.n	800481e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800480a:	2b80      	cmp	r3, #128	; 0x80
 800480c:	d107      	bne.n	800481e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004816:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f000 fb09 	bl	8004e30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004828:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800482c:	d10e      	bne.n	800484c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004838:	2b80      	cmp	r3, #128	; 0x80
 800483a:	d107      	bne.n	800484c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 fafc 	bl	8004e44 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004856:	2b40      	cmp	r3, #64	; 0x40
 8004858:	d10e      	bne.n	8004878 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004864:	2b40      	cmp	r3, #64	; 0x40
 8004866:	d107      	bne.n	8004878 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004870:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 f90b 	bl	8004a8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	f003 0320 	and.w	r3, r3, #32
 8004882:	2b20      	cmp	r3, #32
 8004884:	d10e      	bne.n	80048a4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	f003 0320 	and.w	r3, r3, #32
 8004890:	2b20      	cmp	r3, #32
 8004892:	d107      	bne.n	80048a4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f06f 0220 	mvn.w	r2, #32
 800489c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 fabc 	bl	8004e1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048a4:	bf00      	nop
 80048a6:	3708      	adds	r7, #8
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048b6:	2300      	movs	r3, #0
 80048b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d101      	bne.n	80048c8 <HAL_TIM_ConfigClockSource+0x1c>
 80048c4:	2302      	movs	r3, #2
 80048c6:	e0b6      	b.n	8004a36 <HAL_TIM_ConfigClockSource+0x18a>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2202      	movs	r2, #2
 80048d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80048ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68ba      	ldr	r2, [r7, #8]
 80048fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004904:	d03e      	beq.n	8004984 <HAL_TIM_ConfigClockSource+0xd8>
 8004906:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800490a:	f200 8087 	bhi.w	8004a1c <HAL_TIM_ConfigClockSource+0x170>
 800490e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004912:	f000 8086 	beq.w	8004a22 <HAL_TIM_ConfigClockSource+0x176>
 8004916:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800491a:	d87f      	bhi.n	8004a1c <HAL_TIM_ConfigClockSource+0x170>
 800491c:	2b70      	cmp	r3, #112	; 0x70
 800491e:	d01a      	beq.n	8004956 <HAL_TIM_ConfigClockSource+0xaa>
 8004920:	2b70      	cmp	r3, #112	; 0x70
 8004922:	d87b      	bhi.n	8004a1c <HAL_TIM_ConfigClockSource+0x170>
 8004924:	2b60      	cmp	r3, #96	; 0x60
 8004926:	d050      	beq.n	80049ca <HAL_TIM_ConfigClockSource+0x11e>
 8004928:	2b60      	cmp	r3, #96	; 0x60
 800492a:	d877      	bhi.n	8004a1c <HAL_TIM_ConfigClockSource+0x170>
 800492c:	2b50      	cmp	r3, #80	; 0x50
 800492e:	d03c      	beq.n	80049aa <HAL_TIM_ConfigClockSource+0xfe>
 8004930:	2b50      	cmp	r3, #80	; 0x50
 8004932:	d873      	bhi.n	8004a1c <HAL_TIM_ConfigClockSource+0x170>
 8004934:	2b40      	cmp	r3, #64	; 0x40
 8004936:	d058      	beq.n	80049ea <HAL_TIM_ConfigClockSource+0x13e>
 8004938:	2b40      	cmp	r3, #64	; 0x40
 800493a:	d86f      	bhi.n	8004a1c <HAL_TIM_ConfigClockSource+0x170>
 800493c:	2b30      	cmp	r3, #48	; 0x30
 800493e:	d064      	beq.n	8004a0a <HAL_TIM_ConfigClockSource+0x15e>
 8004940:	2b30      	cmp	r3, #48	; 0x30
 8004942:	d86b      	bhi.n	8004a1c <HAL_TIM_ConfigClockSource+0x170>
 8004944:	2b20      	cmp	r3, #32
 8004946:	d060      	beq.n	8004a0a <HAL_TIM_ConfigClockSource+0x15e>
 8004948:	2b20      	cmp	r3, #32
 800494a:	d867      	bhi.n	8004a1c <HAL_TIM_ConfigClockSource+0x170>
 800494c:	2b00      	cmp	r3, #0
 800494e:	d05c      	beq.n	8004a0a <HAL_TIM_ConfigClockSource+0x15e>
 8004950:	2b10      	cmp	r3, #16
 8004952:	d05a      	beq.n	8004a0a <HAL_TIM_ConfigClockSource+0x15e>
 8004954:	e062      	b.n	8004a1c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6818      	ldr	r0, [r3, #0]
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	6899      	ldr	r1, [r3, #8]
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	685a      	ldr	r2, [r3, #4]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	f000 f9b1 	bl	8004ccc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004978:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68ba      	ldr	r2, [r7, #8]
 8004980:	609a      	str	r2, [r3, #8]
      break;
 8004982:	e04f      	b.n	8004a24 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6818      	ldr	r0, [r3, #0]
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	6899      	ldr	r1, [r3, #8]
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	685a      	ldr	r2, [r3, #4]
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	f000 f99a 	bl	8004ccc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	689a      	ldr	r2, [r3, #8]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049a6:	609a      	str	r2, [r3, #8]
      break;
 80049a8:	e03c      	b.n	8004a24 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6818      	ldr	r0, [r3, #0]
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	6859      	ldr	r1, [r3, #4]
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	461a      	mov	r2, r3
 80049b8:	f000 f90e 	bl	8004bd8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2150      	movs	r1, #80	; 0x50
 80049c2:	4618      	mov	r0, r3
 80049c4:	f000 f967 	bl	8004c96 <TIM_ITRx_SetConfig>
      break;
 80049c8:	e02c      	b.n	8004a24 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6818      	ldr	r0, [r3, #0]
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	6859      	ldr	r1, [r3, #4]
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	461a      	mov	r2, r3
 80049d8:	f000 f92d 	bl	8004c36 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2160      	movs	r1, #96	; 0x60
 80049e2:	4618      	mov	r0, r3
 80049e4:	f000 f957 	bl	8004c96 <TIM_ITRx_SetConfig>
      break;
 80049e8:	e01c      	b.n	8004a24 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6818      	ldr	r0, [r3, #0]
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	6859      	ldr	r1, [r3, #4]
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	461a      	mov	r2, r3
 80049f8:	f000 f8ee 	bl	8004bd8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2140      	movs	r1, #64	; 0x40
 8004a02:	4618      	mov	r0, r3
 8004a04:	f000 f947 	bl	8004c96 <TIM_ITRx_SetConfig>
      break;
 8004a08:	e00c      	b.n	8004a24 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4619      	mov	r1, r3
 8004a14:	4610      	mov	r0, r2
 8004a16:	f000 f93e 	bl	8004c96 <TIM_ITRx_SetConfig>
      break;
 8004a1a:	e003      	b.n	8004a24 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	73fb      	strb	r3, [r7, #15]
      break;
 8004a20:	e000      	b.n	8004a24 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004a22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}

08004a3e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b083      	sub	sp, #12
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004a46:	bf00      	nop
 8004a48:	370c      	adds	r7, #12
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr

08004a52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a52:	b480      	push	{r7}
 8004a54:	b083      	sub	sp, #12
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a5a:	bf00      	nop
 8004a5c:	370c      	adds	r7, #12
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr

08004a66 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a66:	b480      	push	{r7}
 8004a68:	b083      	sub	sp, #12
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a6e:	bf00      	nop
 8004a70:	370c      	adds	r7, #12
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr

08004a7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	b083      	sub	sp, #12
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a82:	bf00      	nop
 8004a84:	370c      	adds	r7, #12
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr

08004a8e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a8e:	b480      	push	{r7}
 8004a90:	b083      	sub	sp, #12
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a96:	bf00      	nop
 8004a98:	370c      	adds	r7, #12
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
	...

08004aa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b085      	sub	sp, #20
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a40      	ldr	r2, [pc, #256]	; (8004bb8 <TIM_Base_SetConfig+0x114>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d013      	beq.n	8004ae4 <TIM_Base_SetConfig+0x40>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ac2:	d00f      	beq.n	8004ae4 <TIM_Base_SetConfig+0x40>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4a3d      	ldr	r2, [pc, #244]	; (8004bbc <TIM_Base_SetConfig+0x118>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d00b      	beq.n	8004ae4 <TIM_Base_SetConfig+0x40>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a3c      	ldr	r2, [pc, #240]	; (8004bc0 <TIM_Base_SetConfig+0x11c>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d007      	beq.n	8004ae4 <TIM_Base_SetConfig+0x40>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a3b      	ldr	r2, [pc, #236]	; (8004bc4 <TIM_Base_SetConfig+0x120>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d003      	beq.n	8004ae4 <TIM_Base_SetConfig+0x40>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a3a      	ldr	r2, [pc, #232]	; (8004bc8 <TIM_Base_SetConfig+0x124>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d108      	bne.n	8004af6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a2f      	ldr	r2, [pc, #188]	; (8004bb8 <TIM_Base_SetConfig+0x114>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d01f      	beq.n	8004b3e <TIM_Base_SetConfig+0x9a>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b04:	d01b      	beq.n	8004b3e <TIM_Base_SetConfig+0x9a>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a2c      	ldr	r2, [pc, #176]	; (8004bbc <TIM_Base_SetConfig+0x118>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d017      	beq.n	8004b3e <TIM_Base_SetConfig+0x9a>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a2b      	ldr	r2, [pc, #172]	; (8004bc0 <TIM_Base_SetConfig+0x11c>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d013      	beq.n	8004b3e <TIM_Base_SetConfig+0x9a>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a2a      	ldr	r2, [pc, #168]	; (8004bc4 <TIM_Base_SetConfig+0x120>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d00f      	beq.n	8004b3e <TIM_Base_SetConfig+0x9a>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a29      	ldr	r2, [pc, #164]	; (8004bc8 <TIM_Base_SetConfig+0x124>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d00b      	beq.n	8004b3e <TIM_Base_SetConfig+0x9a>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a28      	ldr	r2, [pc, #160]	; (8004bcc <TIM_Base_SetConfig+0x128>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d007      	beq.n	8004b3e <TIM_Base_SetConfig+0x9a>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a27      	ldr	r2, [pc, #156]	; (8004bd0 <TIM_Base_SetConfig+0x12c>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d003      	beq.n	8004b3e <TIM_Base_SetConfig+0x9a>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a26      	ldr	r2, [pc, #152]	; (8004bd4 <TIM_Base_SetConfig+0x130>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d108      	bne.n	8004b50 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	695b      	ldr	r3, [r3, #20]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	689a      	ldr	r2, [r3, #8]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a10      	ldr	r2, [pc, #64]	; (8004bb8 <TIM_Base_SetConfig+0x114>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d00f      	beq.n	8004b9c <TIM_Base_SetConfig+0xf8>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4a12      	ldr	r2, [pc, #72]	; (8004bc8 <TIM_Base_SetConfig+0x124>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d00b      	beq.n	8004b9c <TIM_Base_SetConfig+0xf8>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a11      	ldr	r2, [pc, #68]	; (8004bcc <TIM_Base_SetConfig+0x128>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d007      	beq.n	8004b9c <TIM_Base_SetConfig+0xf8>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4a10      	ldr	r2, [pc, #64]	; (8004bd0 <TIM_Base_SetConfig+0x12c>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d003      	beq.n	8004b9c <TIM_Base_SetConfig+0xf8>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4a0f      	ldr	r2, [pc, #60]	; (8004bd4 <TIM_Base_SetConfig+0x130>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d103      	bne.n	8004ba4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	691a      	ldr	r2, [r3, #16]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	615a      	str	r2, [r3, #20]
}
 8004baa:	bf00      	nop
 8004bac:	3714      	adds	r7, #20
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	40012c00 	.word	0x40012c00
 8004bbc:	40000400 	.word	0x40000400
 8004bc0:	40000800 	.word	0x40000800
 8004bc4:	40000c00 	.word	0x40000c00
 8004bc8:	40013400 	.word	0x40013400
 8004bcc:	40014000 	.word	0x40014000
 8004bd0:	40014400 	.word	0x40014400
 8004bd4:	40014800 	.word	0x40014800

08004bd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b087      	sub	sp, #28
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6a1b      	ldr	r3, [r3, #32]
 8004be8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	f023 0201 	bic.w	r2, r3, #1
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	699b      	ldr	r3, [r3, #24]
 8004bfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	011b      	lsls	r3, r3, #4
 8004c08:	693a      	ldr	r2, [r7, #16]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	f023 030a 	bic.w	r3, r3, #10
 8004c14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c16:	697a      	ldr	r2, [r7, #20]
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	693a      	ldr	r2, [r7, #16]
 8004c22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	621a      	str	r2, [r3, #32]
}
 8004c2a:	bf00      	nop
 8004c2c:	371c      	adds	r7, #28
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr

08004c36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c36:	b480      	push	{r7}
 8004c38:	b087      	sub	sp, #28
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	60f8      	str	r0, [r7, #12]
 8004c3e:	60b9      	str	r1, [r7, #8]
 8004c40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6a1b      	ldr	r3, [r3, #32]
 8004c46:	f023 0210 	bic.w	r2, r3, #16
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6a1b      	ldr	r3, [r3, #32]
 8004c58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	031b      	lsls	r3, r3, #12
 8004c66:	697a      	ldr	r2, [r7, #20]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c72:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	011b      	lsls	r3, r3, #4
 8004c78:	693a      	ldr	r2, [r7, #16]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	697a      	ldr	r2, [r7, #20]
 8004c82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	693a      	ldr	r2, [r7, #16]
 8004c88:	621a      	str	r2, [r3, #32]
}
 8004c8a:	bf00      	nop
 8004c8c:	371c      	adds	r7, #28
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr

08004c96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c96:	b480      	push	{r7}
 8004c98:	b085      	sub	sp, #20
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
 8004c9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004cae:	683a      	ldr	r2, [r7, #0]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	f043 0307 	orr.w	r3, r3, #7
 8004cb8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	609a      	str	r2, [r3, #8]
}
 8004cc0:	bf00      	nop
 8004cc2:	3714      	adds	r7, #20
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b087      	sub	sp, #28
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	607a      	str	r2, [r7, #4]
 8004cd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ce6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	021a      	lsls	r2, r3, #8
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	431a      	orrs	r2, r3
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	697a      	ldr	r2, [r7, #20]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	697a      	ldr	r2, [r7, #20]
 8004cfe:	609a      	str	r2, [r3, #8]
}
 8004d00:	bf00      	nop
 8004d02:	371c      	adds	r7, #28
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d101      	bne.n	8004d24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d20:	2302      	movs	r3, #2
 8004d22:	e068      	b.n	8004df6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2202      	movs	r2, #2
 8004d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a2e      	ldr	r2, [pc, #184]	; (8004e04 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d004      	beq.n	8004d58 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a2d      	ldr	r2, [pc, #180]	; (8004e08 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d108      	bne.n	8004d6a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004d5e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d70:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68fa      	ldr	r2, [r7, #12]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a1e      	ldr	r2, [pc, #120]	; (8004e04 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d01d      	beq.n	8004dca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d96:	d018      	beq.n	8004dca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a1b      	ldr	r2, [pc, #108]	; (8004e0c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d013      	beq.n	8004dca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a1a      	ldr	r2, [pc, #104]	; (8004e10 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d00e      	beq.n	8004dca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a18      	ldr	r2, [pc, #96]	; (8004e14 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d009      	beq.n	8004dca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a13      	ldr	r2, [pc, #76]	; (8004e08 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d004      	beq.n	8004dca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a14      	ldr	r2, [pc, #80]	; (8004e18 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d10c      	bne.n	8004de4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	68ba      	ldr	r2, [r7, #8]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68ba      	ldr	r2, [r7, #8]
 8004de2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3714      	adds	r7, #20
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	40012c00 	.word	0x40012c00
 8004e08:	40013400 	.word	0x40013400
 8004e0c:	40000400 	.word	0x40000400
 8004e10:	40000800 	.word	0x40000800
 8004e14:	40000c00 	.word	0x40000c00
 8004e18:	40014000 	.word	0x40014000

08004e1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e24:	bf00      	nop
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e38:	bf00      	nop
 8004e3a:	370c      	adds	r7, #12
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004e4c:	bf00      	nop
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <_Znwj>:
 8004e58:	2801      	cmp	r0, #1
 8004e5a:	bf38      	it	cc
 8004e5c:	2001      	movcc	r0, #1
 8004e5e:	b510      	push	{r4, lr}
 8004e60:	4604      	mov	r4, r0
 8004e62:	4620      	mov	r0, r4
 8004e64:	f000 f844 	bl	8004ef0 <malloc>
 8004e68:	b930      	cbnz	r0, 8004e78 <_Znwj+0x20>
 8004e6a:	f000 f807 	bl	8004e7c <_ZSt15get_new_handlerv>
 8004e6e:	b908      	cbnz	r0, 8004e74 <_Znwj+0x1c>
 8004e70:	f000 f80c 	bl	8004e8c <abort>
 8004e74:	4780      	blx	r0
 8004e76:	e7f4      	b.n	8004e62 <_Znwj+0xa>
 8004e78:	bd10      	pop	{r4, pc}
	...

08004e7c <_ZSt15get_new_handlerv>:
 8004e7c:	4b02      	ldr	r3, [pc, #8]	; (8004e88 <_ZSt15get_new_handlerv+0xc>)
 8004e7e:	6818      	ldr	r0, [r3, #0]
 8004e80:	f3bf 8f5b 	dmb	ish
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop
 8004e88:	200001f4 	.word	0x200001f4

08004e8c <abort>:
 8004e8c:	b508      	push	{r3, lr}
 8004e8e:	2006      	movs	r0, #6
 8004e90:	f000 f8d0 	bl	8005034 <raise>
 8004e94:	2001      	movs	r0, #1
 8004e96:	f7fc f9e1 	bl	800125c <_exit>
	...

08004e9c <__errno>:
 8004e9c:	4b01      	ldr	r3, [pc, #4]	; (8004ea4 <__errno+0x8>)
 8004e9e:	6818      	ldr	r0, [r3, #0]
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	2000001c 	.word	0x2000001c

08004ea8 <__libc_init_array>:
 8004ea8:	b570      	push	{r4, r5, r6, lr}
 8004eaa:	4d0d      	ldr	r5, [pc, #52]	; (8004ee0 <__libc_init_array+0x38>)
 8004eac:	4c0d      	ldr	r4, [pc, #52]	; (8004ee4 <__libc_init_array+0x3c>)
 8004eae:	1b64      	subs	r4, r4, r5
 8004eb0:	10a4      	asrs	r4, r4, #2
 8004eb2:	2600      	movs	r6, #0
 8004eb4:	42a6      	cmp	r6, r4
 8004eb6:	d109      	bne.n	8004ecc <__libc_init_array+0x24>
 8004eb8:	4d0b      	ldr	r5, [pc, #44]	; (8004ee8 <__libc_init_array+0x40>)
 8004eba:	4c0c      	ldr	r4, [pc, #48]	; (8004eec <__libc_init_array+0x44>)
 8004ebc:	f000 f8e4 	bl	8005088 <_init>
 8004ec0:	1b64      	subs	r4, r4, r5
 8004ec2:	10a4      	asrs	r4, r4, #2
 8004ec4:	2600      	movs	r6, #0
 8004ec6:	42a6      	cmp	r6, r4
 8004ec8:	d105      	bne.n	8004ed6 <__libc_init_array+0x2e>
 8004eca:	bd70      	pop	{r4, r5, r6, pc}
 8004ecc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ed0:	4798      	blx	r3
 8004ed2:	3601      	adds	r6, #1
 8004ed4:	e7ee      	b.n	8004eb4 <__libc_init_array+0xc>
 8004ed6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004eda:	4798      	blx	r3
 8004edc:	3601      	adds	r6, #1
 8004ede:	e7f2      	b.n	8004ec6 <__libc_init_array+0x1e>
 8004ee0:	080050f0 	.word	0x080050f0
 8004ee4:	080050f0 	.word	0x080050f0
 8004ee8:	080050f0 	.word	0x080050f0
 8004eec:	080050f4 	.word	0x080050f4

08004ef0 <malloc>:
 8004ef0:	4b02      	ldr	r3, [pc, #8]	; (8004efc <malloc+0xc>)
 8004ef2:	4601      	mov	r1, r0
 8004ef4:	6818      	ldr	r0, [r3, #0]
 8004ef6:	f000 b80b 	b.w	8004f10 <_malloc_r>
 8004efa:	bf00      	nop
 8004efc:	2000001c 	.word	0x2000001c

08004f00 <memset>:
 8004f00:	4402      	add	r2, r0
 8004f02:	4603      	mov	r3, r0
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d100      	bne.n	8004f0a <memset+0xa>
 8004f08:	4770      	bx	lr
 8004f0a:	f803 1b01 	strb.w	r1, [r3], #1
 8004f0e:	e7f9      	b.n	8004f04 <memset+0x4>

08004f10 <_malloc_r>:
 8004f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f12:	1ccd      	adds	r5, r1, #3
 8004f14:	f025 0503 	bic.w	r5, r5, #3
 8004f18:	3508      	adds	r5, #8
 8004f1a:	2d0c      	cmp	r5, #12
 8004f1c:	bf38      	it	cc
 8004f1e:	250c      	movcc	r5, #12
 8004f20:	2d00      	cmp	r5, #0
 8004f22:	4606      	mov	r6, r0
 8004f24:	db01      	blt.n	8004f2a <_malloc_r+0x1a>
 8004f26:	42a9      	cmp	r1, r5
 8004f28:	d903      	bls.n	8004f32 <_malloc_r+0x22>
 8004f2a:	230c      	movs	r3, #12
 8004f2c:	6033      	str	r3, [r6, #0]
 8004f2e:	2000      	movs	r0, #0
 8004f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f32:	f000 f89b 	bl	800506c <__malloc_lock>
 8004f36:	4921      	ldr	r1, [pc, #132]	; (8004fbc <_malloc_r+0xac>)
 8004f38:	680a      	ldr	r2, [r1, #0]
 8004f3a:	4614      	mov	r4, r2
 8004f3c:	b99c      	cbnz	r4, 8004f66 <_malloc_r+0x56>
 8004f3e:	4f20      	ldr	r7, [pc, #128]	; (8004fc0 <_malloc_r+0xb0>)
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	b923      	cbnz	r3, 8004f4e <_malloc_r+0x3e>
 8004f44:	4621      	mov	r1, r4
 8004f46:	4630      	mov	r0, r6
 8004f48:	f000 f83c 	bl	8004fc4 <_sbrk_r>
 8004f4c:	6038      	str	r0, [r7, #0]
 8004f4e:	4629      	mov	r1, r5
 8004f50:	4630      	mov	r0, r6
 8004f52:	f000 f837 	bl	8004fc4 <_sbrk_r>
 8004f56:	1c43      	adds	r3, r0, #1
 8004f58:	d123      	bne.n	8004fa2 <_malloc_r+0x92>
 8004f5a:	230c      	movs	r3, #12
 8004f5c:	6033      	str	r3, [r6, #0]
 8004f5e:	4630      	mov	r0, r6
 8004f60:	f000 f88a 	bl	8005078 <__malloc_unlock>
 8004f64:	e7e3      	b.n	8004f2e <_malloc_r+0x1e>
 8004f66:	6823      	ldr	r3, [r4, #0]
 8004f68:	1b5b      	subs	r3, r3, r5
 8004f6a:	d417      	bmi.n	8004f9c <_malloc_r+0x8c>
 8004f6c:	2b0b      	cmp	r3, #11
 8004f6e:	d903      	bls.n	8004f78 <_malloc_r+0x68>
 8004f70:	6023      	str	r3, [r4, #0]
 8004f72:	441c      	add	r4, r3
 8004f74:	6025      	str	r5, [r4, #0]
 8004f76:	e004      	b.n	8004f82 <_malloc_r+0x72>
 8004f78:	6863      	ldr	r3, [r4, #4]
 8004f7a:	42a2      	cmp	r2, r4
 8004f7c:	bf0c      	ite	eq
 8004f7e:	600b      	streq	r3, [r1, #0]
 8004f80:	6053      	strne	r3, [r2, #4]
 8004f82:	4630      	mov	r0, r6
 8004f84:	f000 f878 	bl	8005078 <__malloc_unlock>
 8004f88:	f104 000b 	add.w	r0, r4, #11
 8004f8c:	1d23      	adds	r3, r4, #4
 8004f8e:	f020 0007 	bic.w	r0, r0, #7
 8004f92:	1ac2      	subs	r2, r0, r3
 8004f94:	d0cc      	beq.n	8004f30 <_malloc_r+0x20>
 8004f96:	1a1b      	subs	r3, r3, r0
 8004f98:	50a3      	str	r3, [r4, r2]
 8004f9a:	e7c9      	b.n	8004f30 <_malloc_r+0x20>
 8004f9c:	4622      	mov	r2, r4
 8004f9e:	6864      	ldr	r4, [r4, #4]
 8004fa0:	e7cc      	b.n	8004f3c <_malloc_r+0x2c>
 8004fa2:	1cc4      	adds	r4, r0, #3
 8004fa4:	f024 0403 	bic.w	r4, r4, #3
 8004fa8:	42a0      	cmp	r0, r4
 8004faa:	d0e3      	beq.n	8004f74 <_malloc_r+0x64>
 8004fac:	1a21      	subs	r1, r4, r0
 8004fae:	4630      	mov	r0, r6
 8004fb0:	f000 f808 	bl	8004fc4 <_sbrk_r>
 8004fb4:	3001      	adds	r0, #1
 8004fb6:	d1dd      	bne.n	8004f74 <_malloc_r+0x64>
 8004fb8:	e7cf      	b.n	8004f5a <_malloc_r+0x4a>
 8004fba:	bf00      	nop
 8004fbc:	200001f8 	.word	0x200001f8
 8004fc0:	200001fc 	.word	0x200001fc

08004fc4 <_sbrk_r>:
 8004fc4:	b538      	push	{r3, r4, r5, lr}
 8004fc6:	4d06      	ldr	r5, [pc, #24]	; (8004fe0 <_sbrk_r+0x1c>)
 8004fc8:	2300      	movs	r3, #0
 8004fca:	4604      	mov	r4, r0
 8004fcc:	4608      	mov	r0, r1
 8004fce:	602b      	str	r3, [r5, #0]
 8004fd0:	f7fc f94e 	bl	8001270 <_sbrk>
 8004fd4:	1c43      	adds	r3, r0, #1
 8004fd6:	d102      	bne.n	8004fde <_sbrk_r+0x1a>
 8004fd8:	682b      	ldr	r3, [r5, #0]
 8004fda:	b103      	cbz	r3, 8004fde <_sbrk_r+0x1a>
 8004fdc:	6023      	str	r3, [r4, #0]
 8004fde:	bd38      	pop	{r3, r4, r5, pc}
 8004fe0:	20000204 	.word	0x20000204

08004fe4 <_raise_r>:
 8004fe4:	291f      	cmp	r1, #31
 8004fe6:	b538      	push	{r3, r4, r5, lr}
 8004fe8:	4604      	mov	r4, r0
 8004fea:	460d      	mov	r5, r1
 8004fec:	d904      	bls.n	8004ff8 <_raise_r+0x14>
 8004fee:	2316      	movs	r3, #22
 8004ff0:	6003      	str	r3, [r0, #0]
 8004ff2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ff6:	bd38      	pop	{r3, r4, r5, pc}
 8004ff8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004ffa:	b112      	cbz	r2, 8005002 <_raise_r+0x1e>
 8004ffc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005000:	b94b      	cbnz	r3, 8005016 <_raise_r+0x32>
 8005002:	4620      	mov	r0, r4
 8005004:	f000 f830 	bl	8005068 <_getpid_r>
 8005008:	462a      	mov	r2, r5
 800500a:	4601      	mov	r1, r0
 800500c:	4620      	mov	r0, r4
 800500e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005012:	f000 b817 	b.w	8005044 <_kill_r>
 8005016:	2b01      	cmp	r3, #1
 8005018:	d00a      	beq.n	8005030 <_raise_r+0x4c>
 800501a:	1c59      	adds	r1, r3, #1
 800501c:	d103      	bne.n	8005026 <_raise_r+0x42>
 800501e:	2316      	movs	r3, #22
 8005020:	6003      	str	r3, [r0, #0]
 8005022:	2001      	movs	r0, #1
 8005024:	e7e7      	b.n	8004ff6 <_raise_r+0x12>
 8005026:	2400      	movs	r4, #0
 8005028:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800502c:	4628      	mov	r0, r5
 800502e:	4798      	blx	r3
 8005030:	2000      	movs	r0, #0
 8005032:	e7e0      	b.n	8004ff6 <_raise_r+0x12>

08005034 <raise>:
 8005034:	4b02      	ldr	r3, [pc, #8]	; (8005040 <raise+0xc>)
 8005036:	4601      	mov	r1, r0
 8005038:	6818      	ldr	r0, [r3, #0]
 800503a:	f7ff bfd3 	b.w	8004fe4 <_raise_r>
 800503e:	bf00      	nop
 8005040:	2000001c 	.word	0x2000001c

08005044 <_kill_r>:
 8005044:	b538      	push	{r3, r4, r5, lr}
 8005046:	4d07      	ldr	r5, [pc, #28]	; (8005064 <_kill_r+0x20>)
 8005048:	2300      	movs	r3, #0
 800504a:	4604      	mov	r4, r0
 800504c:	4608      	mov	r0, r1
 800504e:	4611      	mov	r1, r2
 8005050:	602b      	str	r3, [r5, #0]
 8005052:	f7fc f8f3 	bl	800123c <_kill>
 8005056:	1c43      	adds	r3, r0, #1
 8005058:	d102      	bne.n	8005060 <_kill_r+0x1c>
 800505a:	682b      	ldr	r3, [r5, #0]
 800505c:	b103      	cbz	r3, 8005060 <_kill_r+0x1c>
 800505e:	6023      	str	r3, [r4, #0]
 8005060:	bd38      	pop	{r3, r4, r5, pc}
 8005062:	bf00      	nop
 8005064:	20000204 	.word	0x20000204

08005068 <_getpid_r>:
 8005068:	f7fc b8e0 	b.w	800122c <_getpid>

0800506c <__malloc_lock>:
 800506c:	4801      	ldr	r0, [pc, #4]	; (8005074 <__malloc_lock+0x8>)
 800506e:	f000 b809 	b.w	8005084 <__retarget_lock_acquire_recursive>
 8005072:	bf00      	nop
 8005074:	2000020c 	.word	0x2000020c

08005078 <__malloc_unlock>:
 8005078:	4801      	ldr	r0, [pc, #4]	; (8005080 <__malloc_unlock+0x8>)
 800507a:	f000 b804 	b.w	8005086 <__retarget_lock_release_recursive>
 800507e:	bf00      	nop
 8005080:	2000020c 	.word	0x2000020c

08005084 <__retarget_lock_acquire_recursive>:
 8005084:	4770      	bx	lr

08005086 <__retarget_lock_release_recursive>:
 8005086:	4770      	bx	lr

08005088 <_init>:
 8005088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800508a:	bf00      	nop
 800508c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800508e:	bc08      	pop	{r3}
 8005090:	469e      	mov	lr, r3
 8005092:	4770      	bx	lr

08005094 <_fini>:
 8005094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005096:	bf00      	nop
 8005098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800509a:	bc08      	pop	{r3}
 800509c:	469e      	mov	lr, r3
 800509e:	4770      	bx	lr
