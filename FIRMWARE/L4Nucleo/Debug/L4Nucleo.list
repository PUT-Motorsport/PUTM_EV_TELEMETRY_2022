
L4Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005860  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  080059f0  080059f0  000159f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b8c  08005b8c  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08005b8c  08005b8c  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b8c  08005b8c  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005b8c  08005b8c  00015b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b94  08005b94  00015b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08005b98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a8  20000080  08005c18  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000228  08005c18  00020228  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a0fb  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031c4  00000000  00000000  0003a1ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f0  00000000  00000000  0003d370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fc8  00000000  00000000  0003e460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bba3  00000000  00000000  0003f428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001375a  00000000  00000000  0006afcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010592e  00000000  00000000  0007e725  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00184053  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005064  00000000  00000000  001840a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080059d8 	.word	0x080059d8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	080059d8 	.word	0x080059d8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <_ZN11Can_Message9return_IDEv>:
		DLC  = 0;
		Data = 0;
	}
	~Can_Message();
//////////Returns/////////////
	uint16_t return_ID()
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
	{
		return ID;
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	881b      	ldrh	r3, [r3, #0]
	}
 800027c:	4618      	mov	r0, r3
 800027e:	370c      	adds	r7, #12
 8000280:	46bd      	mov	sp, r7
 8000282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000286:	4770      	bx	lr

08000288 <_ZN11Can_Message11return_DataEi>:
	uint8_t return_Data(int i)
 8000288:	b480      	push	{r7}
 800028a:	b083      	sub	sp, #12
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
 8000290:	6039      	str	r1, [r7, #0]
	{
		return Data[i];
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	685a      	ldr	r2, [r3, #4]
 8000296:	683b      	ldr	r3, [r7, #0]
 8000298:	4413      	add	r3, r2
 800029a:	781b      	ldrb	r3, [r3, #0]
	}
 800029c:	4618      	mov	r0, r3
 800029e:	370c      	adds	r7, #12
 80002a0:	46bd      	mov	sp, r7
 80002a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a6:	4770      	bx	lr

080002a8 <_ZN17pointer_to_parserC1EPFvP8Packet_1P11Can_MessageP6StatesEi>:

class pointer_to_parser{
public:
	void (*ptr)(Packet_1*, Can_Message*, States*);
	int ID;
	pointer_to_parser(void (PTR)(Packet_1*, Can_Message*, States*), int id)
 80002a8:	b480      	push	{r7}
 80002aa:	b085      	sub	sp, #20
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	60f8      	str	r0, [r7, #12]
 80002b0:	60b9      	str	r1, [r7, #8]
 80002b2:	607a      	str	r2, [r7, #4]
	{
		ptr = PTR;
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	68ba      	ldr	r2, [r7, #8]
 80002b8:	601a      	str	r2, [r3, #0]
		ID = id;
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	687a      	ldr	r2, [r7, #4]
 80002be:	605a      	str	r2, [r3, #4]
	}
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	4618      	mov	r0, r3
 80002c4:	3714      	adds	r7, #20
 80002c6:	46bd      	mov	sp, r7
 80002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002cc:	4770      	bx	lr
	...

080002d0 <_Z20Create_parsing_arrayv>:
* This function creates pointer_to_parser objects, which contains ID and pointer to parsing function, and puts them into a array.
* @param: none
* @retval none
*/
void Create_parsing_array()
{
 80002d0:	b590      	push	{r4, r7, lr}
 80002d2:	b085      	sub	sp, #20
 80002d4:	af00      	add	r7, sp, #0
	 void (*APPS_ptr)  (Packet_1*, Can_Message*, States*) = APPS_Parser;
 80002d6:	4b12      	ldr	r3, [pc, #72]	; (8000320 <_Z20Create_parsing_arrayv+0x50>)
 80002d8:	60fb      	str	r3, [r7, #12]
	 void (*BMS_LV_ptr)(Packet_1*, Can_Message*, States*) = BMS_LV_Parser;
 80002da:	4b12      	ldr	r3, [pc, #72]	; (8000324 <_Z20Create_parsing_arrayv+0x54>)
 80002dc:	60bb      	str	r3, [r7, #8]
	 	 	 	 	 	 	 	 /*
	 	 	 	 	 	 	 	  *
	 	 	 	 	 	 	 	  *
	 	 	 	 	 	 	 	  *
	 	 	 	 	 	 	 	  */
	 pointer_to_parser* APPS   = new pointer_to_parser(APPS_ptr, APPS_ID);
 80002de:	2008      	movs	r0, #8
 80002e0:	f004 fb2c 	bl	800493c <_Znwj>
 80002e4:	4603      	mov	r3, r0
 80002e6:	461c      	mov	r4, r3
 80002e8:	220a      	movs	r2, #10
 80002ea:	68f9      	ldr	r1, [r7, #12]
 80002ec:	4620      	mov	r0, r4
 80002ee:	f7ff ffdb 	bl	80002a8 <_ZN17pointer_to_parserC1EPFvP8Packet_1P11Can_MessageP6StatesEi>
 80002f2:	607c      	str	r4, [r7, #4]
	 pointer_to_parser* BMS_LV = new pointer_to_parser(BMS_LV_ptr, BMS_LV_ID);
 80002f4:	2008      	movs	r0, #8
 80002f6:	f004 fb21 	bl	800493c <_Znwj>
 80002fa:	4603      	mov	r3, r0
 80002fc:	461c      	mov	r4, r3
 80002fe:	220b      	movs	r2, #11
 8000300:	68b9      	ldr	r1, [r7, #8]
 8000302:	4620      	mov	r0, r4
 8000304:	f7ff ffd0 	bl	80002a8 <_ZN17pointer_to_parserC1EPFvP8Packet_1P11Can_MessageP6StatesEi>
 8000308:	603c      	str	r4, [r7, #0]
	 	 	 	 	 	 	 	 /*
	 	 	 	 	 	 	 	  *
	 	 	 	 	 	 	 	  *
	 	 	 	 	 	 	 	  *
	 	 	 	 	 	 	 	  */
	 parsing_array[0] = APPS;
 800030a:	4a07      	ldr	r2, [pc, #28]	; (8000328 <_Z20Create_parsing_arrayv+0x58>)
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	6013      	str	r3, [r2, #0]
	 parsing_array[1] = BMS_LV;
 8000310:	4a05      	ldr	r2, [pc, #20]	; (8000328 <_Z20Create_parsing_arrayv+0x58>)
 8000312:	683b      	ldr	r3, [r7, #0]
 8000314:	6053      	str	r3, [r2, #4]
	 	 	 	 	 	 	 	 /*
	 	 	 	 	 	 	 	  *
	 	 	 	 	 	 	 	  *
	 	 	 	 	 	 	 	  *
	 	 	 	 	 	 	 	  */
}
 8000316:	bf00      	nop
 8000318:	3714      	adds	r7, #20
 800031a:	46bd      	mov	sp, r7
 800031c:	bd90      	pop	{r4, r7, pc}
 800031e:	bf00      	nop
 8000320:	08000493 	.word	0x08000493
 8000324:	080004ed 	.word	0x080004ed
 8000328:	2000009c 	.word	0x2000009c

0800032c <_ZN8Packet_113Choose_ParserEP11Can_MessagePS_P6States>:
* @param: Pointer to data packet
* @param: Pointer to can message.
* @retval true if matched, false if not.
*/
bool Packet_1::Choose_Parser(Can_Message *msg1, Packet_1 *pck1, States *st1)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b084      	sub	sp, #16
 8000330:	af00      	add	r7, sp, #0
 8000332:	60f8      	str	r0, [r7, #12]
 8000334:	60b9      	str	r1, [r7, #8]
 8000336:	607a      	str	r2, [r7, #4]
 8000338:	603b      	str	r3, [r7, #0]
	if(msg1->return_ID() == APPS_ID)
 800033a:	68b8      	ldr	r0, [r7, #8]
 800033c:	f7ff ff98 	bl	8000270 <_ZN11Can_Message9return_IDEv>
 8000340:	4603      	mov	r3, r0
 8000342:	2b0a      	cmp	r3, #10
 8000344:	bf0c      	ite	eq
 8000346:	2301      	moveq	r3, #1
 8000348:	2300      	movne	r3, #0
 800034a:	b2db      	uxtb	r3, r3
 800034c:	2b00      	cmp	r3, #0
 800034e:	d006      	beq.n	800035e <_ZN8Packet_113Choose_ParserEP11Can_MessagePS_P6States+0x32>
	{
		parsing_array[0]->ptr(pck1, msg1, st1);
 8000350:	4b05      	ldr	r3, [pc, #20]	; (8000368 <_ZN8Packet_113Choose_ParserEP11Can_MessagePS_P6States+0x3c>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	683a      	ldr	r2, [r7, #0]
 8000358:	68b9      	ldr	r1, [r7, #8]
 800035a:	6878      	ldr	r0, [r7, #4]
 800035c:	4798      	blx	r3
	}
return true;
 800035e:	2301      	movs	r3, #1
}
 8000360:	4618      	mov	r0, r3
 8000362:	3710      	adds	r7, #16
 8000364:	46bd      	mov	sp, r7
 8000366:	bd80      	pop	{r7, pc}
 8000368:	2000009c 	.word	0x2000009c

0800036c <_ZN8Packet_112Prepare_DataEt>:
* This function assigns data into 32-bytes long buffer, that is being forwarded to the radio.
* @param: flag_buffer variable, wich is used to indicate missing frames in packet.
* @retval Pointer to DataBuffer1.
*/
uint8_t * Packet_1::Prepare_Data(uint16_t flag_buffer)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b084      	sub	sp, #16
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
 8000374:	460b      	mov	r3, r1
 8000376:	807b      	strh	r3, [r7, #2]
	//Buffer Indetificator.
	DataBuffer1[0] = 'a';
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	2261      	movs	r2, #97	; 0x61
 800037c:	729a      	strb	r2, [r3, #10]
	//APPS
	DataBuffer1[1] = APPS>>8;
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	881b      	ldrh	r3, [r3, #0]
 8000382:	121b      	asrs	r3, r3, #8
 8000384:	b2da      	uxtb	r2, r3
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	72da      	strb	r2, [r3, #11]
	DataBuffer1[2] = APPS;
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	881b      	ldrh	r3, [r3, #0]
 800038e:	b2da      	uxtb	r2, r3
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	731a      	strb	r2, [r3, #12]
	//Motor RPM
	DataBuffer1[3] = Motor_RPM>>8;
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	885b      	ldrh	r3, [r3, #2]
 8000398:	121b      	asrs	r3, r3, #8
 800039a:	b2da      	uxtb	r2, r3
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	735a      	strb	r2, [r3, #13]
	DataBuffer1[4] = Motor_RPM;
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	885b      	ldrh	r3, [r3, #2]
 80003a4:	b2da      	uxtb	r2, r3
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	739a      	strb	r2, [r3, #14]
	//RMS Current
	DataBuffer1[5] = RMS_Current>>8;
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	889b      	ldrh	r3, [r3, #4]
 80003ae:	121b      	asrs	r3, r3, #8
 80003b0:	b2da      	uxtb	r2, r3
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	73da      	strb	r2, [r3, #15]
	DataBuffer1[6] = RMS_Current;
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	889b      	ldrh	r3, [r3, #4]
 80003ba:	b2da      	uxtb	r2, r3
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	741a      	strb	r2, [r3, #16]

	DataBuffer1[30] = flag_buffer>>8;
 80003c0:	887b      	ldrh	r3, [r7, #2]
 80003c2:	121b      	asrs	r3, r3, #8
 80003c4:	b2da      	uxtb	r2, r3
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	DataBuffer1[31] = flag_buffer;
 80003cc:	887b      	ldrh	r3, [r7, #2]
 80003ce:	b2da      	uxtb	r2, r3
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

	for(int i=1;i<33;i++)
 80003d6:	2301      	movs	r3, #1
 80003d8:	60fb      	str	r3, [r7, #12]
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	2b20      	cmp	r3, #32
 80003de:	dc18      	bgt.n	8000412 <_ZN8Packet_112Prepare_DataEt+0xa6>
		{
			DataBuffer1[i] = rand() % 255;
 80003e0:	f004 fbb2 	bl	8004b48 <rand>
 80003e4:	4602      	mov	r2, r0
 80003e6:	4b0e      	ldr	r3, [pc, #56]	; (8000420 <_ZN8Packet_112Prepare_DataEt+0xb4>)
 80003e8:	fb83 1302 	smull	r1, r3, r3, r2
 80003ec:	4413      	add	r3, r2
 80003ee:	11d9      	asrs	r1, r3, #7
 80003f0:	17d3      	asrs	r3, r2, #31
 80003f2:	1ac9      	subs	r1, r1, r3
 80003f4:	460b      	mov	r3, r1
 80003f6:	021b      	lsls	r3, r3, #8
 80003f8:	1a5b      	subs	r3, r3, r1
 80003fa:	1ad1      	subs	r1, r2, r3
 80003fc:	b2c9      	uxtb	r1, r1
 80003fe:	687a      	ldr	r2, [r7, #4]
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	4413      	add	r3, r2
 8000404:	330a      	adds	r3, #10
 8000406:	460a      	mov	r2, r1
 8000408:	701a      	strb	r2, [r3, #0]
	for(int i=1;i<33;i++)
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	3301      	adds	r3, #1
 800040e:	60fb      	str	r3, [r7, #12]
 8000410:	e7e3      	b.n	80003da <_ZN8Packet_112Prepare_DataEt+0x6e>
		}


	//Add flag_buffer to DataBuffer;
	return DataBuffer1;
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	330a      	adds	r3, #10
}
 8000416:	4618      	mov	r0, r3
 8000418:	3710      	adds	r7, #16
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	80808081 	.word	0x80808081

08000424 <_ZN8Packet_112Clear_PacketEv>:
* This function sets all fields in pck1 to 0.
* @param: none.
* @retval none.
*/
void Packet_1::Clear_Packet()
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
	memset(DataBuffer1, 0, sizeof(DataBuffer1));
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	330a      	adds	r3, #10
 8000430:	2220      	movs	r2, #32
 8000432:	2100      	movs	r1, #0
 8000434:	4618      	mov	r0, r3
 8000436:	f004 fad5 	bl	80049e4 <memset>
}
 800043a:	bf00      	nop
 800043c:	3708      	adds	r7, #8
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}

08000442 <_ZN6States19Build_State_MessageEv>:

uint8_t * States::Build_State_Message()
{
 8000442:	b480      	push	{r7}
 8000444:	b085      	sub	sp, #20
 8000446:	af00      	add	r7, sp, #0
 8000448:	6078      	str	r0, [r7, #4]
	Data_Buffer1[0] = 's';
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	2273      	movs	r2, #115	; 0x73
 800044e:	709a      	strb	r2, [r3, #2]
	for(int i=1;i<33;i++)
 8000450:	2301      	movs	r3, #1
 8000452:	60fb      	str	r3, [r7, #12]
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	2b20      	cmp	r3, #32
 8000458:	dc13      	bgt.n	8000482 <_ZN6States19Build_State_MessageEv+0x40>
	{
		Data_Buffer1[i] = (i+1)%4;
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	3301      	adds	r3, #1
 800045e:	425a      	negs	r2, r3
 8000460:	f003 0303 	and.w	r3, r3, #3
 8000464:	f002 0203 	and.w	r2, r2, #3
 8000468:	bf58      	it	pl
 800046a:	4253      	negpl	r3, r2
 800046c:	b2d9      	uxtb	r1, r3
 800046e:	687a      	ldr	r2, [r7, #4]
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	4413      	add	r3, r2
 8000474:	3302      	adds	r3, #2
 8000476:	460a      	mov	r2, r1
 8000478:	701a      	strb	r2, [r3, #0]
	for(int i=1;i<33;i++)
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	3301      	adds	r3, #1
 800047e:	60fb      	str	r3, [r7, #12]
 8000480:	e7e8      	b.n	8000454 <_ZN6States19Build_State_MessageEv+0x12>
	 *
	 *
	 *
	 *
	 */
	return Data_Buffer1;
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	3302      	adds	r3, #2
}
 8000486:	4618      	mov	r0, r3
 8000488:	3714      	adds	r7, #20
 800048a:	46bd      	mov	sp, r7
 800048c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000490:	4770      	bx	lr

08000492 <_Z11APPS_ParserP8Packet_1P11Can_MessageP6States>:

void APPS_Parser(Packet_1 *pck1, Can_Message *msg1, States *st1)
{
 8000492:	b590      	push	{r4, r7, lr}
 8000494:	b085      	sub	sp, #20
 8000496:	af00      	add	r7, sp, #0
 8000498:	60f8      	str	r0, [r7, #12]
 800049a:	60b9      	str	r1, [r7, #8]
 800049c:	607a      	str	r2, [r7, #4]
	//Update flag_buffer
	pck1->flag_buffer = pck1->flag_buffer | 0x01;
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80004a4:	f043 0301 	orr.w	r3, r3, #1
 80004a8:	b29a      	uxth	r2, r3
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	//Parse Data
	pck1->APPS = msg1->return_Data(0) << 8 | msg1->return_Data(1);
 80004b0:	2100      	movs	r1, #0
 80004b2:	68b8      	ldr	r0, [r7, #8]
 80004b4:	f7ff fee8 	bl	8000288 <_ZN11Can_Message11return_DataEi>
 80004b8:	4603      	mov	r3, r0
 80004ba:	021b      	lsls	r3, r3, #8
 80004bc:	b21c      	sxth	r4, r3
 80004be:	2101      	movs	r1, #1
 80004c0:	68b8      	ldr	r0, [r7, #8]
 80004c2:	f7ff fee1 	bl	8000288 <_ZN11Can_Message11return_DataEi>
 80004c6:	4603      	mov	r3, r0
 80004c8:	b21b      	sxth	r3, r3
 80004ca:	4323      	orrs	r3, r4
 80004cc:	b21b      	sxth	r3, r3
 80004ce:	b29a      	uxth	r2, r3
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	801a      	strh	r2, [r3, #0]
	//Parse device state
	st1->APPS_State = msg1->return_Data(8);
 80004d4:	2108      	movs	r1, #8
 80004d6:	68b8      	ldr	r0, [r7, #8]
 80004d8:	f7ff fed6 	bl	8000288 <_ZN11Can_Message11return_DataEi>
 80004dc:	4603      	mov	r3, r0
 80004de:	461a      	mov	r2, r3
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	701a      	strb	r2, [r3, #0]
}
 80004e4:	bf00      	nop
 80004e6:	3714      	adds	r7, #20
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd90      	pop	{r4, r7, pc}

080004ec <_Z13BMS_LV_ParserP8Packet_1P11Can_MessageP6States>:

void BMS_LV_Parser(Packet_1 *pck1, Can_Message *msg1, States *st1)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b085      	sub	sp, #20
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	60f8      	str	r0, [r7, #12]
 80004f4:	60b9      	str	r1, [r7, #8]
 80004f6:	607a      	str	r2, [r7, #4]



}
 80004f8:	bf00      	nop
 80004fa:	3714      	adds	r7, #20
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr

08000504 <_Z8CAN_Initv>:
* This function starts CAN protocol and activates interrupt from RX FIFO
* @param: none
* @retval none
*/
void CAN_Init()
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000508:	2102      	movs	r1, #2
 800050a:	4804      	ldr	r0, [pc, #16]	; (800051c <_Z8CAN_Initv+0x18>)
 800050c:	f001 fca8 	bl	8001e60 <HAL_CAN_ActivateNotification>
	HAL_CAN_Start(&hcan1);
 8000510:	4802      	ldr	r0, [pc, #8]	; (800051c <_Z8CAN_Initv+0x18>)
 8000512:	f001 fa4c 	bl	80019ae <HAL_CAN_Start>
}
 8000516:	bf00      	nop
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	200000dc 	.word	0x200000dc

08000520 <_ZN11Can_Message13Build_MessageEv>:
* This function receives CAN message.
* @param: none
* @retval Bool. True if its data, false if its a toggle frame.
*/
bool Can_Message::Build_Message()
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b08c      	sub	sp, #48	; 0x30
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader_HCAN1;
	uint8_t RxData[8];

	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader_HCAN1, RxData);
 8000528:	f107 030c 	add.w	r3, r7, #12
 800052c:	f107 0214 	add.w	r2, r7, #20
 8000530:	2100      	movs	r1, #0
 8000532:	480f      	ldr	r0, [pc, #60]	; (8000570 <_ZN11Can_Message13Build_MessageEv+0x50>)
 8000534:	f001 fb5a 	bl	8001bec <HAL_CAN_GetRxMessage>
	ID = RxHeader_HCAN1.StdId;
 8000538:	697b      	ldr	r3, [r7, #20]
 800053a:	b29a      	uxth	r2, r3
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	801a      	strh	r2, [r3, #0]
	if(ID == 0x001)
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	881b      	ldrh	r3, [r3, #0]
 8000544:	2b01      	cmp	r3, #1
 8000546:	d101      	bne.n	800054c <_ZN11Can_Message13Build_MessageEv+0x2c>
	{
		return false;
 8000548:	2300      	movs	r3, #0
 800054a:	e00c      	b.n	8000566 <_ZN11Can_Message13Build_MessageEv+0x46>
	}
	DLC = RxHeader_HCAN1.DLC;
 800054c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800054e:	b2da      	uxtb	r2, r3
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	709a      	strb	r2, [r3, #2]
	Data = RxData;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	f107 020c 	add.w	r2, r7, #12
 800055a:	605a      	str	r2, [r3, #4]
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800055c:	2102      	movs	r1, #2
 800055e:	4804      	ldr	r0, [pc, #16]	; (8000570 <_ZN11Can_Message13Build_MessageEv+0x50>)
 8000560:	f001 fc7e 	bl	8001e60 <HAL_CAN_ActivateNotification>
	return true;
 8000564:	2301      	movs	r3, #1
}
 8000566:	4618      	mov	r0, r3
 8000568:	3730      	adds	r7, #48	; 0x30
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	200000dc 	.word	0x200000dc

08000574 <_Z12Send_MessagemmPh>:
* @param Pointer to data buffer
*
* @retval none
*/
void Send_Message(uint32_t ID, uint32_t DLC, uint8_t *data)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b086      	sub	sp, #24
 8000578:	af00      	add	r7, sp, #0
 800057a:	60f8      	str	r0, [r7, #12]
 800057c:	60b9      	str	r1, [r7, #8]
 800057e:	607a      	str	r2, [r7, #4]
	Tx1.DLC = DLC;
 8000580:	4a09      	ldr	r2, [pc, #36]	; (80005a8 <_Z12Send_MessagemmPh+0x34>)
 8000582:	68bb      	ldr	r3, [r7, #8]
 8000584:	6113      	str	r3, [r2, #16]
	Tx1.StdId = ID;
 8000586:	4a08      	ldr	r2, [pc, #32]	; (80005a8 <_Z12Send_MessagemmPh+0x34>)
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	6013      	str	r3, [r2, #0]
	uint32_t mailbox1 = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	617b      	str	r3, [r7, #20]
	HAL_CAN_AddTxMessage(&hcan1, &Tx1, data, &mailbox1);
 8000590:	f107 0314 	add.w	r3, r7, #20
 8000594:	687a      	ldr	r2, [r7, #4]
 8000596:	4904      	ldr	r1, [pc, #16]	; (80005a8 <_Z12Send_MessagemmPh+0x34>)
 8000598:	4804      	ldr	r0, [pc, #16]	; (80005ac <_Z12Send_MessagemmPh+0x38>)
 800059a:	f001 fa4c 	bl	8001a36 <HAL_CAN_AddTxMessage>
}
 800059e:	bf00      	nop
 80005a0:	3718      	adds	r7, #24
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	200000c4 	.word	0x200000c4
 80005ac:	200000dc 	.word	0x200000dc

080005b0 <_Z41__static_initialization_and_destruction_0ii>:
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	6039      	str	r1, [r7, #0]
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d112      	bne.n	80005e6 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005c6:	4293      	cmp	r3, r2
 80005c8:	d10d      	bne.n	80005e6 <_Z41__static_initialization_and_destruction_0ii+0x36>
	Tx1.IDE = CAN_ID_STD,
 80005ca:	4b0a      	ldr	r3, [pc, #40]	; (80005f4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80005d2:	689b      	ldr	r3, [r3, #8]
};
 80005d4:	4a07      	ldr	r2, [pc, #28]	; (80005f4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80005d6:	6013      	str	r3, [r2, #0]
	Tx1.RTR = CAN_RTR_DATA,
 80005d8:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80005da:	2200      	movs	r2, #0
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	4b05      	ldr	r3, [pc, #20]	; (80005f4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80005e0:	68db      	ldr	r3, [r3, #12]
};
 80005e2:	4a04      	ldr	r2, [pc, #16]	; (80005f4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80005e4:	6053      	str	r3, [r2, #4]
}
 80005e6:	bf00      	nop
 80005e8:	370c      	adds	r7, #12
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	200000c4 	.word	0x200000c4

080005f8 <_GLOBAL__sub_I_ToggleFilterConfig>:
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
 80005fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000600:	2001      	movs	r0, #1
 8000602:	f7ff ffd5 	bl	80005b0 <_Z41__static_initialization_and_destruction_0ii>
 8000606:	bd80      	pop	{r7, pc}

08000608 <_Z9CS_Selectv>:
#define NRF24_CSN_PORT   GPIOB
#define NRF24_CSN_PIN    GPIO_PIN_6


void CS_Select (void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 800060c:	2200      	movs	r2, #0
 800060e:	2140      	movs	r1, #64	; 0x40
 8000610:	4802      	ldr	r0, [pc, #8]	; (800061c <_Z9CS_Selectv+0x14>)
 8000612:	f001 ff07 	bl	8002424 <HAL_GPIO_WritePin>
}
 8000616:	bf00      	nop
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	48000400 	.word	0x48000400

08000620 <_Z11CS_UnSelectv>:

void CS_UnSelect (void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 8000624:	2201      	movs	r2, #1
 8000626:	2140      	movs	r1, #64	; 0x40
 8000628:	4802      	ldr	r0, [pc, #8]	; (8000634 <_Z11CS_UnSelectv+0x14>)
 800062a:	f001 fefb 	bl	8002424 <HAL_GPIO_WritePin>
}
 800062e:	bf00      	nop
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	48000400 	.word	0x48000400

08000638 <_Z9CE_Enablev>:


void CE_Enable (void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 800063c:	2201      	movs	r2, #1
 800063e:	2180      	movs	r1, #128	; 0x80
 8000640:	4802      	ldr	r0, [pc, #8]	; (800064c <_Z9CE_Enablev+0x14>)
 8000642:	f001 feef 	bl	8002424 <HAL_GPIO_WritePin>
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	48000800 	.word	0x48000800

08000650 <_Z10CE_Disablev>:

void CE_Disable (void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 8000654:	2200      	movs	r2, #0
 8000656:	2180      	movs	r1, #128	; 0x80
 8000658:	4802      	ldr	r0, [pc, #8]	; (8000664 <_Z10CE_Disablev+0x14>)
 800065a:	f001 fee3 	bl	8002424 <HAL_GPIO_WritePin>
}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	48000800 	.word	0x48000800

08000668 <_Z14nrf24_WriteReghh>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	460a      	mov	r2, r1
 8000672:	71fb      	strb	r3, [r7, #7]
 8000674:	4613      	mov	r3, r2
 8000676:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	f043 0320 	orr.w	r3, r3, #32
 800067e:	b2db      	uxtb	r3, r3
 8000680:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 8000682:	79bb      	ldrb	r3, [r7, #6]
 8000684:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000686:	f7ff ffbf 	bl	8000608 <_Z9CS_Selectv>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 800068a:	f107 010c 	add.w	r1, r7, #12
 800068e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000692:	2202      	movs	r2, #2
 8000694:	4804      	ldr	r0, [pc, #16]	; (80006a8 <_Z14nrf24_WriteReghh+0x40>)
 8000696:	f002 fd98 	bl	80031ca <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800069a:	f7ff ffc1 	bl	8000620 <_Z11CS_UnSelectv>
}
 800069e:	bf00      	nop
 80006a0:	3710      	adds	r7, #16
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	20000104 	.word	0x20000104

080006ac <_Z19nrf24_WriteRegMultihPhi>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b086      	sub	sp, #24
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	60b9      	str	r1, [r7, #8]
 80006b6:	607a      	str	r2, [r7, #4]
 80006b8:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 80006ba:	7bfb      	ldrb	r3, [r7, #15]
 80006bc:	f043 0320 	orr.w	r3, r3, #32
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 80006c4:	f7ff ffa0 	bl	8000608 <_Z9CS_Selectv>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 80006c8:	f107 0114 	add.w	r1, r7, #20
 80006cc:	2364      	movs	r3, #100	; 0x64
 80006ce:	2201      	movs	r2, #1
 80006d0:	4808      	ldr	r0, [pc, #32]	; (80006f4 <_Z19nrf24_WriteRegMultihPhi+0x48>)
 80006d2:	f002 fd7a 	bl	80031ca <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	b29a      	uxth	r2, r3
 80006da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006de:	68b9      	ldr	r1, [r7, #8]
 80006e0:	4804      	ldr	r0, [pc, #16]	; (80006f4 <_Z19nrf24_WriteRegMultihPhi+0x48>)
 80006e2:	f002 fd72 	bl	80031ca <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80006e6:	f7ff ff9b 	bl	8000620 <_Z11CS_UnSelectv>
}
 80006ea:	bf00      	nop
 80006ec:	3718      	adds	r7, #24
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20000104 	.word	0x20000104

080006f8 <_Z13nrf24_ReadRegh>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 8000702:	2300      	movs	r3, #0
 8000704:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000706:	f7ff ff7f 	bl	8000608 <_Z9CS_Selectv>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 800070a:	1df9      	adds	r1, r7, #7
 800070c:	2364      	movs	r3, #100	; 0x64
 800070e:	2201      	movs	r2, #1
 8000710:	4808      	ldr	r0, [pc, #32]	; (8000734 <_Z13nrf24_ReadRegh+0x3c>)
 8000712:	f002 fd5a 	bl	80031ca <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 8000716:	f107 010f 	add.w	r1, r7, #15
 800071a:	2364      	movs	r3, #100	; 0x64
 800071c:	2201      	movs	r2, #1
 800071e:	4805      	ldr	r0, [pc, #20]	; (8000734 <_Z13nrf24_ReadRegh+0x3c>)
 8000720:	f002 fec1 	bl	80034a6 <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000724:	f7ff ff7c 	bl	8000620 <_Z11CS_UnSelectv>

	return data;
 8000728:	7bfb      	ldrb	r3, [r7, #15]
}
 800072a:	4618      	mov	r0, r3
 800072c:	3710      	adds	r7, #16
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20000104 	.word	0x20000104

08000738 <_Z10nrfsendCmdh>:
}


// send the command to the NRF
void nrfsendCmd (uint8_t cmd)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	71fb      	strb	r3, [r7, #7]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000742:	f7ff ff61 	bl	8000608 <_Z9CS_Selectv>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 8000746:	1df9      	adds	r1, r7, #7
 8000748:	2364      	movs	r3, #100	; 0x64
 800074a:	2201      	movs	r2, #1
 800074c:	4804      	ldr	r0, [pc, #16]	; (8000760 <_Z10nrfsendCmdh+0x28>)
 800074e:	f002 fd3c 	bl	80031ca <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000752:	f7ff ff65 	bl	8000620 <_Z11CS_UnSelectv>
}
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000104 	.word	0x20000104

08000764 <_Z11nrf24_reseth>:

void nrf24_reset(uint8_t REG)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b088      	sub	sp, #32
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	2b07      	cmp	r3, #7
 8000772:	d104      	bne.n	800077e <_Z11nrf24_reseth+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x00);
 8000774:	2100      	movs	r1, #0
 8000776:	2007      	movs	r0, #7
 8000778:	f7ff ff76 	bl	8000668 <_Z14nrf24_WriteReghh>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 800077c:	e094      	b.n	80008a8 <_Z11nrf24_reseth+0x144>
	else if (REG == FIFO_STATUS)
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	2b17      	cmp	r3, #23
 8000782:	d104      	bne.n	800078e <_Z11nrf24_reseth+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 8000784:	2111      	movs	r1, #17
 8000786:	2017      	movs	r0, #23
 8000788:	f7ff ff6e 	bl	8000668 <_Z14nrf24_WriteReghh>
}
 800078c:	e08c      	b.n	80008a8 <_Z11nrf24_reseth+0x144>
	nrf24_WriteReg(CONFIG, 0x08);
 800078e:	2108      	movs	r1, #8
 8000790:	2000      	movs	r0, #0
 8000792:	f7ff ff69 	bl	8000668 <_Z14nrf24_WriteReghh>
	nrf24_WriteReg(EN_AA, 0x3F);
 8000796:	213f      	movs	r1, #63	; 0x3f
 8000798:	2001      	movs	r0, #1
 800079a:	f7ff ff65 	bl	8000668 <_Z14nrf24_WriteReghh>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 800079e:	2103      	movs	r1, #3
 80007a0:	2002      	movs	r0, #2
 80007a2:	f7ff ff61 	bl	8000668 <_Z14nrf24_WriteReghh>
	nrf24_WriteReg(SETUP_AW, 0x03);
 80007a6:	2103      	movs	r1, #3
 80007a8:	2003      	movs	r0, #3
 80007aa:	f7ff ff5d 	bl	8000668 <_Z14nrf24_WriteReghh>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 80007ae:	2103      	movs	r1, #3
 80007b0:	2004      	movs	r0, #4
 80007b2:	f7ff ff59 	bl	8000668 <_Z14nrf24_WriteReghh>
	nrf24_WriteReg(RF_CH, 0x02);
 80007b6:	2102      	movs	r1, #2
 80007b8:	2005      	movs	r0, #5
 80007ba:	f7ff ff55 	bl	8000668 <_Z14nrf24_WriteReghh>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 80007be:	210e      	movs	r1, #14
 80007c0:	2006      	movs	r0, #6
 80007c2:	f7ff ff51 	bl	8000668 <_Z14nrf24_WriteReghh>
	nrf24_WriteReg(STATUS, 0x00);
 80007c6:	2100      	movs	r1, #0
 80007c8:	2007      	movs	r0, #7
 80007ca:	f7ff ff4d 	bl	8000668 <_Z14nrf24_WriteReghh>
	nrf24_WriteReg(STATUS, 0b01110000);
 80007ce:	2170      	movs	r1, #112	; 0x70
 80007d0:	2007      	movs	r0, #7
 80007d2:	f7ff ff49 	bl	8000668 <_Z14nrf24_WriteReghh>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 80007d6:	2100      	movs	r1, #0
 80007d8:	2008      	movs	r0, #8
 80007da:	f7ff ff45 	bl	8000668 <_Z14nrf24_WriteReghh>
	nrf24_WriteReg(CD, 0x00);
 80007de:	2100      	movs	r1, #0
 80007e0:	2009      	movs	r0, #9
 80007e2:	f7ff ff41 	bl	8000668 <_Z14nrf24_WriteReghh>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80007e6:	4a32      	ldr	r2, [pc, #200]	; (80008b0 <_Z11nrf24_reseth+0x14c>)
 80007e8:	f107 0318 	add.w	r3, r7, #24
 80007ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007f0:	6018      	str	r0, [r3, #0]
 80007f2:	3304      	adds	r3, #4
 80007f4:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 80007f6:	f107 0318 	add.w	r3, r7, #24
 80007fa:	2205      	movs	r2, #5
 80007fc:	4619      	mov	r1, r3
 80007fe:	200a      	movs	r0, #10
 8000800:	f7ff ff54 	bl	80006ac <_Z19nrf24_WriteRegMultihPhi>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8000804:	4a2b      	ldr	r2, [pc, #172]	; (80008b4 <_Z11nrf24_reseth+0x150>)
 8000806:	f107 0310 	add.w	r3, r7, #16
 800080a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800080e:	6018      	str	r0, [r3, #0]
 8000810:	3304      	adds	r3, #4
 8000812:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 8000814:	f107 0310 	add.w	r3, r7, #16
 8000818:	2205      	movs	r2, #5
 800081a:	4619      	mov	r1, r3
 800081c:	200b      	movs	r0, #11
 800081e:	f7ff ff45 	bl	80006ac <_Z19nrf24_WriteRegMultihPhi>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 8000822:	21c3      	movs	r1, #195	; 0xc3
 8000824:	200c      	movs	r0, #12
 8000826:	f7ff ff1f 	bl	8000668 <_Z14nrf24_WriteReghh>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 800082a:	21c4      	movs	r1, #196	; 0xc4
 800082c:	200d      	movs	r0, #13
 800082e:	f7ff ff1b 	bl	8000668 <_Z14nrf24_WriteReghh>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 8000832:	21c5      	movs	r1, #197	; 0xc5
 8000834:	200e      	movs	r0, #14
 8000836:	f7ff ff17 	bl	8000668 <_Z14nrf24_WriteReghh>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 800083a:	21c6      	movs	r1, #198	; 0xc6
 800083c:	200f      	movs	r0, #15
 800083e:	f7ff ff13 	bl	8000668 <_Z14nrf24_WriteReghh>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000842:	4a1b      	ldr	r2, [pc, #108]	; (80008b0 <_Z11nrf24_reseth+0x14c>)
 8000844:	f107 0308 	add.w	r3, r7, #8
 8000848:	e892 0003 	ldmia.w	r2, {r0, r1}
 800084c:	6018      	str	r0, [r3, #0]
 800084e:	3304      	adds	r3, #4
 8000850:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 8000852:	f107 0308 	add.w	r3, r7, #8
 8000856:	2205      	movs	r2, #5
 8000858:	4619      	mov	r1, r3
 800085a:	2010      	movs	r0, #16
 800085c:	f7ff ff26 	bl	80006ac <_Z19nrf24_WriteRegMultihPhi>
	nrf24_WriteReg(RX_PW_P0, 0);
 8000860:	2100      	movs	r1, #0
 8000862:	2011      	movs	r0, #17
 8000864:	f7ff ff00 	bl	8000668 <_Z14nrf24_WriteReghh>
	nrf24_WriteReg(RX_PW_P1, 0);
 8000868:	2100      	movs	r1, #0
 800086a:	2012      	movs	r0, #18
 800086c:	f7ff fefc 	bl	8000668 <_Z14nrf24_WriteReghh>
	nrf24_WriteReg(RX_PW_P2, 0);
 8000870:	2100      	movs	r1, #0
 8000872:	2013      	movs	r0, #19
 8000874:	f7ff fef8 	bl	8000668 <_Z14nrf24_WriteReghh>
	nrf24_WriteReg(RX_PW_P3, 0);
 8000878:	2100      	movs	r1, #0
 800087a:	2014      	movs	r0, #20
 800087c:	f7ff fef4 	bl	8000668 <_Z14nrf24_WriteReghh>
	nrf24_WriteReg(RX_PW_P4, 0);
 8000880:	2100      	movs	r1, #0
 8000882:	2015      	movs	r0, #21
 8000884:	f7ff fef0 	bl	8000668 <_Z14nrf24_WriteReghh>
	nrf24_WriteReg(RX_PW_P5, 0);
 8000888:	2100      	movs	r1, #0
 800088a:	2016      	movs	r0, #22
 800088c:	f7ff feec 	bl	8000668 <_Z14nrf24_WriteReghh>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 8000890:	2111      	movs	r1, #17
 8000892:	2017      	movs	r0, #23
 8000894:	f7ff fee8 	bl	8000668 <_Z14nrf24_WriteReghh>
	nrf24_WriteReg(DYNPD, 0);
 8000898:	2100      	movs	r1, #0
 800089a:	201c      	movs	r0, #28
 800089c:	f7ff fee4 	bl	8000668 <_Z14nrf24_WriteReghh>
	nrf24_WriteReg(FEATURE, 0);
 80008a0:	2100      	movs	r1, #0
 80008a2:	201d      	movs	r0, #29
 80008a4:	f7ff fee0 	bl	8000668 <_Z14nrf24_WriteReghh>
}
 80008a8:	bf00      	nop
 80008aa:	3720      	adds	r7, #32
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	080059f0 	.word	0x080059f0
 80008b4:	080059f8 	.word	0x080059f8

080008b8 <_Z10NRF24_Initv>:




void NRF24_Init (void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 80008be:	f7ff fec7 	bl	8000650 <_Z10CE_Disablev>
	// reset everything
	nrf24_reset (0);
 80008c2:	2000      	movs	r0, #0
 80008c4:	f7ff ff4e 	bl	8000764 <_Z11nrf24_reseth>
	//old works
	nrf24_WriteReg (CONFIG, 0);  // will be configured later
 80008c8:	2100      	movs	r1, #0
 80008ca:	2000      	movs	r0, #0
 80008cc:	f7ff fecc 	bl	8000668 <_Z14nrf24_WriteReghh>
	nrf24_WriteReg (EN_AA, 0);  // No Auto ACK
 80008d0:	2100      	movs	r1, #0
 80008d2:	2001      	movs	r0, #1
 80008d4:	f7ff fec8 	bl	8000668 <_Z14nrf24_WriteReghh>
	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 80008d8:	2100      	movs	r1, #0
 80008da:	2002      	movs	r0, #2
 80008dc:	f7ff fec4 	bl	8000668 <_Z14nrf24_WriteReghh>
	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 80008e0:	2103      	movs	r1, #3
 80008e2:	2003      	movs	r0, #3
 80008e4:	f7ff fec0 	bl	8000668 <_Z14nrf24_WriteReghh>
	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 80008e8:	2100      	movs	r1, #0
 80008ea:	2004      	movs	r0, #4
 80008ec:	f7ff febc 	bl	8000668 <_Z14nrf24_WriteReghh>
	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 80008f0:	2100      	movs	r1, #0
 80008f2:	2005      	movs	r0, #5
 80008f4:	f7ff feb8 	bl	8000668 <_Z14nrf24_WriteReghh>
	nrf24_WriteReg (RF_SETUP, 0x0F);   // Power= 0db, data rate = 2Mbps
 80008f8:	210f      	movs	r1, #15
 80008fa:	2006      	movs	r0, #6
 80008fc:	f7ff feb4 	bl	8000668 <_Z14nrf24_WriteReghh>
	//NEW
	//AutoACK works
	nrf24_WriteReg(EN_AA, 		0b00000111);  // AutoACK
 8000900:	2107      	movs	r1, #7
 8000902:	2001      	movs	r0, #1
 8000904:	f7ff feb0 	bl	8000668 <_Z14nrf24_WriteReghh>
	nrf24_WriteReg(SETUP_RETR, 	0b00011111);
 8000908:	211f      	movs	r1, #31
 800090a:	2004      	movs	r0, #4
 800090c:	f7ff feac 	bl	8000668 <_Z14nrf24_WriteReghh>
	nrf24_WriteReg (EN_RXADDR, 	0b00000111);
 8000910:	2107      	movs	r1, #7
 8000912:	2002      	movs	r0, #2
 8000914:	f7ff fea8 	bl	8000668 <_Z14nrf24_WriteReghh>
	//Activate Features
	uint8_t CmdToSend    = ACTIVATE;
 8000918:	2350      	movs	r3, #80	; 0x50
 800091a:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(NRF24_SPI, &CmdToSend,     1, 100);
 800091c:	1df9      	adds	r1, r7, #7
 800091e:	2364      	movs	r3, #100	; 0x64
 8000920:	2201      	movs	r2, #1
 8000922:	480e      	ldr	r0, [pc, #56]	; (800095c <_Z10NRF24_Initv+0xa4>)
 8000924:	f002 fc51 	bl	80031ca <HAL_SPI_Transmit>
	CmdToSend    = ACT_FEATURE;
 8000928:	2373      	movs	r3, #115	; 0x73
 800092a:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(NRF24_SPI, &CmdToSend,  1, 100);
 800092c:	1df9      	adds	r1, r7, #7
 800092e:	2364      	movs	r3, #100	; 0x64
 8000930:	2201      	movs	r2, #1
 8000932:	480a      	ldr	r0, [pc, #40]	; (800095c <_Z10NRF24_Initv+0xa4>)
 8000934:	f002 fc49 	bl	80031ca <HAL_SPI_Transmit>
	//AutoACK with payload
	nrf24_WriteReg(FEATURE, 0b00000111);
 8000938:	2107      	movs	r1, #7
 800093a:	201d      	movs	r0, #29
 800093c:	f7ff fe94 	bl	8000668 <_Z14nrf24_WriteReghh>
	nrf24_ReadReg(FEATURE);
 8000940:	201d      	movs	r0, #29
 8000942:	f7ff fed9 	bl	80006f8 <_Z13nrf24_ReadRegh>
	nrf24_WriteReg(DYNPD, 	0b00000111);
 8000946:	2107      	movs	r1, #7
 8000948:	201c      	movs	r0, #28
 800094a:	f7ff fe8d 	bl	8000668 <_Z14nrf24_WriteReghh>
	// Enable the chip after configuring the device
	CE_Enable();
 800094e:	f7ff fe73 	bl	8000638 <_Z9CE_Enablev>
}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000104 	.word	0x20000104

08000960 <_Z12NRF24_TxModePhh>:


// set up the Tx mode

void NRF24_TxMode (uint8_t *Address, uint8_t channel)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	460b      	mov	r3, r1
 800096a:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 800096c:	f7ff fe70 	bl	8000650 <_Z10CE_Disablev>

	//nrf24_Readreg(CONFIG);

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 8000970:	78fb      	ldrb	r3, [r7, #3]
 8000972:	4619      	mov	r1, r3
 8000974:	2005      	movs	r0, #5
 8000976:	f7ff fe77 	bl	8000668 <_Z14nrf24_WriteReghh>

	nrf24_WriteRegMulti(TX_ADDR, Address, 5);  // Write the TX address
 800097a:	2205      	movs	r2, #5
 800097c:	6879      	ldr	r1, [r7, #4]
 800097e:	2010      	movs	r0, #16
 8000980:	f7ff fe94 	bl	80006ac <_Z19nrf24_WriteRegMultihPhi>
	nrf24_WriteRegMulti(RX_ADDR_P0, Address, 5);
 8000984:	2205      	movs	r2, #5
 8000986:	6879      	ldr	r1, [r7, #4]
 8000988:	200a      	movs	r0, #10
 800098a:	f7ff fe8f 	bl	80006ac <_Z19nrf24_WriteRegMultihPhi>
	nrf24_WriteRegMulti(RX_ADDR_P1, Address, 5);
 800098e:	2205      	movs	r2, #5
 8000990:	6879      	ldr	r1, [r7, #4]
 8000992:	200b      	movs	r0, #11
 8000994:	f7ff fe8a 	bl	80006ac <_Z19nrf24_WriteRegMultihPhi>

	// power up the device
	uint8_t config = nrf24_ReadReg(CONFIG);
 8000998:	2000      	movs	r0, #0
 800099a:	f7ff fead 	bl	80006f8 <_Z13nrf24_ReadRegh>
 800099e:	4603      	mov	r3, r0
 80009a0:	73fb      	strb	r3, [r7, #15]
	config = config | (1<<1);   // write 1 in the PWR_UP bit
 80009a2:	7bfb      	ldrb	r3, [r7, #15]
 80009a4:	f043 0302 	orr.w	r3, r3, #2
 80009a8:	73fb      	strb	r3, [r7, #15]
	config = config & (0xF2);    // write 0 in the PRIM_RX, and 1 in the PWR_UP, and all other bits are masked
 80009aa:	7bfb      	ldrb	r3, [r7, #15]
 80009ac:	f023 030d 	bic.w	r3, r3, #13
 80009b0:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg (CONFIG, config);
 80009b2:	7bfb      	ldrb	r3, [r7, #15]
 80009b4:	4619      	mov	r1, r3
 80009b6:	2000      	movs	r0, #0
 80009b8:	f7ff fe56 	bl	8000668 <_Z14nrf24_WriteReghh>
	//nrf24_ReadReg (CONFIG);

	// Enable the chip after configuring the device
	CE_Enable();
 80009bc:	f7ff fe3c 	bl	8000638 <_Z9CE_Enablev>
}
 80009c0:	bf00      	nop
 80009c2:	3710      	adds	r7, #16
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <_Z24Clear_retrasmission_flagv>:

void Clear_retrasmission_flag()
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
	CE_Disable();
 80009cc:	f7ff fe40 	bl	8000650 <_Z10CE_Disablev>
	nrf24_reset(0x00);
 80009d0:	2000      	movs	r0, #0
 80009d2:	f7ff fec7 	bl	8000764 <_Z11nrf24_reseth>
	NRF24_Init();
 80009d6:	f7ff ff6f 	bl	80008b8 <_Z10NRF24_Initv>
	nrf24_WriteReg(STATUS, 0b00011110);
 80009da:	211e      	movs	r1, #30
 80009dc:	2007      	movs	r0, #7
 80009de:	f7ff fe43 	bl	8000668 <_Z14nrf24_WriteReghh>
	NRF24_TxMode(TxAddress, 10);
 80009e2:	210a      	movs	r1, #10
 80009e4:	4803      	ldr	r0, [pc, #12]	; (80009f4 <_Z24Clear_retrasmission_flagv+0x2c>)
 80009e6:	f7ff ffbb 	bl	8000960 <_Z12NRF24_TxModePhh>
	CE_Enable();
 80009ea:	f7ff fe25 	bl	8000638 <_Z9CE_Enablev>
}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20000000 	.word	0x20000000

080009f8 <_Z14NRF24_TransmitPh>:
uint8_t NRF24_Transmit (uint8_t *data1)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 8000a00:	2300      	movs	r3, #0
 8000a02:	737b      	strb	r3, [r7, #13]
	uint8_t tell_me = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	73fb      	strb	r3, [r7, #15]
	// select the device
 	//CS_Select();
	tell_me = nrf24_ReadReg(FIFO_STATUS);
 8000a08:	2017      	movs	r0, #23
 8000a0a:	f7ff fe75 	bl	80006f8 <_Z13nrf24_ReadRegh>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	73fb      	strb	r3, [r7, #15]
	tell_me = nrf24_ReadReg(STATUS);
 8000a12:	2007      	movs	r0, #7
 8000a14:	f7ff fe70 	bl	80006f8 <_Z13nrf24_ReadRegh>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	73fb      	strb	r3, [r7, #15]
	tell_me = nrf24_ReadReg(CONFIG);
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	f7ff fe6b 	bl	80006f8 <_Z13nrf24_ReadRegh>
 8000a22:	4603      	mov	r3, r0
 8000a24:	73fb      	strb	r3, [r7, #15]
	CS_Select();
 8000a26:	f7ff fdef 	bl	8000608 <_Z9CS_Selectv>
	// payload command
	cmdtosend = W_TX_PAYLOAD;
 8000a2a:	23a0      	movs	r3, #160	; 0xa0
 8000a2c:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 8000a2e:	f107 010d 	add.w	r1, r7, #13
 8000a32:	2364      	movs	r3, #100	; 0x64
 8000a34:	2201      	movs	r2, #1
 8000a36:	481f      	ldr	r0, [pc, #124]	; (8000ab4 <_Z14NRF24_TransmitPh+0xbc>)
 8000a38:	f002 fbc7 	bl	80031ca <HAL_SPI_Transmit>
	// send the payload
	HAL_SPI_Transmit(NRF24_SPI, data1, 32, 1000);
 8000a3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a40:	2220      	movs	r2, #32
 8000a42:	6879      	ldr	r1, [r7, #4]
 8000a44:	481b      	ldr	r0, [pc, #108]	; (8000ab4 <_Z14NRF24_TransmitPh+0xbc>)
 8000a46:	f002 fbc0 	bl	80031ca <HAL_SPI_Transmit>
	// Transmit packet
	CS_UnSelect();
 8000a4a:	f7ff fde9 	bl	8000620 <_Z11CS_UnSelectv>

	HAL_Delay(1);
 8000a4e:	2001      	movs	r0, #1
 8000a50:	f000 fe8e 	bl	8001770 <HAL_Delay>

	uint8_t fifostatus = nrf24_ReadReg(FIFO_STATUS);
 8000a54:	2017      	movs	r0, #23
 8000a56:	f7ff fe4f 	bl	80006f8 <_Z13nrf24_ReadRegh>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	73bb      	strb	r3, [r7, #14]
	tell_me = fifostatus;
 8000a5e:	7bbb      	ldrb	r3, [r7, #14]
 8000a60:	73fb      	strb	r3, [r7, #15]
	tell_me = nrf24_ReadReg(STATUS);
 8000a62:	2007      	movs	r0, #7
 8000a64:	f7ff fe48 	bl	80006f8 <_Z13nrf24_ReadRegh>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	73fb      	strb	r3, [r7, #15]
	tell_me = nrf24_ReadReg(CONFIG);
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	f7ff fe43 	bl	80006f8 <_Z13nrf24_ReadRegh>
 8000a72:	4603      	mov	r3, r0
 8000a74:	73fb      	strb	r3, [r7, #15]
	tell_me = nrf24_ReadReg(OBSERVE_TX);
 8000a76:	2008      	movs	r0, #8
 8000a78:	f7ff fe3e 	bl	80006f8 <_Z13nrf24_ReadRegh>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	73fb      	strb	r3, [r7, #15]
	// check the fourth bit of FIFO_STATUS to know if the TX fifo is empty
	if ((fifostatus&(1<<4)) && (!(fifostatus&(1<<3))))
 8000a80:	7bbb      	ldrb	r3, [r7, #14]
 8000a82:	f003 0310 	and.w	r3, r3, #16
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d00f      	beq.n	8000aaa <_Z14NRF24_TransmitPh+0xb2>
 8000a8a:	7bbb      	ldrb	r3, [r7, #14]
 8000a8c:	f003 0308 	and.w	r3, r3, #8
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d10a      	bne.n	8000aaa <_Z14NRF24_TransmitPh+0xb2>
	{
		cmdtosend = FLUSH_TX;
 8000a94:	23e1      	movs	r3, #225	; 0xe1
 8000a96:	737b      	strb	r3, [r7, #13]
		nrfsendCmd(cmdtosend);
 8000a98:	7b7b      	ldrb	r3, [r7, #13]
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f7ff fe4c 	bl	8000738 <_Z10nrfsendCmdh>
		// reset FIFO_STATUS
		nrf24_reset (FIFO_STATUS);
 8000aa0:	2017      	movs	r0, #23
 8000aa2:	f7ff fe5f 	bl	8000764 <_Z11nrf24_reseth>
		return 1;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	e000      	b.n	8000aac <_Z14NRF24_TransmitPh+0xb4>
	}
	return 0;
 8000aaa:	2300      	movs	r3, #0
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3710      	adds	r7, #16
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20000104 	.word	0x20000104

08000ab8 <_Z25Setup_Radio_As_Transmiterv>:
* This function turns on the radio, initilize it and set up as transmiter
* @param: none
* @retval true if everything is ok, false if error occured.
*/
bool Setup_Radio_As_Transmiter()
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
	NRF24_Init();
 8000abc:	f7ff fefc 	bl	80008b8 <_Z10NRF24_Initv>
	NRF24_TxMode(TxAddress, 10);
 8000ac0:	210a      	movs	r1, #10
 8000ac2:	4803      	ldr	r0, [pc, #12]	; (8000ad0 <_Z25Setup_Radio_As_Transmiterv+0x18>)
 8000ac4:	f7ff ff4c 	bl	8000960 <_Z12NRF24_TxModePhh>
	return true;
 8000ac8:	2301      	movs	r3, #1
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20000000 	.word	0x20000000

08000ad4 <_Z9Send_DataPh>:
* This function Sends the data packet to the radio, wich trigger transmission.
* @param: Pointer to the data packet
* @retval true if everything is ok, false if error occured.
*/
bool Send_Data(uint8_t* pData)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
	if(NRF24_Transmit(pData) == 1)
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	f7ff ff8b 	bl	80009f8 <_Z14NRF24_TransmitPh>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	bf0c      	ite	eq
 8000ae8:	2301      	moveq	r3, #1
 8000aea:	2300      	movne	r3, #0
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d00d      	beq.n	8000b0e <_Z9Send_DataPh+0x3a>
	{
		HAL_GPIO_WritePin(led_dzia_a_GPIO_Port, led_dzia_a_Pin, GPIO_PIN_SET);
 8000af2:	2201      	movs	r2, #1
 8000af4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000af8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000afc:	f001 fc92 	bl	8002424 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_nie_dziala_GPIO_Port, led_nie_dziala_Pin, GPIO_PIN_RESET);
 8000b00:	2200      	movs	r2, #0
 8000b02:	2120      	movs	r1, #32
 8000b04:	4808      	ldr	r0, [pc, #32]	; (8000b28 <_Z9Send_DataPh+0x54>)
 8000b06:	f001 fc8d 	bl	8002424 <HAL_GPIO_WritePin>
		return true;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	e007      	b.n	8000b1e <_Z9Send_DataPh+0x4a>
	}
	else
	{
		HAL_GPIO_WritePin(led_nie_dziala_GPIO_Port, led_nie_dziala_Pin, GPIO_PIN_SET);
 8000b0e:	2201      	movs	r2, #1
 8000b10:	2120      	movs	r1, #32
 8000b12:	4805      	ldr	r0, [pc, #20]	; (8000b28 <_Z9Send_DataPh+0x54>)
 8000b14:	f001 fc86 	bl	8002424 <HAL_GPIO_WritePin>
		Clear_retrasmission_flag();
 8000b18:	f7ff ff56 	bl	80009c8 <_Z24Clear_retrasmission_flagv>
		return false;
 8000b1c:	2300      	movs	r3, #0
	}
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	48000400 	.word	0x48000400

08000b2c <_ZN11Can_MessageC1Ev>:
	Can_Message()
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
		ID   = 0;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2200      	movs	r2, #0
 8000b38:	801a      	strh	r2, [r3, #0]
		DLC  = 0;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	709a      	strb	r2, [r3, #2]
		Data = 0;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2200      	movs	r2, #0
 8000b44:	605a      	str	r2, [r3, #4]
	}
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4618      	mov	r0, r3
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr

08000b54 <_ZN8Packet_1C1Ev>:
	Packet_1()
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
	{
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	330a      	adds	r3, #10
 8000b60:	2220      	movs	r2, #32
 8000b62:	2100      	movs	r1, #0
 8000b64:	4618      	mov	r0, r3
 8000b66:	f003 ff3d 	bl	80049e4 <memset>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	332a      	adds	r3, #42	; 0x2a
 8000b6e:	2220      	movs	r2, #32
 8000b70:	2100      	movs	r1, #0
 8000b72:	4618      	mov	r0, r3
 8000b74:	f003 ff36 	bl	80049e4 <memset>
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	334a      	adds	r3, #74	; 0x4a
 8000b7c:	2220      	movs	r2, #32
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4618      	mov	r0, r3
 8000b82:	f003 ff2f 	bl	80049e4 <memset>
		APPS = 0;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2200      	movs	r2, #0
 8000b8a:	801a      	strh	r2, [r3, #0]
		Motor_RPM = 0;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2200      	movs	r2, #0
 8000b90:	805a      	strh	r2, [r3, #2]
		RMS_Current = 0;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2200      	movs	r2, #0
 8000b96:	809a      	strh	r2, [r3, #4]
		Status = 0;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	80da      	strh	r2, [r3, #6]
		Temperature_1 = 0;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	721a      	strb	r2, [r3, #8]
		Temperature_2 = 0;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	725a      	strb	r2, [r3, #9]
		DataBuffer1[32] = { 0 };
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2200      	movs	r2, #0
 8000bae:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		DataBuffer2[32] = { 0 };
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
		DataBuffer3[32] = { 0 };
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
		flag_buffer = 0;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	}
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <_ZN8Packet_118Return_flag_bufferEv>:
	uint16_t Return_flag_buffer()
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
		return flag_buffer;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
	}
 8000be2:	4618      	mov	r0, r3
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr

08000bee <_ZN6StatesC1Ev>:
	States()
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	b082      	sub	sp, #8
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	6078      	str	r0, [r7, #4]
	{
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	3302      	adds	r3, #2
 8000bfa:	2220      	movs	r2, #32
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f003 fef0 	bl	80049e4 <memset>
	}
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	4618      	mov	r0, r3
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
	...

08000c10 <_Z4SendP8Packet_1P6States>:
static void MX_SPI1_Init(void);
static void MX_TIM2_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */
void Send(Packet_1 *pck1, States *st1)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	6039      	str	r1, [r7, #0]
	HAL_TIM_Base_Stop(&htim2);
 8000c1a:	4814      	ldr	r0, [pc, #80]	; (8000c6c <_Z4SendP8Packet_1P6States+0x5c>)
 8000c1c:	f003 fa02 	bl	8004024 <HAL_TIM_Base_Stop>
	if(Send_Data(pck1->Prepare_Data(pck1->Return_flag_buffer())) == false)
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f7ff ffd7 	bl	8000bd4 <_ZN8Packet_118Return_flag_bufferEv>
 8000c26:	4603      	mov	r3, r0
 8000c28:	4619      	mov	r1, r3
 8000c2a:	6878      	ldr	r0, [r7, #4]
 8000c2c:	f7ff fb9e 	bl	800036c <_ZN8Packet_112Prepare_DataEt>
 8000c30:	4603      	mov	r3, r0
 8000c32:	4618      	mov	r0, r3
 8000c34:	f7ff ff4e 	bl	8000ad4 <_Z9Send_DataPh>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	bf0c      	ite	eq
 8000c3e:	2301      	moveq	r3, #1
 8000c40:	2300      	movne	r3, #0
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d106      	bne.n	8000c56 <_Z4SendP8Packet_1P6States+0x46>
		//Flash yellow LED. Maybe send telemetry status.
	}
	else
	{
		//Send States
		Send_Data(st1->Build_State_Message());
 8000c48:	6838      	ldr	r0, [r7, #0]
 8000c4a:	f7ff fbfa 	bl	8000442 <_ZN6States19Build_State_MessageEv>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff ff3f 	bl	8000ad4 <_Z9Send_DataPh>
	}
	pck1->Clear_Packet();
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	f7ff fbe4 	bl	8000424 <_ZN8Packet_112Clear_PacketEv>
	HAL_TIM_Base_Start(&htim2);
 8000c5c:	4803      	ldr	r0, [pc, #12]	; (8000c6c <_Z4SendP8Packet_1P6States+0x5c>)
 8000c5e:	f003 f979 	bl	8003f54 <HAL_TIM_Base_Start>
}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000168 	.word	0x20000168

08000c70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c70:	b590      	push	{r4, r7, lr}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c76:	f000 fcff 	bl	8001678 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c7a:	f000 f899 	bl	8000db0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c7e:	f000 fa31 	bl	80010e4 <_ZL12MX_GPIO_Initv>
  MX_CAN1_Init();
 8000c82:	f000 f8f5 	bl	8000e70 <_ZL12MX_CAN1_Initv>
  MX_SPI1_Init();
 8000c86:	f000 f92f 	bl	8000ee8 <_ZL12MX_SPI1_Initv>
  MX_TIM2_Init();
 8000c8a:	f000 f96f 	bl	8000f6c <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 8000c8e:	f000 f9cb 	bl	8001028 <_ZL12MX_TIM3_Initv>
  /* USER CODE BEGIN 2 */
  Can_Message *msg1 = new Can_Message();
 8000c92:	2008      	movs	r0, #8
 8000c94:	f003 fe52 	bl	800493c <_Znwj>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	461c      	mov	r4, r3
 8000c9c:	4620      	mov	r0, r4
 8000c9e:	f7ff ff45 	bl	8000b2c <_ZN11Can_MessageC1Ev>
 8000ca2:	60fc      	str	r4, [r7, #12]
  Packet_1 *pck1 = new Packet_1();
 8000ca4:	206c      	movs	r0, #108	; 0x6c
 8000ca6:	f003 fe49 	bl	800493c <_Znwj>
 8000caa:	4603      	mov	r3, r0
 8000cac:	461c      	mov	r4, r3
 8000cae:	4620      	mov	r0, r4
 8000cb0:	f7ff ff50 	bl	8000b54 <_ZN8Packet_1C1Ev>
 8000cb4:	60bc      	str	r4, [r7, #8]
  States * st1 = new States();
 8000cb6:	2022      	movs	r0, #34	; 0x22
 8000cb8:	f003 fe40 	bl	800493c <_Znwj>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	461c      	mov	r4, r3
 8000cc0:	4620      	mov	r0, r4
 8000cc2:	f7ff ff94 	bl	8000bee <_ZN6StatesC1Ev>
 8000cc6:	607c      	str	r4, [r7, #4]

  Create_parsing_array();
 8000cc8:	f7ff fb02 	bl	80002d0 <_Z20Create_parsing_arrayv>

  //Open_Filter();

  CAN_Init();
 8000ccc:	f7ff fc1a 	bl	8000504 <_Z8CAN_Initv>

  if(Setup_Radio_As_Transmiter() == false)
 8000cd0:	f7ff fef2 	bl	8000ab8 <_Z25Setup_Radio_As_Transmiterv>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	bf0c      	ite	eq
 8000cda:	2301      	moveq	r3, #1
 8000cdc:	2300      	movne	r3, #0
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <main+0x78>
  {
 	 Error_Handler();
 8000ce4:	f000 fa8e 	bl	8001204 <Error_Handler>
  }

  HAL_TIM_Base_Start_IT(&htim2);
 8000ce8:	482b      	ldr	r0, [pc, #172]	; (8000d98 <main+0x128>)
 8000cea:	f003 f9c3 	bl	8004074 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000cee:	482b      	ldr	r0, [pc, #172]	; (8000d9c <main+0x12c>)
 8000cf0:	f003 f9c0 	bl	8004074 <HAL_TIM_Base_Start_IT>

     /* USER CODE BEGIN 3 */
 	  /*
 	   * Regular state of the code, used to receive, pack and send data
 	   */
	  Send_Message(0x0A, 8, Test_Data);
 8000cf4:	4a2a      	ldr	r2, [pc, #168]	; (8000da0 <main+0x130>)
 8000cf6:	2108      	movs	r1, #8
 8000cf8:	200a      	movs	r0, #10
 8000cfa:	f7ff fc3b 	bl	8000574 <_Z12Send_MessagemmPh>
	  HAL_Delay(1);
 8000cfe:	2001      	movs	r0, #1
 8000d00:	f000 fd36 	bl	8001770 <HAL_Delay>
 	  if((Can_Interrupt_flag  == 1) & (TIM_IRQ_Mode_flag == 0))
 8000d04:	4b27      	ldr	r3, [pc, #156]	; (8000da4 <main+0x134>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	bf0c      	ite	eq
 8000d0c:	2301      	moveq	r3, #1
 8000d0e:	2300      	movne	r3, #0
 8000d10:	b2da      	uxtb	r2, r3
 8000d12:	4b25      	ldr	r3, [pc, #148]	; (8000da8 <main+0x138>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	bf0c      	ite	eq
 8000d1a:	2301      	moveq	r3, #1
 8000d1c:	2300      	movne	r3, #0
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	4013      	ands	r3, r2
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d01b      	beq.n	8000d60 <main+0xf0>
 	  {
 		  msg1->Build_Message();
 8000d28:	68f8      	ldr	r0, [r7, #12]
 8000d2a:	f7ff fbf9 	bl	8000520 <_ZN11Can_Message13Build_MessageEv>
 		  pck1->Choose_Parser(msg1, pck1, st1);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	68ba      	ldr	r2, [r7, #8]
 8000d32:	68f9      	ldr	r1, [r7, #12]
 8000d34:	68b8      	ldr	r0, [r7, #8]
 8000d36:	f7ff faf9 	bl	800032c <_ZN8Packet_113Choose_ParserEP11Can_MessagePS_P6States>
 		  if(pck1->Return_flag_buffer() == PACKET_FULL)
 8000d3a:	68b8      	ldr	r0, [r7, #8]
 8000d3c:	f7ff ff4a 	bl	8000bd4 <_ZN8Packet_118Return_flag_bufferEv>
 8000d40:	4603      	mov	r3, r0
 8000d42:	461a      	mov	r2, r3
 8000d44:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	bf0c      	ite	eq
 8000d4c:	2301      	moveq	r3, #1
 8000d4e:	2300      	movne	r3, #0
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d00f      	beq.n	8000d76 <main+0x106>
 		  {
 			  //Send
 			  Send(pck1, st1);
 8000d56:	6879      	ldr	r1, [r7, #4]
 8000d58:	68b8      	ldr	r0, [r7, #8]
 8000d5a:	f7ff ff59 	bl	8000c10 <_Z4SendP8Packet_1P6States>
 8000d5e:	e00a      	b.n	8000d76 <main+0x106>
 		  }
 	  }
 	  /*
 	   * TIM_IRQ_Mode. Used when not enough data arrives in sufficient time.
 	   */
 	  else if(TIM_IRQ_Mode_flag == 1)
 8000d60:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <main+0x138>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d106      	bne.n	8000d76 <main+0x106>
 	  {
 		  Send(pck1, st1);
 8000d68:	6879      	ldr	r1, [r7, #4]
 8000d6a:	68b8      	ldr	r0, [r7, #8]
 8000d6c:	f7ff ff50 	bl	8000c10 <_Z4SendP8Packet_1P6States>
 		  TIM_IRQ_Mode_flag = 0;
 8000d70:	4b0d      	ldr	r3, [pc, #52]	; (8000da8 <main+0x138>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	701a      	strb	r2, [r3, #0]
 	  }
 	  if(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) == 0)
 8000d76:	2100      	movs	r1, #0
 8000d78:	480c      	ldr	r0, [pc, #48]	; (8000dac <main+0x13c>)
 8000d7a:	f001 f849 	bl	8001e10 <HAL_CAN_GetRxFifoFillLevel>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	bf0c      	ite	eq
 8000d84:	2301      	moveq	r3, #1
 8000d86:	2300      	movne	r3, #0
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d0b2      	beq.n	8000cf4 <main+0x84>
 	  {
 		 Can_Interrupt_flag = 0;
 8000d8e:	4b05      	ldr	r3, [pc, #20]	; (8000da4 <main+0x134>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	701a      	strb	r2, [r3, #0]
	  Send_Message(0x0A, 8, Test_Data);
 8000d94:	e7ae      	b.n	8000cf4 <main+0x84>
 8000d96:	bf00      	nop
 8000d98:	20000168 	.word	0x20000168
 8000d9c:	200001b4 	.word	0x200001b4
 8000da0:	20000008 	.word	0x20000008
 8000da4:	20000200 	.word	0x20000200
 8000da8:	20000201 	.word	0x20000201
 8000dac:	200000dc 	.word	0x200000dc

08000db0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b096      	sub	sp, #88	; 0x58
 8000db4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000db6:	f107 0314 	add.w	r3, r7, #20
 8000dba:	2244      	movs	r2, #68	; 0x44
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f003 fe10 	bl	80049e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dc4:	463b      	mov	r3, r7
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	605a      	str	r2, [r3, #4]
 8000dcc:	609a      	str	r2, [r3, #8]
 8000dce:	60da      	str	r2, [r3, #12]
 8000dd0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000dd2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000dd6:	f001 fb4b 	bl	8002470 <HAL_PWREx_ControlVoltageScaling>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	bf14      	ite	ne
 8000de0:	2301      	movne	r3, #1
 8000de2:	2300      	moveq	r3, #0
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 8000dea:	f000 fa0b 	bl	8001204 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dee:	2302      	movs	r3, #2
 8000df0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000df2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000df6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000df8:	2310      	movs	r3, #16
 8000dfa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e00:	2302      	movs	r3, #2
 8000e02:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e04:	2301      	movs	r3, #1
 8000e06:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000e08:	2308      	movs	r3, #8
 8000e0a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000e0c:	2307      	movs	r3, #7
 8000e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e10:	2302      	movs	r3, #2
 8000e12:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e14:	2302      	movs	r3, #2
 8000e16:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f001 fb7d 	bl	800251c <HAL_RCC_OscConfig>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	bf14      	ite	ne
 8000e28:	2301      	movne	r3, #1
 8000e2a:	2300      	moveq	r3, #0
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <_Z18SystemClock_Configv+0x86>
  {
    Error_Handler();
 8000e32:	f000 f9e7 	bl	8001204 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e36:	230f      	movs	r3, #15
 8000e38:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000e3e:	2380      	movs	r3, #128	; 0x80
 8000e40:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e42:	2300      	movs	r3, #0
 8000e44:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e46:	2300      	movs	r3, #0
 8000e48:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e4a:	463b      	mov	r3, r7
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f001 ff4a 	bl	8002ce8 <HAL_RCC_ClockConfig>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	bf14      	ite	ne
 8000e5a:	2301      	movne	r3, #1
 8000e5c:	2300      	moveq	r3, #0
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <_Z18SystemClock_Configv+0xb8>
  {
    Error_Handler();
 8000e64:	f000 f9ce 	bl	8001204 <Error_Handler>
  }
}
 8000e68:	bf00      	nop
 8000e6a:	3758      	adds	r7, #88	; 0x58
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <_ZL12MX_CAN1_Initv>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000e74:	4b1a      	ldr	r3, [pc, #104]	; (8000ee0 <_ZL12MX_CAN1_Initv+0x70>)
 8000e76:	4a1b      	ldr	r2, [pc, #108]	; (8000ee4 <_ZL12MX_CAN1_Initv+0x74>)
 8000e78:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000e7a:	4b19      	ldr	r3, [pc, #100]	; (8000ee0 <_ZL12MX_CAN1_Initv+0x70>)
 8000e7c:	2210      	movs	r2, #16
 8000e7e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 8000e80:	4b17      	ldr	r3, [pc, #92]	; (8000ee0 <_ZL12MX_CAN1_Initv+0x70>)
 8000e82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e86:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000e88:	4b15      	ldr	r3, [pc, #84]	; (8000ee0 <_ZL12MX_CAN1_Initv+0x70>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000e8e:	4b14      	ldr	r3, [pc, #80]	; (8000ee0 <_ZL12MX_CAN1_Initv+0x70>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_6TQ;
 8000e94:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <_ZL12MX_CAN1_Initv+0x70>)
 8000e96:	f44f 02a0 	mov.w	r2, #5242880	; 0x500000
 8000e9a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000e9c:	4b10      	ldr	r3, [pc, #64]	; (8000ee0 <_ZL12MX_CAN1_Initv+0x70>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000ea2:	4b0f      	ldr	r3, [pc, #60]	; (8000ee0 <_ZL12MX_CAN1_Initv+0x70>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000ea8:	4b0d      	ldr	r3, [pc, #52]	; (8000ee0 <_ZL12MX_CAN1_Initv+0x70>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000eae:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <_ZL12MX_CAN1_Initv+0x70>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000eb4:	4b0a      	ldr	r3, [pc, #40]	; (8000ee0 <_ZL12MX_CAN1_Initv+0x70>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000eba:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <_ZL12MX_CAN1_Initv+0x70>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000ec0:	4807      	ldr	r0, [pc, #28]	; (8000ee0 <_ZL12MX_CAN1_Initv+0x70>)
 8000ec2:	f000 fc79 	bl	80017b8 <HAL_CAN_Init>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	bf14      	ite	ne
 8000ecc:	2301      	movne	r3, #1
 8000ece:	2300      	moveq	r3, #0
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <_ZL12MX_CAN1_Initv+0x6a>
  {
    Error_Handler();
 8000ed6:	f000 f995 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	200000dc 	.word	0x200000dc
 8000ee4:	40006400 	.word	0x40006400

08000ee8 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000eec:	4b1d      	ldr	r3, [pc, #116]	; (8000f64 <_ZL12MX_SPI1_Initv+0x7c>)
 8000eee:	4a1e      	ldr	r2, [pc, #120]	; (8000f68 <_ZL12MX_SPI1_Initv+0x80>)
 8000ef0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ef2:	4b1c      	ldr	r3, [pc, #112]	; (8000f64 <_ZL12MX_SPI1_Initv+0x7c>)
 8000ef4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ef8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000efa:	4b1a      	ldr	r3, [pc, #104]	; (8000f64 <_ZL12MX_SPI1_Initv+0x7c>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f00:	4b18      	ldr	r3, [pc, #96]	; (8000f64 <_ZL12MX_SPI1_Initv+0x7c>)
 8000f02:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000f06:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f08:	4b16      	ldr	r3, [pc, #88]	; (8000f64 <_ZL12MX_SPI1_Initv+0x7c>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f0e:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <_ZL12MX_SPI1_Initv+0x7c>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f14:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <_ZL12MX_SPI1_Initv+0x7c>)
 8000f16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f1a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000f1c:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <_ZL12MX_SPI1_Initv+0x7c>)
 8000f1e:	2210      	movs	r2, #16
 8000f20:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f22:	4b10      	ldr	r3, [pc, #64]	; (8000f64 <_ZL12MX_SPI1_Initv+0x7c>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f28:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <_ZL12MX_SPI1_Initv+0x7c>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f2e:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <_ZL12MX_SPI1_Initv+0x7c>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000f34:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <_ZL12MX_SPI1_Initv+0x7c>)
 8000f36:	2207      	movs	r2, #7
 8000f38:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f3a:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <_ZL12MX_SPI1_Initv+0x7c>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f40:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <_ZL12MX_SPI1_Initv+0x7c>)
 8000f42:	2208      	movs	r2, #8
 8000f44:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f46:	4807      	ldr	r0, [pc, #28]	; (8000f64 <_ZL12MX_SPI1_Initv+0x7c>)
 8000f48:	f002 f89c 	bl	8003084 <HAL_SPI_Init>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	bf14      	ite	ne
 8000f52:	2301      	movne	r3, #1
 8000f54:	2300      	moveq	r3, #0
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <_ZL12MX_SPI1_Initv+0x78>
  {
    Error_Handler();
 8000f5c:	f000 f952 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20000104 	.word	0x20000104
 8000f68:	40013000 	.word	0x40013000

08000f6c <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b088      	sub	sp, #32
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f72:	f107 0310 	add.w	r3, r7, #16
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f80:	1d3b      	adds	r3, r7, #4
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f8a:	4b26      	ldr	r3, [pc, #152]	; (8001024 <_ZL12MX_TIM2_Initv+0xb8>)
 8000f8c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f90:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 8000f92:	4b24      	ldr	r3, [pc, #144]	; (8001024 <_ZL12MX_TIM2_Initv+0xb8>)
 8000f94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f98:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f9a:	4b22      	ldr	r3, [pc, #136]	; (8001024 <_ZL12MX_TIM2_Initv+0xb8>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 800;
 8000fa0:	4b20      	ldr	r3, [pc, #128]	; (8001024 <_ZL12MX_TIM2_Initv+0xb8>)
 8000fa2:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000fa6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa8:	4b1e      	ldr	r3, [pc, #120]	; (8001024 <_ZL12MX_TIM2_Initv+0xb8>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fae:	4b1d      	ldr	r3, [pc, #116]	; (8001024 <_ZL12MX_TIM2_Initv+0xb8>)
 8000fb0:	2280      	movs	r2, #128	; 0x80
 8000fb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fb4:	481b      	ldr	r0, [pc, #108]	; (8001024 <_ZL12MX_TIM2_Initv+0xb8>)
 8000fb6:	f002 ff75 	bl	8003ea4 <HAL_TIM_Base_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	bf14      	ite	ne
 8000fc0:	2301      	movne	r3, #1
 8000fc2:	2300      	moveq	r3, #0
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <_ZL12MX_TIM2_Initv+0x62>
  {
    Error_Handler();
 8000fca:	f000 f91b 	bl	8001204 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fd2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fd4:	f107 0310 	add.w	r3, r7, #16
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4812      	ldr	r0, [pc, #72]	; (8001024 <_ZL12MX_TIM2_Initv+0xb8>)
 8000fdc:	f003 f9d9 	bl	8004392 <HAL_TIM_ConfigClockSource>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	bf14      	ite	ne
 8000fe6:	2301      	movne	r3, #1
 8000fe8:	2300      	moveq	r3, #0
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <_ZL12MX_TIM2_Initv+0x88>
  {
    Error_Handler();
 8000ff0:	f000 f908 	bl	8001204 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ffc:	1d3b      	adds	r3, r7, #4
 8000ffe:	4619      	mov	r1, r3
 8001000:	4808      	ldr	r0, [pc, #32]	; (8001024 <_ZL12MX_TIM2_Initv+0xb8>)
 8001002:	f003 fbf5 	bl	80047f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	bf14      	ite	ne
 800100c:	2301      	movne	r3, #1
 800100e:	2300      	moveq	r3, #0
 8001010:	b2db      	uxtb	r3, r3
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <_ZL12MX_TIM2_Initv+0xae>
  {
    Error_Handler();
 8001016:	f000 f8f5 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800101a:	bf00      	nop
 800101c:	3720      	adds	r7, #32
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000168 	.word	0x20000168

08001028 <_ZL12MX_TIM3_Initv>:

static void MX_TIM3_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b088      	sub	sp, #32
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800102e:	f107 0310 	add.w	r3, r7, #16
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	605a      	str	r2, [r3, #4]
 8001038:	609a      	str	r2, [r3, #8]
 800103a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800103c:	1d3b      	adds	r3, r7, #4
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001046:	4b25      	ldr	r3, [pc, #148]	; (80010dc <_ZL12MX_TIM3_Initv+0xb4>)
 8001048:	4a25      	ldr	r2, [pc, #148]	; (80010e0 <_ZL12MX_TIM3_Initv+0xb8>)
 800104a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000;
 800104c:	4b23      	ldr	r3, [pc, #140]	; (80010dc <_ZL12MX_TIM3_Initv+0xb4>)
 800104e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001052:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001054:	4b21      	ldr	r3, [pc, #132]	; (80010dc <_ZL12MX_TIM3_Initv+0xb4>)
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 16000;
 800105a:	4b20      	ldr	r3, [pc, #128]	; (80010dc <_ZL12MX_TIM3_Initv+0xb4>)
 800105c:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8001060:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001062:	4b1e      	ldr	r3, [pc, #120]	; (80010dc <_ZL12MX_TIM3_Initv+0xb4>)
 8001064:	2200      	movs	r2, #0
 8001066:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001068:	4b1c      	ldr	r3, [pc, #112]	; (80010dc <_ZL12MX_TIM3_Initv+0xb4>)
 800106a:	2280      	movs	r2, #128	; 0x80
 800106c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800106e:	481b      	ldr	r0, [pc, #108]	; (80010dc <_ZL12MX_TIM3_Initv+0xb4>)
 8001070:	f002 ff18 	bl	8003ea4 <HAL_TIM_Base_Init>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	bf14      	ite	ne
 800107a:	2301      	movne	r3, #1
 800107c:	2300      	moveq	r3, #0
 800107e:	b2db      	uxtb	r3, r3
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <_ZL12MX_TIM3_Initv+0x60>
  {
    Error_Handler();
 8001084:	f000 f8be 	bl	8001204 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001088:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800108c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800108e:	f107 0310 	add.w	r3, r7, #16
 8001092:	4619      	mov	r1, r3
 8001094:	4811      	ldr	r0, [pc, #68]	; (80010dc <_ZL12MX_TIM3_Initv+0xb4>)
 8001096:	f003 f97c 	bl	8004392 <HAL_TIM_ConfigClockSource>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	bf14      	ite	ne
 80010a0:	2301      	movne	r3, #1
 80010a2:	2300      	moveq	r3, #0
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <_ZL12MX_TIM3_Initv+0x86>
  {
    Error_Handler();
 80010aa:	f000 f8ab 	bl	8001204 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ae:	2300      	movs	r3, #0
 80010b0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010b2:	2300      	movs	r3, #0
 80010b4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010b6:	1d3b      	adds	r3, r7, #4
 80010b8:	4619      	mov	r1, r3
 80010ba:	4808      	ldr	r0, [pc, #32]	; (80010dc <_ZL12MX_TIM3_Initv+0xb4>)
 80010bc:	f003 fb98 	bl	80047f0 <HAL_TIMEx_MasterConfigSynchronization>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	bf14      	ite	ne
 80010c6:	2301      	movne	r3, #1
 80010c8:	2300      	moveq	r3, #0
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <_ZL12MX_TIM3_Initv+0xac>
  {
    Error_Handler();
 80010d0:	f000 f898 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80010d4:	bf00      	nop
 80010d6:	3720      	adds	r7, #32
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	200001b4 	.word	0x200001b4
 80010e0:	40000400 	.word	0x40000400

080010e4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b08a      	sub	sp, #40	; 0x28
 80010e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ea:	f107 0314 	add.w	r3, r7, #20
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]
 80010f4:	609a      	str	r2, [r3, #8]
 80010f6:	60da      	str	r2, [r3, #12]
 80010f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010fa:	4b3f      	ldr	r3, [pc, #252]	; (80011f8 <_ZL12MX_GPIO_Initv+0x114>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fe:	4a3e      	ldr	r2, [pc, #248]	; (80011f8 <_ZL12MX_GPIO_Initv+0x114>)
 8001100:	f043 0304 	orr.w	r3, r3, #4
 8001104:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001106:	4b3c      	ldr	r3, [pc, #240]	; (80011f8 <_ZL12MX_GPIO_Initv+0x114>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110a:	f003 0304 	and.w	r3, r3, #4
 800110e:	613b      	str	r3, [r7, #16]
 8001110:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001112:	4b39      	ldr	r3, [pc, #228]	; (80011f8 <_ZL12MX_GPIO_Initv+0x114>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001116:	4a38      	ldr	r2, [pc, #224]	; (80011f8 <_ZL12MX_GPIO_Initv+0x114>)
 8001118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800111c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800111e:	4b36      	ldr	r3, [pc, #216]	; (80011f8 <_ZL12MX_GPIO_Initv+0x114>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800112a:	4b33      	ldr	r3, [pc, #204]	; (80011f8 <_ZL12MX_GPIO_Initv+0x114>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112e:	4a32      	ldr	r2, [pc, #200]	; (80011f8 <_ZL12MX_GPIO_Initv+0x114>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001136:	4b30      	ldr	r3, [pc, #192]	; (80011f8 <_ZL12MX_GPIO_Initv+0x114>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	60bb      	str	r3, [r7, #8]
 8001140:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001142:	4b2d      	ldr	r3, [pc, #180]	; (80011f8 <_ZL12MX_GPIO_Initv+0x114>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001146:	4a2c      	ldr	r2, [pc, #176]	; (80011f8 <_ZL12MX_GPIO_Initv+0x114>)
 8001148:	f043 0302 	orr.w	r3, r3, #2
 800114c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800114e:	4b2a      	ldr	r3, [pc, #168]	; (80011f8 <_ZL12MX_GPIO_Initv+0x114>)
 8001150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	607b      	str	r3, [r7, #4]
 8001158:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800115a:	2200      	movs	r2, #0
 800115c:	2180      	movs	r1, #128	; 0x80
 800115e:	4827      	ldr	r0, [pc, #156]	; (80011fc <_ZL12MX_GPIO_Initv+0x118>)
 8001160:	f001 f960 	bl	8002424 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_dzia_a_GPIO_Port, led_dzia_a_Pin, GPIO_PIN_RESET);
 8001164:	2200      	movs	r2, #0
 8001166:	f44f 7180 	mov.w	r1, #256	; 0x100
 800116a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800116e:	f001 f959 	bl	8002424 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, led_nie_dziala_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 8001172:	2200      	movs	r2, #0
 8001174:	2160      	movs	r1, #96	; 0x60
 8001176:	4822      	ldr	r0, [pc, #136]	; (8001200 <_ZL12MX_GPIO_Initv+0x11c>)
 8001178:	f001 f954 	bl	8002424 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800117c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001180:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001182:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001186:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800118c:	f107 0314 	add.w	r3, r7, #20
 8001190:	4619      	mov	r1, r3
 8001192:	481a      	ldr	r0, [pc, #104]	; (80011fc <_ZL12MX_GPIO_Initv+0x118>)
 8001194:	f000 ff9c 	bl	80020d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001198:	2380      	movs	r3, #128	; 0x80
 800119a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119c:	2301      	movs	r3, #1
 800119e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a4:	2300      	movs	r3, #0
 80011a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	4619      	mov	r1, r3
 80011ae:	4813      	ldr	r0, [pc, #76]	; (80011fc <_ZL12MX_GPIO_Initv+0x118>)
 80011b0:	f000 ff8e 	bl	80020d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : led_dzia_a_Pin */
  GPIO_InitStruct.Pin = led_dzia_a_Pin;
 80011b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ba:	2301      	movs	r3, #1
 80011bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c2:	2300      	movs	r3, #0
 80011c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(led_dzia_a_GPIO_Port, &GPIO_InitStruct);
 80011c6:	f107 0314 	add.w	r3, r7, #20
 80011ca:	4619      	mov	r1, r3
 80011cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d0:	f000 ff7e 	bl	80020d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : led_nie_dziala_Pin PB6 */
  GPIO_InitStruct.Pin = led_nie_dziala_Pin|GPIO_PIN_6;
 80011d4:	2360      	movs	r3, #96	; 0x60
 80011d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d8:	2301      	movs	r3, #1
 80011da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e0:	2300      	movs	r3, #0
 80011e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e4:	f107 0314 	add.w	r3, r7, #20
 80011e8:	4619      	mov	r1, r3
 80011ea:	4805      	ldr	r0, [pc, #20]	; (8001200 <_ZL12MX_GPIO_Initv+0x11c>)
 80011ec:	f000 ff70 	bl	80020d0 <HAL_GPIO_Init>

}
 80011f0:	bf00      	nop
 80011f2:	3728      	adds	r7, #40	; 0x28
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40021000 	.word	0x40021000
 80011fc:	48000800 	.word	0x48000800
 8001200:	48000400 	.word	0x48000400

08001204 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001208:	b672      	cpsid	i
}
 800120a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800120c:	e7fe      	b.n	800120c <Error_Handler+0x8>
	...

08001210 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001216:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <HAL_MspInit+0x44>)
 8001218:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800121a:	4a0e      	ldr	r2, [pc, #56]	; (8001254 <HAL_MspInit+0x44>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	6613      	str	r3, [r2, #96]	; 0x60
 8001222:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <HAL_MspInit+0x44>)
 8001224:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800122e:	4b09      	ldr	r3, [pc, #36]	; (8001254 <HAL_MspInit+0x44>)
 8001230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001232:	4a08      	ldr	r2, [pc, #32]	; (8001254 <HAL_MspInit+0x44>)
 8001234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001238:	6593      	str	r3, [r2, #88]	; 0x58
 800123a:	4b06      	ldr	r3, [pc, #24]	; (8001254 <HAL_MspInit+0x44>)
 800123c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800123e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001242:	603b      	str	r3, [r7, #0]
 8001244:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	40021000 	.word	0x40021000

08001258 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b08a      	sub	sp, #40	; 0x28
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a18      	ldr	r2, [pc, #96]	; (80012d8 <HAL_CAN_MspInit+0x80>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d129      	bne.n	80012ce <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800127a:	4b18      	ldr	r3, [pc, #96]	; (80012dc <HAL_CAN_MspInit+0x84>)
 800127c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800127e:	4a17      	ldr	r2, [pc, #92]	; (80012dc <HAL_CAN_MspInit+0x84>)
 8001280:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001284:	6593      	str	r3, [r2, #88]	; 0x58
 8001286:	4b15      	ldr	r3, [pc, #84]	; (80012dc <HAL_CAN_MspInit+0x84>)
 8001288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800128a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800128e:	613b      	str	r3, [r7, #16]
 8001290:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001292:	4b12      	ldr	r3, [pc, #72]	; (80012dc <HAL_CAN_MspInit+0x84>)
 8001294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001296:	4a11      	ldr	r2, [pc, #68]	; (80012dc <HAL_CAN_MspInit+0x84>)
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800129e:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <HAL_CAN_MspInit+0x84>)
 80012a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80012aa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80012ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b0:	2302      	movs	r3, #2
 80012b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b8:	2303      	movs	r3, #3
 80012ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80012bc:	2309      	movs	r3, #9
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	4619      	mov	r1, r3
 80012c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ca:	f000 ff01 	bl	80020d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80012ce:	bf00      	nop
 80012d0:	3728      	adds	r7, #40	; 0x28
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40006400 	.word	0x40006400
 80012dc:	40021000 	.word	0x40021000

080012e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08a      	sub	sp, #40	; 0x28
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e8:	f107 0314 	add.w	r3, r7, #20
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a17      	ldr	r2, [pc, #92]	; (800135c <HAL_SPI_MspInit+0x7c>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d128      	bne.n	8001354 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001302:	4b17      	ldr	r3, [pc, #92]	; (8001360 <HAL_SPI_MspInit+0x80>)
 8001304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001306:	4a16      	ldr	r2, [pc, #88]	; (8001360 <HAL_SPI_MspInit+0x80>)
 8001308:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800130c:	6613      	str	r3, [r2, #96]	; 0x60
 800130e:	4b14      	ldr	r3, [pc, #80]	; (8001360 <HAL_SPI_MspInit+0x80>)
 8001310:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001312:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001316:	613b      	str	r3, [r7, #16]
 8001318:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800131a:	4b11      	ldr	r3, [pc, #68]	; (8001360 <HAL_SPI_MspInit+0x80>)
 800131c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131e:	4a10      	ldr	r2, [pc, #64]	; (8001360 <HAL_SPI_MspInit+0x80>)
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001326:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <HAL_SPI_MspInit+0x80>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001332:	23e0      	movs	r3, #224	; 0xe0
 8001334:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001336:	2302      	movs	r3, #2
 8001338:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800133e:	2303      	movs	r3, #3
 8001340:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001342:	2305      	movs	r3, #5
 8001344:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001346:	f107 0314 	add.w	r3, r7, #20
 800134a:	4619      	mov	r1, r3
 800134c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001350:	f000 febe 	bl	80020d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001354:	bf00      	nop
 8001356:	3728      	adds	r7, #40	; 0x28
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40013000 	.word	0x40013000
 8001360:	40021000 	.word	0x40021000

08001364 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001374:	d114      	bne.n	80013a0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001376:	4b19      	ldr	r3, [pc, #100]	; (80013dc <HAL_TIM_Base_MspInit+0x78>)
 8001378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800137a:	4a18      	ldr	r2, [pc, #96]	; (80013dc <HAL_TIM_Base_MspInit+0x78>)
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	6593      	str	r3, [r2, #88]	; 0x58
 8001382:	4b16      	ldr	r3, [pc, #88]	; (80013dc <HAL_TIM_Base_MspInit+0x78>)
 8001384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800138e:	2200      	movs	r2, #0
 8001390:	2100      	movs	r1, #0
 8001392:	201c      	movs	r0, #28
 8001394:	f000 fe65 	bl	8002062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001398:	201c      	movs	r0, #28
 800139a:	f000 fe7e 	bl	800209a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800139e:	e018      	b.n	80013d2 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a0e      	ldr	r2, [pc, #56]	; (80013e0 <HAL_TIM_Base_MspInit+0x7c>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d113      	bne.n	80013d2 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013aa:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <HAL_TIM_Base_MspInit+0x78>)
 80013ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ae:	4a0b      	ldr	r2, [pc, #44]	; (80013dc <HAL_TIM_Base_MspInit+0x78>)
 80013b0:	f043 0302 	orr.w	r3, r3, #2
 80013b4:	6593      	str	r3, [r2, #88]	; 0x58
 80013b6:	4b09      	ldr	r3, [pc, #36]	; (80013dc <HAL_TIM_Base_MspInit+0x78>)
 80013b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	60bb      	str	r3, [r7, #8]
 80013c0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80013c2:	2200      	movs	r2, #0
 80013c4:	2100      	movs	r1, #0
 80013c6:	201d      	movs	r0, #29
 80013c8:	f000 fe4b 	bl	8002062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80013cc:	201d      	movs	r0, #29
 80013ce:	f000 fe64 	bl	800209a <HAL_NVIC_EnableIRQ>
}
 80013d2:	bf00      	nop
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40021000 	.word	0x40021000
 80013e0:	40000400 	.word	0x40000400

080013e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013e8:	e7fe      	b.n	80013e8 <NMI_Handler+0x4>

080013ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ee:	e7fe      	b.n	80013ee <HardFault_Handler+0x4>

080013f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f4:	e7fe      	b.n	80013f4 <MemManage_Handler+0x4>

080013f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013fa:	e7fe      	b.n	80013fa <BusFault_Handler+0x4>

080013fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001400:	e7fe      	b.n	8001400 <UsageFault_Handler+0x4>

08001402 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001430:	f000 f97e 	bl	8001730 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}

08001438 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	TIM_IRQ_Mode_flag = 1;
 800143c:	4b03      	ldr	r3, [pc, #12]	; (800144c <TIM2_IRQHandler+0x14>)
 800143e:	2201      	movs	r2, #1
 8001440:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001442:	4803      	ldr	r0, [pc, #12]	; (8001450 <TIM2_IRQHandler+0x18>)
 8001444:	f002 fe86 	bl	8004154 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001448:	bf00      	nop
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000201 	.word	0x20000201
 8001450:	20000168 	.word	0x20000168

08001454 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	HAL_GPIO_WritePin(led_dzia_a_GPIO_Port, led_dzia_a_Pin, GPIO_PIN_RESET);
 8001458:	2200      	movs	r2, #0
 800145a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800145e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001462:	f000 ffdf 	bl	8002424 <HAL_GPIO_WritePin>
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001466:	4802      	ldr	r0, [pc, #8]	; (8001470 <TIM3_IRQHandler+0x1c>)
 8001468:	f002 fe74 	bl	8004154 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800146c:	bf00      	nop
 800146e:	bd80      	pop	{r7, pc}
 8001470:	200001b4 	.word	0x200001b4

08001474 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
	return 1;
 8001478:	2301      	movs	r3, #1
}
 800147a:	4618      	mov	r0, r3
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <_kill>:

int _kill(int pid, int sig)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800148e:	f003 fa77 	bl	8004980 <__errno>
 8001492:	4603      	mov	r3, r0
 8001494:	2216      	movs	r2, #22
 8001496:	601a      	str	r2, [r3, #0]
	return -1;
 8001498:	f04f 33ff 	mov.w	r3, #4294967295
}
 800149c:	4618      	mov	r0, r3
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <_exit>:

void _exit (int status)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80014ac:	f04f 31ff 	mov.w	r1, #4294967295
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f7ff ffe7 	bl	8001484 <_kill>
	while (1) {}		/* Make sure we hang here */
 80014b6:	e7fe      	b.n	80014b6 <_exit+0x12>

080014b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014c4:	2300      	movs	r3, #0
 80014c6:	617b      	str	r3, [r7, #20]
 80014c8:	e00a      	b.n	80014e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014ca:	f3af 8000 	nop.w
 80014ce:	4601      	mov	r1, r0
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	1c5a      	adds	r2, r3, #1
 80014d4:	60ba      	str	r2, [r7, #8]
 80014d6:	b2ca      	uxtb	r2, r1
 80014d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	3301      	adds	r3, #1
 80014de:	617b      	str	r3, [r7, #20]
 80014e0:	697a      	ldr	r2, [r7, #20]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	dbf0      	blt.n	80014ca <_read+0x12>
	}

return len;
 80014e8:	687b      	ldr	r3, [r7, #4]
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3718      	adds	r7, #24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b086      	sub	sp, #24
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	60f8      	str	r0, [r7, #12]
 80014fa:	60b9      	str	r1, [r7, #8]
 80014fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014fe:	2300      	movs	r3, #0
 8001500:	617b      	str	r3, [r7, #20]
 8001502:	e009      	b.n	8001518 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	1c5a      	adds	r2, r3, #1
 8001508:	60ba      	str	r2, [r7, #8]
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	4618      	mov	r0, r3
 800150e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	3301      	adds	r3, #1
 8001516:	617b      	str	r3, [r7, #20]
 8001518:	697a      	ldr	r2, [r7, #20]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	429a      	cmp	r2, r3
 800151e:	dbf1      	blt.n	8001504 <_write+0x12>
	}
	return len;
 8001520:	687b      	ldr	r3, [r7, #4]
}
 8001522:	4618      	mov	r0, r3
 8001524:	3718      	adds	r7, #24
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <_close>:

int _close(int file)
{
 800152a:	b480      	push	{r7}
 800152c:	b083      	sub	sp, #12
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
	return -1;
 8001532:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001536:	4618      	mov	r0, r3
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr

08001542 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001542:	b480      	push	{r7}
 8001544:	b083      	sub	sp, #12
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
 800154a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001552:	605a      	str	r2, [r3, #4]
	return 0;
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr

08001562 <_isatty>:

int _isatty(int file)
{
 8001562:	b480      	push	{r7}
 8001564:	b083      	sub	sp, #12
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
	return 1;
 800156a:	2301      	movs	r3, #1
}
 800156c:	4618      	mov	r0, r3
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001578:	b480      	push	{r7}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
	return 0;
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	3714      	adds	r7, #20
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
	...

08001594 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b086      	sub	sp, #24
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800159c:	4a14      	ldr	r2, [pc, #80]	; (80015f0 <_sbrk+0x5c>)
 800159e:	4b15      	ldr	r3, [pc, #84]	; (80015f4 <_sbrk+0x60>)
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015a8:	4b13      	ldr	r3, [pc, #76]	; (80015f8 <_sbrk+0x64>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d102      	bne.n	80015b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015b0:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <_sbrk+0x64>)
 80015b2:	4a12      	ldr	r2, [pc, #72]	; (80015fc <_sbrk+0x68>)
 80015b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015b6:	4b10      	ldr	r3, [pc, #64]	; (80015f8 <_sbrk+0x64>)
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4413      	add	r3, r2
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d207      	bcs.n	80015d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015c4:	f003 f9dc 	bl	8004980 <__errno>
 80015c8:	4603      	mov	r3, r0
 80015ca:	220c      	movs	r2, #12
 80015cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015ce:	f04f 33ff 	mov.w	r3, #4294967295
 80015d2:	e009      	b.n	80015e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015d4:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <_sbrk+0x64>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015da:	4b07      	ldr	r3, [pc, #28]	; (80015f8 <_sbrk+0x64>)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4413      	add	r3, r2
 80015e2:	4a05      	ldr	r2, [pc, #20]	; (80015f8 <_sbrk+0x64>)
 80015e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015e6:	68fb      	ldr	r3, [r7, #12]
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3718      	adds	r7, #24
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20018000 	.word	0x20018000
 80015f4:	00000400 	.word	0x00000400
 80015f8:	20000204 	.word	0x20000204
 80015fc:	20000228 	.word	0x20000228

08001600 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001604:	4b06      	ldr	r3, [pc, #24]	; (8001620 <SystemInit+0x20>)
 8001606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800160a:	4a05      	ldr	r2, [pc, #20]	; (8001620 <SystemInit+0x20>)
 800160c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001610:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001614:	bf00      	nop
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	e000ed00 	.word	0xe000ed00

08001624 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001624:	f8df d034 	ldr.w	sp, [pc, #52]	; 800165c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001628:	f7ff ffea 	bl	8001600 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800162c:	480c      	ldr	r0, [pc, #48]	; (8001660 <LoopForever+0x6>)
  ldr r1, =_edata
 800162e:	490d      	ldr	r1, [pc, #52]	; (8001664 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001630:	4a0d      	ldr	r2, [pc, #52]	; (8001668 <LoopForever+0xe>)
  movs r3, #0
 8001632:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001634:	e002      	b.n	800163c <LoopCopyDataInit>

08001636 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001636:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001638:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800163a:	3304      	adds	r3, #4

0800163c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800163c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800163e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001640:	d3f9      	bcc.n	8001636 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001642:	4a0a      	ldr	r2, [pc, #40]	; (800166c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001644:	4c0a      	ldr	r4, [pc, #40]	; (8001670 <LoopForever+0x16>)
  movs r3, #0
 8001646:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001648:	e001      	b.n	800164e <LoopFillZerobss>

0800164a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800164a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800164c:	3204      	adds	r2, #4

0800164e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800164e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001650:	d3fb      	bcc.n	800164a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001652:	f003 f99b 	bl	800498c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001656:	f7ff fb0b 	bl	8000c70 <main>

0800165a <LoopForever>:

LoopForever:
    b LoopForever
 800165a:	e7fe      	b.n	800165a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800165c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001660:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001664:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001668:	08005b98 	.word	0x08005b98
  ldr r2, =_sbss
 800166c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001670:	20000228 	.word	0x20000228

08001674 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001674:	e7fe      	b.n	8001674 <ADC1_2_IRQHandler>
	...

08001678 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800167e:	2300      	movs	r3, #0
 8001680:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001682:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <HAL_Init+0x3c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a0b      	ldr	r2, [pc, #44]	; (80016b4 <HAL_Init+0x3c>)
 8001688:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800168c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800168e:	2003      	movs	r0, #3
 8001690:	f000 fcdc 	bl	800204c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001694:	2000      	movs	r0, #0
 8001696:	f000 f80f 	bl	80016b8 <HAL_InitTick>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d002      	beq.n	80016a6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	71fb      	strb	r3, [r7, #7]
 80016a4:	e001      	b.n	80016aa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016a6:	f7ff fdb3 	bl	8001210 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016aa:	79fb      	ldrb	r3, [r7, #7]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	40022000 	.word	0x40022000

080016b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016c0:	2300      	movs	r3, #0
 80016c2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80016c4:	4b17      	ldr	r3, [pc, #92]	; (8001724 <HAL_InitTick+0x6c>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d023      	beq.n	8001714 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80016cc:	4b16      	ldr	r3, [pc, #88]	; (8001728 <HAL_InitTick+0x70>)
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	4b14      	ldr	r3, [pc, #80]	; (8001724 <HAL_InitTick+0x6c>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	4619      	mov	r1, r3
 80016d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016da:	fbb3 f3f1 	udiv	r3, r3, r1
 80016de:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e2:	4618      	mov	r0, r3
 80016e4:	f000 fce7 	bl	80020b6 <HAL_SYSTICK_Config>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d10f      	bne.n	800170e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2b0f      	cmp	r3, #15
 80016f2:	d809      	bhi.n	8001708 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016f4:	2200      	movs	r2, #0
 80016f6:	6879      	ldr	r1, [r7, #4]
 80016f8:	f04f 30ff 	mov.w	r0, #4294967295
 80016fc:	f000 fcb1 	bl	8002062 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001700:	4a0a      	ldr	r2, [pc, #40]	; (800172c <HAL_InitTick+0x74>)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6013      	str	r3, [r2, #0]
 8001706:	e007      	b.n	8001718 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	73fb      	strb	r3, [r7, #15]
 800170c:	e004      	b.n	8001718 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	73fb      	strb	r3, [r7, #15]
 8001712:	e001      	b.n	8001718 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001718:	7bfb      	ldrb	r3, [r7, #15]
}
 800171a:	4618      	mov	r0, r3
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	20000018 	.word	0x20000018
 8001728:	20000010 	.word	0x20000010
 800172c:	20000014 	.word	0x20000014

08001730 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001734:	4b06      	ldr	r3, [pc, #24]	; (8001750 <HAL_IncTick+0x20>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	461a      	mov	r2, r3
 800173a:	4b06      	ldr	r3, [pc, #24]	; (8001754 <HAL_IncTick+0x24>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4413      	add	r3, r2
 8001740:	4a04      	ldr	r2, [pc, #16]	; (8001754 <HAL_IncTick+0x24>)
 8001742:	6013      	str	r3, [r2, #0]
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	20000018 	.word	0x20000018
 8001754:	20000214 	.word	0x20000214

08001758 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  return uwTick;
 800175c:	4b03      	ldr	r3, [pc, #12]	; (800176c <HAL_GetTick+0x14>)
 800175e:	681b      	ldr	r3, [r3, #0]
}
 8001760:	4618      	mov	r0, r3
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	20000214 	.word	0x20000214

08001770 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001778:	f7ff ffee 	bl	8001758 <HAL_GetTick>
 800177c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001788:	d005      	beq.n	8001796 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800178a:	4b0a      	ldr	r3, [pc, #40]	; (80017b4 <HAL_Delay+0x44>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	461a      	mov	r2, r3
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	4413      	add	r3, r2
 8001794:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001796:	bf00      	nop
 8001798:	f7ff ffde 	bl	8001758 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d8f7      	bhi.n	8001798 <HAL_Delay+0x28>
  {
  }
}
 80017a8:	bf00      	nop
 80017aa:	bf00      	nop
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000018 	.word	0x20000018

080017b8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d101      	bne.n	80017ca <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e0ed      	b.n	80019a6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d102      	bne.n	80017dc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f7ff fd3e 	bl	8001258 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f042 0201 	orr.w	r2, r2, #1
 80017ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017ec:	f7ff ffb4 	bl	8001758 <HAL_GetTick>
 80017f0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80017f2:	e012      	b.n	800181a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017f4:	f7ff ffb0 	bl	8001758 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b0a      	cmp	r3, #10
 8001800:	d90b      	bls.n	800181a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001806:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2205      	movs	r2, #5
 8001812:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e0c5      	b.n	80019a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f003 0301 	and.w	r3, r3, #1
 8001824:	2b00      	cmp	r3, #0
 8001826:	d0e5      	beq.n	80017f4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f022 0202 	bic.w	r2, r2, #2
 8001836:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001838:	f7ff ff8e 	bl	8001758 <HAL_GetTick>
 800183c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800183e:	e012      	b.n	8001866 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001840:	f7ff ff8a 	bl	8001758 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b0a      	cmp	r3, #10
 800184c:	d90b      	bls.n	8001866 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001852:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2205      	movs	r2, #5
 800185e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e09f      	b.n	80019a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d1e5      	bne.n	8001840 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	7e1b      	ldrb	r3, [r3, #24]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d108      	bne.n	800188e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	e007      	b.n	800189e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800189c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	7e5b      	ldrb	r3, [r3, #25]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d108      	bne.n	80018b8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	e007      	b.n	80018c8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	7e9b      	ldrb	r3, [r3, #26]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d108      	bne.n	80018e2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f042 0220 	orr.w	r2, r2, #32
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	e007      	b.n	80018f2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f022 0220 	bic.w	r2, r2, #32
 80018f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	7edb      	ldrb	r3, [r3, #27]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d108      	bne.n	800190c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f022 0210 	bic.w	r2, r2, #16
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	e007      	b.n	800191c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f042 0210 	orr.w	r2, r2, #16
 800191a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	7f1b      	ldrb	r3, [r3, #28]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d108      	bne.n	8001936 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f042 0208 	orr.w	r2, r2, #8
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	e007      	b.n	8001946 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f022 0208 	bic.w	r2, r2, #8
 8001944:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	7f5b      	ldrb	r3, [r3, #29]
 800194a:	2b01      	cmp	r3, #1
 800194c:	d108      	bne.n	8001960 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f042 0204 	orr.w	r2, r2, #4
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	e007      	b.n	8001970 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f022 0204 	bic.w	r2, r2, #4
 800196e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689a      	ldr	r2, [r3, #8]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	431a      	orrs	r2, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	691b      	ldr	r3, [r3, #16]
 800197e:	431a      	orrs	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	695b      	ldr	r3, [r3, #20]
 8001984:	ea42 0103 	orr.w	r1, r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	1e5a      	subs	r2, r3, #1
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	430a      	orrs	r2, r1
 8001994:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2201      	movs	r2, #1
 80019a0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b084      	sub	sp, #16
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d12e      	bne.n	8001a20 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2202      	movs	r2, #2
 80019c6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f022 0201 	bic.w	r2, r2, #1
 80019d8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80019da:	f7ff febd 	bl	8001758 <HAL_GetTick>
 80019de:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80019e0:	e012      	b.n	8001a08 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80019e2:	f7ff feb9 	bl	8001758 <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b0a      	cmp	r3, #10
 80019ee:	d90b      	bls.n	8001a08 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2205      	movs	r2, #5
 8001a00:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e012      	b.n	8001a2e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1e5      	bne.n	80019e2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	e006      	b.n	8001a2e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a24:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
  }
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001a36:	b480      	push	{r7}
 8001a38:	b089      	sub	sp, #36	; 0x24
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	60f8      	str	r0, [r7, #12]
 8001a3e:	60b9      	str	r1, [r7, #8]
 8001a40:	607a      	str	r2, [r7, #4]
 8001a42:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a4a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a54:	7ffb      	ldrb	r3, [r7, #31]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d003      	beq.n	8001a62 <HAL_CAN_AddTxMessage+0x2c>
 8001a5a:	7ffb      	ldrb	r3, [r7, #31]
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	f040 80b8 	bne.w	8001bd2 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d10a      	bne.n	8001a82 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d105      	bne.n	8001a82 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	f000 80a0 	beq.w	8001bc2 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	0e1b      	lsrs	r3, r3, #24
 8001a86:	f003 0303 	and.w	r3, r3, #3
 8001a8a:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d907      	bls.n	8001aa2 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a96:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e09e      	b.n	8001be0 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	409a      	lsls	r2, r3
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d10d      	bne.n	8001ad0 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001abe:	68f9      	ldr	r1, [r7, #12]
 8001ac0:	6809      	ldr	r1, [r1, #0]
 8001ac2:	431a      	orrs	r2, r3
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	3318      	adds	r3, #24
 8001ac8:	011b      	lsls	r3, r3, #4
 8001aca:	440b      	add	r3, r1
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	e00f      	b.n	8001af0 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ada:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ae0:	68f9      	ldr	r1, [r7, #12]
 8001ae2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001ae4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	3318      	adds	r3, #24
 8001aea:	011b      	lsls	r3, r3, #4
 8001aec:	440b      	add	r3, r1
 8001aee:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	6819      	ldr	r1, [r3, #0]
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	691a      	ldr	r2, [r3, #16]
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	3318      	adds	r3, #24
 8001afc:	011b      	lsls	r3, r3, #4
 8001afe:	440b      	add	r3, r1
 8001b00:	3304      	adds	r3, #4
 8001b02:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	7d1b      	ldrb	r3, [r3, #20]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d111      	bne.n	8001b30 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	3318      	adds	r3, #24
 8001b14:	011b      	lsls	r3, r3, #4
 8001b16:	4413      	add	r3, r2
 8001b18:	3304      	adds	r3, #4
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	68fa      	ldr	r2, [r7, #12]
 8001b1e:	6811      	ldr	r1, [r2, #0]
 8001b20:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	3318      	adds	r3, #24
 8001b28:	011b      	lsls	r3, r3, #4
 8001b2a:	440b      	add	r3, r1
 8001b2c:	3304      	adds	r3, #4
 8001b2e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	3307      	adds	r3, #7
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	061a      	lsls	r2, r3, #24
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	3306      	adds	r3, #6
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	041b      	lsls	r3, r3, #16
 8001b40:	431a      	orrs	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	3305      	adds	r3, #5
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	021b      	lsls	r3, r3, #8
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	3204      	adds	r2, #4
 8001b50:	7812      	ldrb	r2, [r2, #0]
 8001b52:	4610      	mov	r0, r2
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	6811      	ldr	r1, [r2, #0]
 8001b58:	ea43 0200 	orr.w	r2, r3, r0
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	011b      	lsls	r3, r3, #4
 8001b60:	440b      	add	r3, r1
 8001b62:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001b66:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3303      	adds	r3, #3
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	061a      	lsls	r2, r3, #24
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	3302      	adds	r3, #2
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	041b      	lsls	r3, r3, #16
 8001b78:	431a      	orrs	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	021b      	lsls	r3, r3, #8
 8001b82:	4313      	orrs	r3, r2
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	7812      	ldrb	r2, [r2, #0]
 8001b88:	4610      	mov	r0, r2
 8001b8a:	68fa      	ldr	r2, [r7, #12]
 8001b8c:	6811      	ldr	r1, [r2, #0]
 8001b8e:	ea43 0200 	orr.w	r2, r3, r0
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	011b      	lsls	r3, r3, #4
 8001b96:	440b      	add	r3, r1
 8001b98:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001b9c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	3318      	adds	r3, #24
 8001ba6:	011b      	lsls	r3, r3, #4
 8001ba8:	4413      	add	r3, r2
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	68fa      	ldr	r2, [r7, #12]
 8001bae:	6811      	ldr	r1, [r2, #0]
 8001bb0:	f043 0201 	orr.w	r2, r3, #1
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	3318      	adds	r3, #24
 8001bb8:	011b      	lsls	r3, r3, #4
 8001bba:	440b      	add	r3, r1
 8001bbc:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	e00e      	b.n	8001be0 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e006      	b.n	8001be0 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
  }
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3724      	adds	r7, #36	; 0x24
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001bec:	b480      	push	{r7}
 8001bee:	b087      	sub	sp, #28
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
 8001bf8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c00:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c02:	7dfb      	ldrb	r3, [r7, #23]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d003      	beq.n	8001c10 <HAL_CAN_GetRxMessage+0x24>
 8001c08:	7dfb      	ldrb	r3, [r7, #23]
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	f040 80f3 	bne.w	8001df6 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d10e      	bne.n	8001c34 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	f003 0303 	and.w	r3, r3, #3
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d116      	bne.n	8001c52 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c28:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e0e7      	b.n	8001e04 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	f003 0303 	and.w	r3, r3, #3
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d107      	bne.n	8001c52 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c46:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e0d8      	b.n	8001e04 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	331b      	adds	r3, #27
 8001c5a:	011b      	lsls	r3, r3, #4
 8001c5c:	4413      	add	r3, r2
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0204 	and.w	r2, r3, #4
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d10c      	bne.n	8001c8a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	331b      	adds	r3, #27
 8001c78:	011b      	lsls	r3, r3, #4
 8001c7a:	4413      	add	r3, r2
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	0d5b      	lsrs	r3, r3, #21
 8001c80:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	e00b      	b.n	8001ca2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	331b      	adds	r3, #27
 8001c92:	011b      	lsls	r3, r3, #4
 8001c94:	4413      	add	r3, r2
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	08db      	lsrs	r3, r3, #3
 8001c9a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	331b      	adds	r3, #27
 8001caa:	011b      	lsls	r3, r3, #4
 8001cac:	4413      	add	r3, r2
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0202 	and.w	r2, r3, #2
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	331b      	adds	r3, #27
 8001cc0:	011b      	lsls	r3, r3, #4
 8001cc2:	4413      	add	r3, r2
 8001cc4:	3304      	adds	r3, #4
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 020f 	and.w	r2, r3, #15
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	331b      	adds	r3, #27
 8001cd8:	011b      	lsls	r3, r3, #4
 8001cda:	4413      	add	r3, r2
 8001cdc:	3304      	adds	r3, #4
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	0a1b      	lsrs	r3, r3, #8
 8001ce2:	b2da      	uxtb	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	331b      	adds	r3, #27
 8001cf0:	011b      	lsls	r3, r3, #4
 8001cf2:	4413      	add	r3, r2
 8001cf4:	3304      	adds	r3, #4
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	0c1b      	lsrs	r3, r3, #16
 8001cfa:	b29a      	uxth	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	011b      	lsls	r3, r3, #4
 8001d08:	4413      	add	r3, r2
 8001d0a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	b2da      	uxtb	r2, r3
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	011b      	lsls	r3, r3, #4
 8001d1e:	4413      	add	r3, r2
 8001d20:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	0a1a      	lsrs	r2, r3, #8
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	b2d2      	uxtb	r2, r2
 8001d2e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	011b      	lsls	r3, r3, #4
 8001d38:	4413      	add	r3, r2
 8001d3a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	0c1a      	lsrs	r2, r3, #16
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	3302      	adds	r3, #2
 8001d46:	b2d2      	uxtb	r2, r2
 8001d48:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	011b      	lsls	r3, r3, #4
 8001d52:	4413      	add	r3, r2
 8001d54:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	0e1a      	lsrs	r2, r3, #24
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	3303      	adds	r3, #3
 8001d60:	b2d2      	uxtb	r2, r2
 8001d62:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	011b      	lsls	r3, r3, #4
 8001d6c:	4413      	add	r3, r2
 8001d6e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	3304      	adds	r3, #4
 8001d78:	b2d2      	uxtb	r2, r2
 8001d7a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	011b      	lsls	r3, r3, #4
 8001d84:	4413      	add	r3, r2
 8001d86:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	0a1a      	lsrs	r2, r3, #8
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	3305      	adds	r3, #5
 8001d92:	b2d2      	uxtb	r2, r2
 8001d94:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	011b      	lsls	r3, r3, #4
 8001d9e:	4413      	add	r3, r2
 8001da0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	0c1a      	lsrs	r2, r3, #16
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	3306      	adds	r3, #6
 8001dac:	b2d2      	uxtb	r2, r2
 8001dae:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	011b      	lsls	r3, r3, #4
 8001db8:	4413      	add	r3, r2
 8001dba:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	0e1a      	lsrs	r2, r3, #24
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	3307      	adds	r3, #7
 8001dc6:	b2d2      	uxtb	r2, r2
 8001dc8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d108      	bne.n	8001de2 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	68da      	ldr	r2, [r3, #12]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f042 0220 	orr.w	r2, r2, #32
 8001dde:	60da      	str	r2, [r3, #12]
 8001de0:	e007      	b.n	8001df2 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	691a      	ldr	r2, [r3, #16]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f042 0220 	orr.w	r2, r2, #32
 8001df0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001df2:	2300      	movs	r3, #0
 8001df4:	e006      	b.n	8001e04 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
  }
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	371c      	adds	r7, #28
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e24:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e26:	7afb      	ldrb	r3, [r7, #11]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d002      	beq.n	8001e32 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8001e2c:	7afb      	ldrb	r3, [r7, #11]
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d10f      	bne.n	8001e52 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d106      	bne.n	8001e46 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	f003 0303 	and.w	r3, r3, #3
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	e005      	b.n	8001e52 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	f003 0303 	and.w	r3, r3, #3
 8001e50:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8001e52:	68fb      	ldr	r3, [r7, #12]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3714      	adds	r7, #20
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e70:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e72:	7bfb      	ldrb	r3, [r7, #15]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d002      	beq.n	8001e7e <HAL_CAN_ActivateNotification+0x1e>
 8001e78:	7bfb      	ldrb	r3, [r7, #15]
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d109      	bne.n	8001e92 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	6959      	ldr	r1, [r3, #20]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	e006      	b.n	8001ea0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e96:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
  }
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3714      	adds	r7, #20
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f003 0307 	and.w	r3, r3, #7
 8001eba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ebc:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ec2:	68ba      	ldr	r2, [r7, #8]
 8001ec4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ec8:	4013      	ands	r3, r2
 8001eca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ed4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001edc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ede:	4a04      	ldr	r2, [pc, #16]	; (8001ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	60d3      	str	r3, [r2, #12]
}
 8001ee4:	bf00      	nop
 8001ee6:	3714      	adds	r7, #20
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr
 8001ef0:	e000ed00 	.word	0xe000ed00

08001ef4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ef8:	4b04      	ldr	r3, [pc, #16]	; (8001f0c <__NVIC_GetPriorityGrouping+0x18>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	0a1b      	lsrs	r3, r3, #8
 8001efe:	f003 0307 	and.w	r3, r3, #7
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	e000ed00 	.word	0xe000ed00

08001f10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	db0b      	blt.n	8001f3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f22:	79fb      	ldrb	r3, [r7, #7]
 8001f24:	f003 021f 	and.w	r2, r3, #31
 8001f28:	4907      	ldr	r1, [pc, #28]	; (8001f48 <__NVIC_EnableIRQ+0x38>)
 8001f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2e:	095b      	lsrs	r3, r3, #5
 8001f30:	2001      	movs	r0, #1
 8001f32:	fa00 f202 	lsl.w	r2, r0, r2
 8001f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	e000e100 	.word	0xe000e100

08001f4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	6039      	str	r1, [r7, #0]
 8001f56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	db0a      	blt.n	8001f76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	b2da      	uxtb	r2, r3
 8001f64:	490c      	ldr	r1, [pc, #48]	; (8001f98 <__NVIC_SetPriority+0x4c>)
 8001f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6a:	0112      	lsls	r2, r2, #4
 8001f6c:	b2d2      	uxtb	r2, r2
 8001f6e:	440b      	add	r3, r1
 8001f70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f74:	e00a      	b.n	8001f8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	b2da      	uxtb	r2, r3
 8001f7a:	4908      	ldr	r1, [pc, #32]	; (8001f9c <__NVIC_SetPriority+0x50>)
 8001f7c:	79fb      	ldrb	r3, [r7, #7]
 8001f7e:	f003 030f 	and.w	r3, r3, #15
 8001f82:	3b04      	subs	r3, #4
 8001f84:	0112      	lsls	r2, r2, #4
 8001f86:	b2d2      	uxtb	r2, r2
 8001f88:	440b      	add	r3, r1
 8001f8a:	761a      	strb	r2, [r3, #24]
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	e000e100 	.word	0xe000e100
 8001f9c:	e000ed00 	.word	0xe000ed00

08001fa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b089      	sub	sp, #36	; 0x24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f003 0307 	and.w	r3, r3, #7
 8001fb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	f1c3 0307 	rsb	r3, r3, #7
 8001fba:	2b04      	cmp	r3, #4
 8001fbc:	bf28      	it	cs
 8001fbe:	2304      	movcs	r3, #4
 8001fc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	3304      	adds	r3, #4
 8001fc6:	2b06      	cmp	r3, #6
 8001fc8:	d902      	bls.n	8001fd0 <NVIC_EncodePriority+0x30>
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	3b03      	subs	r3, #3
 8001fce:	e000      	b.n	8001fd2 <NVIC_EncodePriority+0x32>
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	43da      	mvns	r2, r3
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	401a      	ands	r2, r3
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fe8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff2:	43d9      	mvns	r1, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff8:	4313      	orrs	r3, r2
         );
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3724      	adds	r7, #36	; 0x24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
	...

08002008 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3b01      	subs	r3, #1
 8002014:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002018:	d301      	bcc.n	800201e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800201a:	2301      	movs	r3, #1
 800201c:	e00f      	b.n	800203e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800201e:	4a0a      	ldr	r2, [pc, #40]	; (8002048 <SysTick_Config+0x40>)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	3b01      	subs	r3, #1
 8002024:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002026:	210f      	movs	r1, #15
 8002028:	f04f 30ff 	mov.w	r0, #4294967295
 800202c:	f7ff ff8e 	bl	8001f4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002030:	4b05      	ldr	r3, [pc, #20]	; (8002048 <SysTick_Config+0x40>)
 8002032:	2200      	movs	r2, #0
 8002034:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002036:	4b04      	ldr	r3, [pc, #16]	; (8002048 <SysTick_Config+0x40>)
 8002038:	2207      	movs	r2, #7
 800203a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	e000e010 	.word	0xe000e010

0800204c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f7ff ff29 	bl	8001eac <__NVIC_SetPriorityGrouping>
}
 800205a:	bf00      	nop
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b086      	sub	sp, #24
 8002066:	af00      	add	r7, sp, #0
 8002068:	4603      	mov	r3, r0
 800206a:	60b9      	str	r1, [r7, #8]
 800206c:	607a      	str	r2, [r7, #4]
 800206e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002070:	2300      	movs	r3, #0
 8002072:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002074:	f7ff ff3e 	bl	8001ef4 <__NVIC_GetPriorityGrouping>
 8002078:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	68b9      	ldr	r1, [r7, #8]
 800207e:	6978      	ldr	r0, [r7, #20]
 8002080:	f7ff ff8e 	bl	8001fa0 <NVIC_EncodePriority>
 8002084:	4602      	mov	r2, r0
 8002086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800208a:	4611      	mov	r1, r2
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff ff5d 	bl	8001f4c <__NVIC_SetPriority>
}
 8002092:	bf00      	nop
 8002094:	3718      	adds	r7, #24
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b082      	sub	sp, #8
 800209e:	af00      	add	r7, sp, #0
 80020a0:	4603      	mov	r3, r0
 80020a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff ff31 	bl	8001f10 <__NVIC_EnableIRQ>
}
 80020ae:	bf00      	nop
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b082      	sub	sp, #8
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f7ff ffa2 	bl	8002008 <SysTick_Config>
 80020c4:	4603      	mov	r3, r0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
	...

080020d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b087      	sub	sp, #28
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020da:	2300      	movs	r3, #0
 80020dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020de:	e17f      	b.n	80023e0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	2101      	movs	r1, #1
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	fa01 f303 	lsl.w	r3, r1, r3
 80020ec:	4013      	ands	r3, r2
 80020ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f000 8171 	beq.w	80023da <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f003 0303 	and.w	r3, r3, #3
 8002100:	2b01      	cmp	r3, #1
 8002102:	d005      	beq.n	8002110 <HAL_GPIO_Init+0x40>
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f003 0303 	and.w	r3, r3, #3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d130      	bne.n	8002172 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	2203      	movs	r2, #3
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	43db      	mvns	r3, r3
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	4013      	ands	r3, r2
 8002126:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	68da      	ldr	r2, [r3, #12]
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	4313      	orrs	r3, r2
 8002138:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002146:	2201      	movs	r2, #1
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	43db      	mvns	r3, r3
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	4013      	ands	r3, r2
 8002154:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	091b      	lsrs	r3, r3, #4
 800215c:	f003 0201 	and.w	r2, r3, #1
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	4313      	orrs	r3, r2
 800216a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f003 0303 	and.w	r3, r3, #3
 800217a:	2b03      	cmp	r3, #3
 800217c:	d118      	bne.n	80021b0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002182:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002184:	2201      	movs	r2, #1
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	43db      	mvns	r3, r3
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	4013      	ands	r3, r2
 8002192:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	08db      	lsrs	r3, r3, #3
 800219a:	f003 0201 	and.w	r2, r3, #1
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f003 0303 	and.w	r3, r3, #3
 80021b8:	2b03      	cmp	r3, #3
 80021ba:	d017      	beq.n	80021ec <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	2203      	movs	r2, #3
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	43db      	mvns	r3, r3
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	4013      	ands	r3, r2
 80021d2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	693a      	ldr	r2, [r7, #16]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f003 0303 	and.w	r3, r3, #3
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d123      	bne.n	8002240 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	08da      	lsrs	r2, r3, #3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	3208      	adds	r2, #8
 8002200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002204:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	f003 0307 	and.w	r3, r3, #7
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	220f      	movs	r2, #15
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	43db      	mvns	r3, r3
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	4013      	ands	r3, r2
 800221a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	691a      	ldr	r2, [r3, #16]
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	f003 0307 	and.w	r3, r3, #7
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	4313      	orrs	r3, r2
 8002230:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	08da      	lsrs	r2, r3, #3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	3208      	adds	r2, #8
 800223a:	6939      	ldr	r1, [r7, #16]
 800223c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	2203      	movs	r2, #3
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	43db      	mvns	r3, r3
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	4013      	ands	r3, r2
 8002256:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f003 0203 	and.w	r2, r3, #3
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	4313      	orrs	r3, r2
 800226c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800227c:	2b00      	cmp	r3, #0
 800227e:	f000 80ac 	beq.w	80023da <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002282:	4b5f      	ldr	r3, [pc, #380]	; (8002400 <HAL_GPIO_Init+0x330>)
 8002284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002286:	4a5e      	ldr	r2, [pc, #376]	; (8002400 <HAL_GPIO_Init+0x330>)
 8002288:	f043 0301 	orr.w	r3, r3, #1
 800228c:	6613      	str	r3, [r2, #96]	; 0x60
 800228e:	4b5c      	ldr	r3, [pc, #368]	; (8002400 <HAL_GPIO_Init+0x330>)
 8002290:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	60bb      	str	r3, [r7, #8]
 8002298:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800229a:	4a5a      	ldr	r2, [pc, #360]	; (8002404 <HAL_GPIO_Init+0x334>)
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	089b      	lsrs	r3, r3, #2
 80022a0:	3302      	adds	r3, #2
 80022a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	f003 0303 	and.w	r3, r3, #3
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	220f      	movs	r2, #15
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	43db      	mvns	r3, r3
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	4013      	ands	r3, r2
 80022bc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80022c4:	d025      	beq.n	8002312 <HAL_GPIO_Init+0x242>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a4f      	ldr	r2, [pc, #316]	; (8002408 <HAL_GPIO_Init+0x338>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d01f      	beq.n	800230e <HAL_GPIO_Init+0x23e>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a4e      	ldr	r2, [pc, #312]	; (800240c <HAL_GPIO_Init+0x33c>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d019      	beq.n	800230a <HAL_GPIO_Init+0x23a>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a4d      	ldr	r2, [pc, #308]	; (8002410 <HAL_GPIO_Init+0x340>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d013      	beq.n	8002306 <HAL_GPIO_Init+0x236>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a4c      	ldr	r2, [pc, #304]	; (8002414 <HAL_GPIO_Init+0x344>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d00d      	beq.n	8002302 <HAL_GPIO_Init+0x232>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a4b      	ldr	r2, [pc, #300]	; (8002418 <HAL_GPIO_Init+0x348>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d007      	beq.n	80022fe <HAL_GPIO_Init+0x22e>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a4a      	ldr	r2, [pc, #296]	; (800241c <HAL_GPIO_Init+0x34c>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d101      	bne.n	80022fa <HAL_GPIO_Init+0x22a>
 80022f6:	2306      	movs	r3, #6
 80022f8:	e00c      	b.n	8002314 <HAL_GPIO_Init+0x244>
 80022fa:	2307      	movs	r3, #7
 80022fc:	e00a      	b.n	8002314 <HAL_GPIO_Init+0x244>
 80022fe:	2305      	movs	r3, #5
 8002300:	e008      	b.n	8002314 <HAL_GPIO_Init+0x244>
 8002302:	2304      	movs	r3, #4
 8002304:	e006      	b.n	8002314 <HAL_GPIO_Init+0x244>
 8002306:	2303      	movs	r3, #3
 8002308:	e004      	b.n	8002314 <HAL_GPIO_Init+0x244>
 800230a:	2302      	movs	r3, #2
 800230c:	e002      	b.n	8002314 <HAL_GPIO_Init+0x244>
 800230e:	2301      	movs	r3, #1
 8002310:	e000      	b.n	8002314 <HAL_GPIO_Init+0x244>
 8002312:	2300      	movs	r3, #0
 8002314:	697a      	ldr	r2, [r7, #20]
 8002316:	f002 0203 	and.w	r2, r2, #3
 800231a:	0092      	lsls	r2, r2, #2
 800231c:	4093      	lsls	r3, r2
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	4313      	orrs	r3, r2
 8002322:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002324:	4937      	ldr	r1, [pc, #220]	; (8002404 <HAL_GPIO_Init+0x334>)
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	089b      	lsrs	r3, r3, #2
 800232a:	3302      	adds	r3, #2
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002332:	4b3b      	ldr	r3, [pc, #236]	; (8002420 <HAL_GPIO_Init+0x350>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	43db      	mvns	r3, r3
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	4013      	ands	r3, r2
 8002340:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d003      	beq.n	8002356 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	4313      	orrs	r3, r2
 8002354:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002356:	4a32      	ldr	r2, [pc, #200]	; (8002420 <HAL_GPIO_Init+0x350>)
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800235c:	4b30      	ldr	r3, [pc, #192]	; (8002420 <HAL_GPIO_Init+0x350>)
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	43db      	mvns	r3, r3
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	4013      	ands	r3, r2
 800236a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d003      	beq.n	8002380 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002378:	693a      	ldr	r2, [r7, #16]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	4313      	orrs	r3, r2
 800237e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002380:	4a27      	ldr	r2, [pc, #156]	; (8002420 <HAL_GPIO_Init+0x350>)
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002386:	4b26      	ldr	r3, [pc, #152]	; (8002420 <HAL_GPIO_Init+0x350>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	43db      	mvns	r3, r3
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	4013      	ands	r3, r2
 8002394:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d003      	beq.n	80023aa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80023aa:	4a1d      	ldr	r2, [pc, #116]	; (8002420 <HAL_GPIO_Init+0x350>)
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80023b0:	4b1b      	ldr	r3, [pc, #108]	; (8002420 <HAL_GPIO_Init+0x350>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	43db      	mvns	r3, r3
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	4013      	ands	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d003      	beq.n	80023d4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80023d4:	4a12      	ldr	r2, [pc, #72]	; (8002420 <HAL_GPIO_Init+0x350>)
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	3301      	adds	r3, #1
 80023de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	fa22 f303 	lsr.w	r3, r2, r3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f47f ae78 	bne.w	80020e0 <HAL_GPIO_Init+0x10>
  }
}
 80023f0:	bf00      	nop
 80023f2:	bf00      	nop
 80023f4:	371c      	adds	r7, #28
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	40021000 	.word	0x40021000
 8002404:	40010000 	.word	0x40010000
 8002408:	48000400 	.word	0x48000400
 800240c:	48000800 	.word	0x48000800
 8002410:	48000c00 	.word	0x48000c00
 8002414:	48001000 	.word	0x48001000
 8002418:	48001400 	.word	0x48001400
 800241c:	48001800 	.word	0x48001800
 8002420:	40010400 	.word	0x40010400

08002424 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	460b      	mov	r3, r1
 800242e:	807b      	strh	r3, [r7, #2]
 8002430:	4613      	mov	r3, r2
 8002432:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002434:	787b      	ldrb	r3, [r7, #1]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d003      	beq.n	8002442 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800243a:	887a      	ldrh	r2, [r7, #2]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002440:	e002      	b.n	8002448 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002442:	887a      	ldrh	r2, [r7, #2]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002458:	4b04      	ldr	r3, [pc, #16]	; (800246c <HAL_PWREx_GetVoltageRange+0x18>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002460:	4618      	mov	r0, r3
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	40007000 	.word	0x40007000

08002470 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800247e:	d130      	bne.n	80024e2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002480:	4b23      	ldr	r3, [pc, #140]	; (8002510 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002488:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800248c:	d038      	beq.n	8002500 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800248e:	4b20      	ldr	r3, [pc, #128]	; (8002510 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002496:	4a1e      	ldr	r2, [pc, #120]	; (8002510 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002498:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800249c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800249e:	4b1d      	ldr	r3, [pc, #116]	; (8002514 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2232      	movs	r2, #50	; 0x32
 80024a4:	fb02 f303 	mul.w	r3, r2, r3
 80024a8:	4a1b      	ldr	r2, [pc, #108]	; (8002518 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80024aa:	fba2 2303 	umull	r2, r3, r2, r3
 80024ae:	0c9b      	lsrs	r3, r3, #18
 80024b0:	3301      	adds	r3, #1
 80024b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024b4:	e002      	b.n	80024bc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	3b01      	subs	r3, #1
 80024ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024bc:	4b14      	ldr	r3, [pc, #80]	; (8002510 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024be:	695b      	ldr	r3, [r3, #20]
 80024c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024c8:	d102      	bne.n	80024d0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d1f2      	bne.n	80024b6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024d0:	4b0f      	ldr	r3, [pc, #60]	; (8002510 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024d2:	695b      	ldr	r3, [r3, #20]
 80024d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024dc:	d110      	bne.n	8002500 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e00f      	b.n	8002502 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80024e2:	4b0b      	ldr	r3, [pc, #44]	; (8002510 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80024ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024ee:	d007      	beq.n	8002500 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80024f0:	4b07      	ldr	r3, [pc, #28]	; (8002510 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024f8:	4a05      	ldr	r2, [pc, #20]	; (8002510 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024fe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3714      	adds	r7, #20
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	40007000 	.word	0x40007000
 8002514:	20000010 	.word	0x20000010
 8002518:	431bde83 	.word	0x431bde83

0800251c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b088      	sub	sp, #32
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e3d4      	b.n	8002cd8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800252e:	4ba1      	ldr	r3, [pc, #644]	; (80027b4 <HAL_RCC_OscConfig+0x298>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 030c 	and.w	r3, r3, #12
 8002536:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002538:	4b9e      	ldr	r3, [pc, #632]	; (80027b4 <HAL_RCC_OscConfig+0x298>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	f003 0303 	and.w	r3, r3, #3
 8002540:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0310 	and.w	r3, r3, #16
 800254a:	2b00      	cmp	r3, #0
 800254c:	f000 80e4 	beq.w	8002718 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d007      	beq.n	8002566 <HAL_RCC_OscConfig+0x4a>
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	2b0c      	cmp	r3, #12
 800255a:	f040 808b 	bne.w	8002674 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	2b01      	cmp	r3, #1
 8002562:	f040 8087 	bne.w	8002674 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002566:	4b93      	ldr	r3, [pc, #588]	; (80027b4 <HAL_RCC_OscConfig+0x298>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d005      	beq.n	800257e <HAL_RCC_OscConfig+0x62>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d101      	bne.n	800257e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e3ac      	b.n	8002cd8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a1a      	ldr	r2, [r3, #32]
 8002582:	4b8c      	ldr	r3, [pc, #560]	; (80027b4 <HAL_RCC_OscConfig+0x298>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0308 	and.w	r3, r3, #8
 800258a:	2b00      	cmp	r3, #0
 800258c:	d004      	beq.n	8002598 <HAL_RCC_OscConfig+0x7c>
 800258e:	4b89      	ldr	r3, [pc, #548]	; (80027b4 <HAL_RCC_OscConfig+0x298>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002596:	e005      	b.n	80025a4 <HAL_RCC_OscConfig+0x88>
 8002598:	4b86      	ldr	r3, [pc, #536]	; (80027b4 <HAL_RCC_OscConfig+0x298>)
 800259a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800259e:	091b      	lsrs	r3, r3, #4
 80025a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d223      	bcs.n	80025f0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a1b      	ldr	r3, [r3, #32]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f000 fd09 	bl	8002fc4 <RCC_SetFlashLatencyFromMSIRange>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e38d      	b.n	8002cd8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025bc:	4b7d      	ldr	r3, [pc, #500]	; (80027b4 <HAL_RCC_OscConfig+0x298>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a7c      	ldr	r2, [pc, #496]	; (80027b4 <HAL_RCC_OscConfig+0x298>)
 80025c2:	f043 0308 	orr.w	r3, r3, #8
 80025c6:	6013      	str	r3, [r2, #0]
 80025c8:	4b7a      	ldr	r3, [pc, #488]	; (80027b4 <HAL_RCC_OscConfig+0x298>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a1b      	ldr	r3, [r3, #32]
 80025d4:	4977      	ldr	r1, [pc, #476]	; (80027b4 <HAL_RCC_OscConfig+0x298>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025da:	4b76      	ldr	r3, [pc, #472]	; (80027b4 <HAL_RCC_OscConfig+0x298>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	69db      	ldr	r3, [r3, #28]
 80025e6:	021b      	lsls	r3, r3, #8
 80025e8:	4972      	ldr	r1, [pc, #456]	; (80027b4 <HAL_RCC_OscConfig+0x298>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	604b      	str	r3, [r1, #4]
 80025ee:	e025      	b.n	800263c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025f0:	4b70      	ldr	r3, [pc, #448]	; (80027b4 <HAL_RCC_OscConfig+0x298>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a6f      	ldr	r2, [pc, #444]	; (80027b4 <HAL_RCC_OscConfig+0x298>)
 80025f6:	f043 0308 	orr.w	r3, r3, #8
 80025fa:	6013      	str	r3, [r2, #0]
 80025fc:	4b6d      	ldr	r3, [pc, #436]	; (80027b4 <HAL_RCC_OscConfig+0x298>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	496a      	ldr	r1, [pc, #424]	; (80027b4 <HAL_RCC_OscConfig+0x298>)
 800260a:	4313      	orrs	r3, r2
 800260c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800260e:	4b69      	ldr	r3, [pc, #420]	; (80027b4 <HAL_RCC_OscConfig+0x298>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	69db      	ldr	r3, [r3, #28]
 800261a:	021b      	lsls	r3, r3, #8
 800261c:	4965      	ldr	r1, [pc, #404]	; (80027b4 <HAL_RCC_OscConfig+0x298>)
 800261e:	4313      	orrs	r3, r2
 8002620:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d109      	bne.n	800263c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a1b      	ldr	r3, [r3, #32]
 800262c:	4618      	mov	r0, r3
 800262e:	f000 fcc9 	bl	8002fc4 <RCC_SetFlashLatencyFromMSIRange>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e34d      	b.n	8002cd8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800263c:	f000 fc36 	bl	8002eac <HAL_RCC_GetSysClockFreq>
 8002640:	4602      	mov	r2, r0
 8002642:	4b5c      	ldr	r3, [pc, #368]	; (80027b4 <HAL_RCC_OscConfig+0x298>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	091b      	lsrs	r3, r3, #4
 8002648:	f003 030f 	and.w	r3, r3, #15
 800264c:	495a      	ldr	r1, [pc, #360]	; (80027b8 <HAL_RCC_OscConfig+0x29c>)
 800264e:	5ccb      	ldrb	r3, [r1, r3]
 8002650:	f003 031f 	and.w	r3, r3, #31
 8002654:	fa22 f303 	lsr.w	r3, r2, r3
 8002658:	4a58      	ldr	r2, [pc, #352]	; (80027bc <HAL_RCC_OscConfig+0x2a0>)
 800265a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800265c:	4b58      	ldr	r3, [pc, #352]	; (80027c0 <HAL_RCC_OscConfig+0x2a4>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4618      	mov	r0, r3
 8002662:	f7ff f829 	bl	80016b8 <HAL_InitTick>
 8002666:	4603      	mov	r3, r0
 8002668:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800266a:	7bfb      	ldrb	r3, [r7, #15]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d052      	beq.n	8002716 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002670:	7bfb      	ldrb	r3, [r7, #15]
 8002672:	e331      	b.n	8002cd8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d032      	beq.n	80026e2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800267c:	4b4d      	ldr	r3, [pc, #308]	; (80027b4 <HAL_RCC_OscConfig+0x298>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a4c      	ldr	r2, [pc, #304]	; (80027b4 <HAL_RCC_OscConfig+0x298>)
 8002682:	f043 0301 	orr.w	r3, r3, #1
 8002686:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002688:	f7ff f866 	bl	8001758 <HAL_GetTick>
 800268c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800268e:	e008      	b.n	80026a2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002690:	f7ff f862 	bl	8001758 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e31a      	b.n	8002cd8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026a2:	4b44      	ldr	r3, [pc, #272]	; (80027b4 <HAL_RCC_OscConfig+0x298>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d0f0      	beq.n	8002690 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026ae:	4b41      	ldr	r3, [pc, #260]	; (80027b4 <HAL_RCC_OscConfig+0x298>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a40      	ldr	r2, [pc, #256]	; (80027b4 <HAL_RCC_OscConfig+0x298>)
 80026b4:	f043 0308 	orr.w	r3, r3, #8
 80026b8:	6013      	str	r3, [r2, #0]
 80026ba:	4b3e      	ldr	r3, [pc, #248]	; (80027b4 <HAL_RCC_OscConfig+0x298>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a1b      	ldr	r3, [r3, #32]
 80026c6:	493b      	ldr	r1, [pc, #236]	; (80027b4 <HAL_RCC_OscConfig+0x298>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026cc:	4b39      	ldr	r3, [pc, #228]	; (80027b4 <HAL_RCC_OscConfig+0x298>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	69db      	ldr	r3, [r3, #28]
 80026d8:	021b      	lsls	r3, r3, #8
 80026da:	4936      	ldr	r1, [pc, #216]	; (80027b4 <HAL_RCC_OscConfig+0x298>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	604b      	str	r3, [r1, #4]
 80026e0:	e01a      	b.n	8002718 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80026e2:	4b34      	ldr	r3, [pc, #208]	; (80027b4 <HAL_RCC_OscConfig+0x298>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a33      	ldr	r2, [pc, #204]	; (80027b4 <HAL_RCC_OscConfig+0x298>)
 80026e8:	f023 0301 	bic.w	r3, r3, #1
 80026ec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026ee:	f7ff f833 	bl	8001758 <HAL_GetTick>
 80026f2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026f4:	e008      	b.n	8002708 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026f6:	f7ff f82f 	bl	8001758 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e2e7      	b.n	8002cd8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002708:	4b2a      	ldr	r3, [pc, #168]	; (80027b4 <HAL_RCC_OscConfig+0x298>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d1f0      	bne.n	80026f6 <HAL_RCC_OscConfig+0x1da>
 8002714:	e000      	b.n	8002718 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002716:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0301 	and.w	r3, r3, #1
 8002720:	2b00      	cmp	r3, #0
 8002722:	d074      	beq.n	800280e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	2b08      	cmp	r3, #8
 8002728:	d005      	beq.n	8002736 <HAL_RCC_OscConfig+0x21a>
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	2b0c      	cmp	r3, #12
 800272e:	d10e      	bne.n	800274e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	2b03      	cmp	r3, #3
 8002734:	d10b      	bne.n	800274e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002736:	4b1f      	ldr	r3, [pc, #124]	; (80027b4 <HAL_RCC_OscConfig+0x298>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d064      	beq.n	800280c <HAL_RCC_OscConfig+0x2f0>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d160      	bne.n	800280c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e2c4      	b.n	8002cd8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002756:	d106      	bne.n	8002766 <HAL_RCC_OscConfig+0x24a>
 8002758:	4b16      	ldr	r3, [pc, #88]	; (80027b4 <HAL_RCC_OscConfig+0x298>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a15      	ldr	r2, [pc, #84]	; (80027b4 <HAL_RCC_OscConfig+0x298>)
 800275e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002762:	6013      	str	r3, [r2, #0]
 8002764:	e01d      	b.n	80027a2 <HAL_RCC_OscConfig+0x286>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800276e:	d10c      	bne.n	800278a <HAL_RCC_OscConfig+0x26e>
 8002770:	4b10      	ldr	r3, [pc, #64]	; (80027b4 <HAL_RCC_OscConfig+0x298>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a0f      	ldr	r2, [pc, #60]	; (80027b4 <HAL_RCC_OscConfig+0x298>)
 8002776:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800277a:	6013      	str	r3, [r2, #0]
 800277c:	4b0d      	ldr	r3, [pc, #52]	; (80027b4 <HAL_RCC_OscConfig+0x298>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a0c      	ldr	r2, [pc, #48]	; (80027b4 <HAL_RCC_OscConfig+0x298>)
 8002782:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002786:	6013      	str	r3, [r2, #0]
 8002788:	e00b      	b.n	80027a2 <HAL_RCC_OscConfig+0x286>
 800278a:	4b0a      	ldr	r3, [pc, #40]	; (80027b4 <HAL_RCC_OscConfig+0x298>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a09      	ldr	r2, [pc, #36]	; (80027b4 <HAL_RCC_OscConfig+0x298>)
 8002790:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002794:	6013      	str	r3, [r2, #0]
 8002796:	4b07      	ldr	r3, [pc, #28]	; (80027b4 <HAL_RCC_OscConfig+0x298>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a06      	ldr	r2, [pc, #24]	; (80027b4 <HAL_RCC_OscConfig+0x298>)
 800279c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027a0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d01c      	beq.n	80027e4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027aa:	f7fe ffd5 	bl	8001758 <HAL_GetTick>
 80027ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027b0:	e011      	b.n	80027d6 <HAL_RCC_OscConfig+0x2ba>
 80027b2:	bf00      	nop
 80027b4:	40021000 	.word	0x40021000
 80027b8:	08005a00 	.word	0x08005a00
 80027bc:	20000010 	.word	0x20000010
 80027c0:	20000014 	.word	0x20000014
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027c4:	f7fe ffc8 	bl	8001758 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b64      	cmp	r3, #100	; 0x64
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e280      	b.n	8002cd8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027d6:	4baf      	ldr	r3, [pc, #700]	; (8002a94 <HAL_RCC_OscConfig+0x578>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d0f0      	beq.n	80027c4 <HAL_RCC_OscConfig+0x2a8>
 80027e2:	e014      	b.n	800280e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e4:	f7fe ffb8 	bl	8001758 <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027ec:	f7fe ffb4 	bl	8001758 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b64      	cmp	r3, #100	; 0x64
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e26c      	b.n	8002cd8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027fe:	4ba5      	ldr	r3, [pc, #660]	; (8002a94 <HAL_RCC_OscConfig+0x578>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1f0      	bne.n	80027ec <HAL_RCC_OscConfig+0x2d0>
 800280a:	e000      	b.n	800280e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800280c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d060      	beq.n	80028dc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	2b04      	cmp	r3, #4
 800281e:	d005      	beq.n	800282c <HAL_RCC_OscConfig+0x310>
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	2b0c      	cmp	r3, #12
 8002824:	d119      	bne.n	800285a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	2b02      	cmp	r3, #2
 800282a:	d116      	bne.n	800285a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800282c:	4b99      	ldr	r3, [pc, #612]	; (8002a94 <HAL_RCC_OscConfig+0x578>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002834:	2b00      	cmp	r3, #0
 8002836:	d005      	beq.n	8002844 <HAL_RCC_OscConfig+0x328>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d101      	bne.n	8002844 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e249      	b.n	8002cd8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002844:	4b93      	ldr	r3, [pc, #588]	; (8002a94 <HAL_RCC_OscConfig+0x578>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	061b      	lsls	r3, r3, #24
 8002852:	4990      	ldr	r1, [pc, #576]	; (8002a94 <HAL_RCC_OscConfig+0x578>)
 8002854:	4313      	orrs	r3, r2
 8002856:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002858:	e040      	b.n	80028dc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d023      	beq.n	80028aa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002862:	4b8c      	ldr	r3, [pc, #560]	; (8002a94 <HAL_RCC_OscConfig+0x578>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a8b      	ldr	r2, [pc, #556]	; (8002a94 <HAL_RCC_OscConfig+0x578>)
 8002868:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800286c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800286e:	f7fe ff73 	bl	8001758 <HAL_GetTick>
 8002872:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002874:	e008      	b.n	8002888 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002876:	f7fe ff6f 	bl	8001758 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d901      	bls.n	8002888 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e227      	b.n	8002cd8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002888:	4b82      	ldr	r3, [pc, #520]	; (8002a94 <HAL_RCC_OscConfig+0x578>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002890:	2b00      	cmp	r3, #0
 8002892:	d0f0      	beq.n	8002876 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002894:	4b7f      	ldr	r3, [pc, #508]	; (8002a94 <HAL_RCC_OscConfig+0x578>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	061b      	lsls	r3, r3, #24
 80028a2:	497c      	ldr	r1, [pc, #496]	; (8002a94 <HAL_RCC_OscConfig+0x578>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	604b      	str	r3, [r1, #4]
 80028a8:	e018      	b.n	80028dc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028aa:	4b7a      	ldr	r3, [pc, #488]	; (8002a94 <HAL_RCC_OscConfig+0x578>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a79      	ldr	r2, [pc, #484]	; (8002a94 <HAL_RCC_OscConfig+0x578>)
 80028b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b6:	f7fe ff4f 	bl	8001758 <HAL_GetTick>
 80028ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028bc:	e008      	b.n	80028d0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028be:	f7fe ff4b 	bl	8001758 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d901      	bls.n	80028d0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e203      	b.n	8002cd8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028d0:	4b70      	ldr	r3, [pc, #448]	; (8002a94 <HAL_RCC_OscConfig+0x578>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d1f0      	bne.n	80028be <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0308 	and.w	r3, r3, #8
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d03c      	beq.n	8002962 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	695b      	ldr	r3, [r3, #20]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d01c      	beq.n	800292a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028f0:	4b68      	ldr	r3, [pc, #416]	; (8002a94 <HAL_RCC_OscConfig+0x578>)
 80028f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028f6:	4a67      	ldr	r2, [pc, #412]	; (8002a94 <HAL_RCC_OscConfig+0x578>)
 80028f8:	f043 0301 	orr.w	r3, r3, #1
 80028fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002900:	f7fe ff2a 	bl	8001758 <HAL_GetTick>
 8002904:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002908:	f7fe ff26 	bl	8001758 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e1de      	b.n	8002cd8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800291a:	4b5e      	ldr	r3, [pc, #376]	; (8002a94 <HAL_RCC_OscConfig+0x578>)
 800291c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d0ef      	beq.n	8002908 <HAL_RCC_OscConfig+0x3ec>
 8002928:	e01b      	b.n	8002962 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800292a:	4b5a      	ldr	r3, [pc, #360]	; (8002a94 <HAL_RCC_OscConfig+0x578>)
 800292c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002930:	4a58      	ldr	r2, [pc, #352]	; (8002a94 <HAL_RCC_OscConfig+0x578>)
 8002932:	f023 0301 	bic.w	r3, r3, #1
 8002936:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800293a:	f7fe ff0d 	bl	8001758 <HAL_GetTick>
 800293e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002940:	e008      	b.n	8002954 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002942:	f7fe ff09 	bl	8001758 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d901      	bls.n	8002954 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e1c1      	b.n	8002cd8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002954:	4b4f      	ldr	r3, [pc, #316]	; (8002a94 <HAL_RCC_OscConfig+0x578>)
 8002956:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1ef      	bne.n	8002942 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0304 	and.w	r3, r3, #4
 800296a:	2b00      	cmp	r3, #0
 800296c:	f000 80a6 	beq.w	8002abc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002970:	2300      	movs	r3, #0
 8002972:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002974:	4b47      	ldr	r3, [pc, #284]	; (8002a94 <HAL_RCC_OscConfig+0x578>)
 8002976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d10d      	bne.n	800299c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002980:	4b44      	ldr	r3, [pc, #272]	; (8002a94 <HAL_RCC_OscConfig+0x578>)
 8002982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002984:	4a43      	ldr	r2, [pc, #268]	; (8002a94 <HAL_RCC_OscConfig+0x578>)
 8002986:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800298a:	6593      	str	r3, [r2, #88]	; 0x58
 800298c:	4b41      	ldr	r3, [pc, #260]	; (8002a94 <HAL_RCC_OscConfig+0x578>)
 800298e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002994:	60bb      	str	r3, [r7, #8]
 8002996:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002998:	2301      	movs	r3, #1
 800299a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800299c:	4b3e      	ldr	r3, [pc, #248]	; (8002a98 <HAL_RCC_OscConfig+0x57c>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d118      	bne.n	80029da <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029a8:	4b3b      	ldr	r3, [pc, #236]	; (8002a98 <HAL_RCC_OscConfig+0x57c>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a3a      	ldr	r2, [pc, #232]	; (8002a98 <HAL_RCC_OscConfig+0x57c>)
 80029ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029b4:	f7fe fed0 	bl	8001758 <HAL_GetTick>
 80029b8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029ba:	e008      	b.n	80029ce <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029bc:	f7fe fecc 	bl	8001758 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e184      	b.n	8002cd8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029ce:	4b32      	ldr	r3, [pc, #200]	; (8002a98 <HAL_RCC_OscConfig+0x57c>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d0f0      	beq.n	80029bc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d108      	bne.n	80029f4 <HAL_RCC_OscConfig+0x4d8>
 80029e2:	4b2c      	ldr	r3, [pc, #176]	; (8002a94 <HAL_RCC_OscConfig+0x578>)
 80029e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029e8:	4a2a      	ldr	r2, [pc, #168]	; (8002a94 <HAL_RCC_OscConfig+0x578>)
 80029ea:	f043 0301 	orr.w	r3, r3, #1
 80029ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029f2:	e024      	b.n	8002a3e <HAL_RCC_OscConfig+0x522>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	2b05      	cmp	r3, #5
 80029fa:	d110      	bne.n	8002a1e <HAL_RCC_OscConfig+0x502>
 80029fc:	4b25      	ldr	r3, [pc, #148]	; (8002a94 <HAL_RCC_OscConfig+0x578>)
 80029fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a02:	4a24      	ldr	r2, [pc, #144]	; (8002a94 <HAL_RCC_OscConfig+0x578>)
 8002a04:	f043 0304 	orr.w	r3, r3, #4
 8002a08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a0c:	4b21      	ldr	r3, [pc, #132]	; (8002a94 <HAL_RCC_OscConfig+0x578>)
 8002a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a12:	4a20      	ldr	r2, [pc, #128]	; (8002a94 <HAL_RCC_OscConfig+0x578>)
 8002a14:	f043 0301 	orr.w	r3, r3, #1
 8002a18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a1c:	e00f      	b.n	8002a3e <HAL_RCC_OscConfig+0x522>
 8002a1e:	4b1d      	ldr	r3, [pc, #116]	; (8002a94 <HAL_RCC_OscConfig+0x578>)
 8002a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a24:	4a1b      	ldr	r2, [pc, #108]	; (8002a94 <HAL_RCC_OscConfig+0x578>)
 8002a26:	f023 0301 	bic.w	r3, r3, #1
 8002a2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a2e:	4b19      	ldr	r3, [pc, #100]	; (8002a94 <HAL_RCC_OscConfig+0x578>)
 8002a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a34:	4a17      	ldr	r2, [pc, #92]	; (8002a94 <HAL_RCC_OscConfig+0x578>)
 8002a36:	f023 0304 	bic.w	r3, r3, #4
 8002a3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d016      	beq.n	8002a74 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a46:	f7fe fe87 	bl	8001758 <HAL_GetTick>
 8002a4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a4c:	e00a      	b.n	8002a64 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a4e:	f7fe fe83 	bl	8001758 <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e139      	b.n	8002cd8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a64:	4b0b      	ldr	r3, [pc, #44]	; (8002a94 <HAL_RCC_OscConfig+0x578>)
 8002a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d0ed      	beq.n	8002a4e <HAL_RCC_OscConfig+0x532>
 8002a72:	e01a      	b.n	8002aaa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a74:	f7fe fe70 	bl	8001758 <HAL_GetTick>
 8002a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a7a:	e00f      	b.n	8002a9c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a7c:	f7fe fe6c 	bl	8001758 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d906      	bls.n	8002a9c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e122      	b.n	8002cd8 <HAL_RCC_OscConfig+0x7bc>
 8002a92:	bf00      	nop
 8002a94:	40021000 	.word	0x40021000
 8002a98:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a9c:	4b90      	ldr	r3, [pc, #576]	; (8002ce0 <HAL_RCC_OscConfig+0x7c4>)
 8002a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1e8      	bne.n	8002a7c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002aaa:	7ffb      	ldrb	r3, [r7, #31]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d105      	bne.n	8002abc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ab0:	4b8b      	ldr	r3, [pc, #556]	; (8002ce0 <HAL_RCC_OscConfig+0x7c4>)
 8002ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab4:	4a8a      	ldr	r2, [pc, #552]	; (8002ce0 <HAL_RCC_OscConfig+0x7c4>)
 8002ab6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aba:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f000 8108 	beq.w	8002cd6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	f040 80d0 	bne.w	8002c70 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002ad0:	4b83      	ldr	r3, [pc, #524]	; (8002ce0 <HAL_RCC_OscConfig+0x7c4>)
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	f003 0203 	and.w	r2, r3, #3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d130      	bne.n	8002b46 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aee:	3b01      	subs	r3, #1
 8002af0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d127      	bne.n	8002b46 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b00:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d11f      	bne.n	8002b46 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b10:	2a07      	cmp	r2, #7
 8002b12:	bf14      	ite	ne
 8002b14:	2201      	movne	r2, #1
 8002b16:	2200      	moveq	r2, #0
 8002b18:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d113      	bne.n	8002b46 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b28:	085b      	lsrs	r3, r3, #1
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d109      	bne.n	8002b46 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3c:	085b      	lsrs	r3, r3, #1
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d06e      	beq.n	8002c24 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	2b0c      	cmp	r3, #12
 8002b4a:	d069      	beq.n	8002c20 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b4c:	4b64      	ldr	r3, [pc, #400]	; (8002ce0 <HAL_RCC_OscConfig+0x7c4>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d105      	bne.n	8002b64 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002b58:	4b61      	ldr	r3, [pc, #388]	; (8002ce0 <HAL_RCC_OscConfig+0x7c4>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e0b7      	b.n	8002cd8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002b68:	4b5d      	ldr	r3, [pc, #372]	; (8002ce0 <HAL_RCC_OscConfig+0x7c4>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a5c      	ldr	r2, [pc, #368]	; (8002ce0 <HAL_RCC_OscConfig+0x7c4>)
 8002b6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b72:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b74:	f7fe fdf0 	bl	8001758 <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b7a:	e008      	b.n	8002b8e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b7c:	f7fe fdec 	bl	8001758 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e0a4      	b.n	8002cd8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b8e:	4b54      	ldr	r3, [pc, #336]	; (8002ce0 <HAL_RCC_OscConfig+0x7c4>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1f0      	bne.n	8002b7c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b9a:	4b51      	ldr	r3, [pc, #324]	; (8002ce0 <HAL_RCC_OscConfig+0x7c4>)
 8002b9c:	68da      	ldr	r2, [r3, #12]
 8002b9e:	4b51      	ldr	r3, [pc, #324]	; (8002ce4 <HAL_RCC_OscConfig+0x7c8>)
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002baa:	3a01      	subs	r2, #1
 8002bac:	0112      	lsls	r2, r2, #4
 8002bae:	4311      	orrs	r1, r2
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002bb4:	0212      	lsls	r2, r2, #8
 8002bb6:	4311      	orrs	r1, r2
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002bbc:	0852      	lsrs	r2, r2, #1
 8002bbe:	3a01      	subs	r2, #1
 8002bc0:	0552      	lsls	r2, r2, #21
 8002bc2:	4311      	orrs	r1, r2
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002bc8:	0852      	lsrs	r2, r2, #1
 8002bca:	3a01      	subs	r2, #1
 8002bcc:	0652      	lsls	r2, r2, #25
 8002bce:	4311      	orrs	r1, r2
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002bd4:	0912      	lsrs	r2, r2, #4
 8002bd6:	0452      	lsls	r2, r2, #17
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	4941      	ldr	r1, [pc, #260]	; (8002ce0 <HAL_RCC_OscConfig+0x7c4>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002be0:	4b3f      	ldr	r3, [pc, #252]	; (8002ce0 <HAL_RCC_OscConfig+0x7c4>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a3e      	ldr	r2, [pc, #248]	; (8002ce0 <HAL_RCC_OscConfig+0x7c4>)
 8002be6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bec:	4b3c      	ldr	r3, [pc, #240]	; (8002ce0 <HAL_RCC_OscConfig+0x7c4>)
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	4a3b      	ldr	r2, [pc, #236]	; (8002ce0 <HAL_RCC_OscConfig+0x7c4>)
 8002bf2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bf6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002bf8:	f7fe fdae 	bl	8001758 <HAL_GetTick>
 8002bfc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c00:	f7fe fdaa 	bl	8001758 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e062      	b.n	8002cd8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c12:	4b33      	ldr	r3, [pc, #204]	; (8002ce0 <HAL_RCC_OscConfig+0x7c4>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d0f0      	beq.n	8002c00 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c1e:	e05a      	b.n	8002cd6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e059      	b.n	8002cd8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c24:	4b2e      	ldr	r3, [pc, #184]	; (8002ce0 <HAL_RCC_OscConfig+0x7c4>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d152      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002c30:	4b2b      	ldr	r3, [pc, #172]	; (8002ce0 <HAL_RCC_OscConfig+0x7c4>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a2a      	ldr	r2, [pc, #168]	; (8002ce0 <HAL_RCC_OscConfig+0x7c4>)
 8002c36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c3a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c3c:	4b28      	ldr	r3, [pc, #160]	; (8002ce0 <HAL_RCC_OscConfig+0x7c4>)
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	4a27      	ldr	r2, [pc, #156]	; (8002ce0 <HAL_RCC_OscConfig+0x7c4>)
 8002c42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c46:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c48:	f7fe fd86 	bl	8001758 <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c50:	f7fe fd82 	bl	8001758 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e03a      	b.n	8002cd8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c62:	4b1f      	ldr	r3, [pc, #124]	; (8002ce0 <HAL_RCC_OscConfig+0x7c4>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d0f0      	beq.n	8002c50 <HAL_RCC_OscConfig+0x734>
 8002c6e:	e032      	b.n	8002cd6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	2b0c      	cmp	r3, #12
 8002c74:	d02d      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c76:	4b1a      	ldr	r3, [pc, #104]	; (8002ce0 <HAL_RCC_OscConfig+0x7c4>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a19      	ldr	r2, [pc, #100]	; (8002ce0 <HAL_RCC_OscConfig+0x7c4>)
 8002c7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c80:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002c82:	4b17      	ldr	r3, [pc, #92]	; (8002ce0 <HAL_RCC_OscConfig+0x7c4>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d105      	bne.n	8002c9a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002c8e:	4b14      	ldr	r3, [pc, #80]	; (8002ce0 <HAL_RCC_OscConfig+0x7c4>)
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	4a13      	ldr	r2, [pc, #76]	; (8002ce0 <HAL_RCC_OscConfig+0x7c4>)
 8002c94:	f023 0303 	bic.w	r3, r3, #3
 8002c98:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002c9a:	4b11      	ldr	r3, [pc, #68]	; (8002ce0 <HAL_RCC_OscConfig+0x7c4>)
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	4a10      	ldr	r2, [pc, #64]	; (8002ce0 <HAL_RCC_OscConfig+0x7c4>)
 8002ca0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002ca4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ca8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002caa:	f7fe fd55 	bl	8001758 <HAL_GetTick>
 8002cae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cb0:	e008      	b.n	8002cc4 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cb2:	f7fe fd51 	bl	8001758 <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d901      	bls.n	8002cc4 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e009      	b.n	8002cd8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cc4:	4b06      	ldr	r3, [pc, #24]	; (8002ce0 <HAL_RCC_OscConfig+0x7c4>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d1f0      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x796>
 8002cd0:	e001      	b.n	8002cd6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e000      	b.n	8002cd8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3720      	adds	r7, #32
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	f99d808c 	.word	0xf99d808c

08002ce8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d101      	bne.n	8002cfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e0c8      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cfc:	4b66      	ldr	r3, [pc, #408]	; (8002e98 <HAL_RCC_ClockConfig+0x1b0>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0307 	and.w	r3, r3, #7
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d910      	bls.n	8002d2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d0a:	4b63      	ldr	r3, [pc, #396]	; (8002e98 <HAL_RCC_ClockConfig+0x1b0>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f023 0207 	bic.w	r2, r3, #7
 8002d12:	4961      	ldr	r1, [pc, #388]	; (8002e98 <HAL_RCC_ClockConfig+0x1b0>)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d1a:	4b5f      	ldr	r3, [pc, #380]	; (8002e98 <HAL_RCC_ClockConfig+0x1b0>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0307 	and.w	r3, r3, #7
 8002d22:	683a      	ldr	r2, [r7, #0]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d001      	beq.n	8002d2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e0b0      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0301 	and.w	r3, r3, #1
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d04c      	beq.n	8002dd2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	2b03      	cmp	r3, #3
 8002d3e:	d107      	bne.n	8002d50 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d40:	4b56      	ldr	r3, [pc, #344]	; (8002e9c <HAL_RCC_ClockConfig+0x1b4>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d121      	bne.n	8002d90 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e09e      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d107      	bne.n	8002d68 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d58:	4b50      	ldr	r3, [pc, #320]	; (8002e9c <HAL_RCC_ClockConfig+0x1b4>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d115      	bne.n	8002d90 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e092      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d107      	bne.n	8002d80 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d70:	4b4a      	ldr	r3, [pc, #296]	; (8002e9c <HAL_RCC_ClockConfig+0x1b4>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d109      	bne.n	8002d90 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e086      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d80:	4b46      	ldr	r3, [pc, #280]	; (8002e9c <HAL_RCC_ClockConfig+0x1b4>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d101      	bne.n	8002d90 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e07e      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d90:	4b42      	ldr	r3, [pc, #264]	; (8002e9c <HAL_RCC_ClockConfig+0x1b4>)
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f023 0203 	bic.w	r2, r3, #3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	493f      	ldr	r1, [pc, #252]	; (8002e9c <HAL_RCC_ClockConfig+0x1b4>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002da2:	f7fe fcd9 	bl	8001758 <HAL_GetTick>
 8002da6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002da8:	e00a      	b.n	8002dc0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002daa:	f7fe fcd5 	bl	8001758 <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e066      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dc0:	4b36      	ldr	r3, [pc, #216]	; (8002e9c <HAL_RCC_ClockConfig+0x1b4>)
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f003 020c 	and.w	r2, r3, #12
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d1eb      	bne.n	8002daa <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d008      	beq.n	8002df0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dde:	4b2f      	ldr	r3, [pc, #188]	; (8002e9c <HAL_RCC_ClockConfig+0x1b4>)
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	492c      	ldr	r1, [pc, #176]	; (8002e9c <HAL_RCC_ClockConfig+0x1b4>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002df0:	4b29      	ldr	r3, [pc, #164]	; (8002e98 <HAL_RCC_ClockConfig+0x1b0>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0307 	and.w	r3, r3, #7
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d210      	bcs.n	8002e20 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dfe:	4b26      	ldr	r3, [pc, #152]	; (8002e98 <HAL_RCC_ClockConfig+0x1b0>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f023 0207 	bic.w	r2, r3, #7
 8002e06:	4924      	ldr	r1, [pc, #144]	; (8002e98 <HAL_RCC_ClockConfig+0x1b0>)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e0e:	4b22      	ldr	r3, [pc, #136]	; (8002e98 <HAL_RCC_ClockConfig+0x1b0>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0307 	and.w	r3, r3, #7
 8002e16:	683a      	ldr	r2, [r7, #0]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d001      	beq.n	8002e20 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e036      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0304 	and.w	r3, r3, #4
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d008      	beq.n	8002e3e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e2c:	4b1b      	ldr	r3, [pc, #108]	; (8002e9c <HAL_RCC_ClockConfig+0x1b4>)
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	4918      	ldr	r1, [pc, #96]	; (8002e9c <HAL_RCC_ClockConfig+0x1b4>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0308 	and.w	r3, r3, #8
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d009      	beq.n	8002e5e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e4a:	4b14      	ldr	r3, [pc, #80]	; (8002e9c <HAL_RCC_ClockConfig+0x1b4>)
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	4910      	ldr	r1, [pc, #64]	; (8002e9c <HAL_RCC_ClockConfig+0x1b4>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e5e:	f000 f825 	bl	8002eac <HAL_RCC_GetSysClockFreq>
 8002e62:	4602      	mov	r2, r0
 8002e64:	4b0d      	ldr	r3, [pc, #52]	; (8002e9c <HAL_RCC_ClockConfig+0x1b4>)
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	091b      	lsrs	r3, r3, #4
 8002e6a:	f003 030f 	and.w	r3, r3, #15
 8002e6e:	490c      	ldr	r1, [pc, #48]	; (8002ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e70:	5ccb      	ldrb	r3, [r1, r3]
 8002e72:	f003 031f 	and.w	r3, r3, #31
 8002e76:	fa22 f303 	lsr.w	r3, r2, r3
 8002e7a:	4a0a      	ldr	r2, [pc, #40]	; (8002ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e7e:	4b0a      	ldr	r3, [pc, #40]	; (8002ea8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7fe fc18 	bl	80016b8 <HAL_InitTick>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	72fb      	strb	r3, [r7, #11]

  return status;
 8002e8c:	7afb      	ldrb	r3, [r7, #11]
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3710      	adds	r7, #16
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	40022000 	.word	0x40022000
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	08005a00 	.word	0x08005a00
 8002ea4:	20000010 	.word	0x20000010
 8002ea8:	20000014 	.word	0x20000014

08002eac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b089      	sub	sp, #36	; 0x24
 8002eb0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	61fb      	str	r3, [r7, #28]
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002eba:	4b3e      	ldr	r3, [pc, #248]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f003 030c 	and.w	r3, r3, #12
 8002ec2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ec4:	4b3b      	ldr	r3, [pc, #236]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	f003 0303 	and.w	r3, r3, #3
 8002ecc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d005      	beq.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x34>
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	2b0c      	cmp	r3, #12
 8002ed8:	d121      	bne.n	8002f1e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d11e      	bne.n	8002f1e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ee0:	4b34      	ldr	r3, [pc, #208]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0308 	and.w	r3, r3, #8
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d107      	bne.n	8002efc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002eec:	4b31      	ldr	r3, [pc, #196]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002eee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ef2:	0a1b      	lsrs	r3, r3, #8
 8002ef4:	f003 030f 	and.w	r3, r3, #15
 8002ef8:	61fb      	str	r3, [r7, #28]
 8002efa:	e005      	b.n	8002f08 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002efc:	4b2d      	ldr	r3, [pc, #180]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	091b      	lsrs	r3, r3, #4
 8002f02:	f003 030f 	and.w	r3, r3, #15
 8002f06:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f08:	4a2b      	ldr	r2, [pc, #172]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f10:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d10d      	bne.n	8002f34 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f1c:	e00a      	b.n	8002f34 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	2b04      	cmp	r3, #4
 8002f22:	d102      	bne.n	8002f2a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f24:	4b25      	ldr	r3, [pc, #148]	; (8002fbc <HAL_RCC_GetSysClockFreq+0x110>)
 8002f26:	61bb      	str	r3, [r7, #24]
 8002f28:	e004      	b.n	8002f34 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	2b08      	cmp	r3, #8
 8002f2e:	d101      	bne.n	8002f34 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f30:	4b23      	ldr	r3, [pc, #140]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f32:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	2b0c      	cmp	r3, #12
 8002f38:	d134      	bne.n	8002fa4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f3a:	4b1e      	ldr	r3, [pc, #120]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	f003 0303 	and.w	r3, r3, #3
 8002f42:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d003      	beq.n	8002f52 <HAL_RCC_GetSysClockFreq+0xa6>
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	2b03      	cmp	r3, #3
 8002f4e:	d003      	beq.n	8002f58 <HAL_RCC_GetSysClockFreq+0xac>
 8002f50:	e005      	b.n	8002f5e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002f52:	4b1a      	ldr	r3, [pc, #104]	; (8002fbc <HAL_RCC_GetSysClockFreq+0x110>)
 8002f54:	617b      	str	r3, [r7, #20]
      break;
 8002f56:	e005      	b.n	8002f64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002f58:	4b19      	ldr	r3, [pc, #100]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f5a:	617b      	str	r3, [r7, #20]
      break;
 8002f5c:	e002      	b.n	8002f64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	617b      	str	r3, [r7, #20]
      break;
 8002f62:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f64:	4b13      	ldr	r3, [pc, #76]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	091b      	lsrs	r3, r3, #4
 8002f6a:	f003 0307 	and.w	r3, r3, #7
 8002f6e:	3301      	adds	r3, #1
 8002f70:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f72:	4b10      	ldr	r3, [pc, #64]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	0a1b      	lsrs	r3, r3, #8
 8002f78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f7c:	697a      	ldr	r2, [r7, #20]
 8002f7e:	fb02 f203 	mul.w	r2, r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f88:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f8a:	4b0a      	ldr	r3, [pc, #40]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	0e5b      	lsrs	r3, r3, #25
 8002f90:	f003 0303 	and.w	r3, r3, #3
 8002f94:	3301      	adds	r3, #1
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002f9a:	697a      	ldr	r2, [r7, #20]
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002fa4:	69bb      	ldr	r3, [r7, #24]
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3724      	adds	r7, #36	; 0x24
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	40021000 	.word	0x40021000
 8002fb8:	08005a10 	.word	0x08005a10
 8002fbc:	00f42400 	.word	0x00f42400
 8002fc0:	007a1200 	.word	0x007a1200

08002fc4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b086      	sub	sp, #24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002fcc:	2300      	movs	r3, #0
 8002fce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002fd0:	4b2a      	ldr	r3, [pc, #168]	; (800307c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d003      	beq.n	8002fe4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002fdc:	f7ff fa3a 	bl	8002454 <HAL_PWREx_GetVoltageRange>
 8002fe0:	6178      	str	r0, [r7, #20]
 8002fe2:	e014      	b.n	800300e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002fe4:	4b25      	ldr	r3, [pc, #148]	; (800307c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe8:	4a24      	ldr	r2, [pc, #144]	; (800307c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fee:	6593      	str	r3, [r2, #88]	; 0x58
 8002ff0:	4b22      	ldr	r3, [pc, #136]	; (800307c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff8:	60fb      	str	r3, [r7, #12]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002ffc:	f7ff fa2a 	bl	8002454 <HAL_PWREx_GetVoltageRange>
 8003000:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003002:	4b1e      	ldr	r3, [pc, #120]	; (800307c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003006:	4a1d      	ldr	r2, [pc, #116]	; (800307c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003008:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800300c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003014:	d10b      	bne.n	800302e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2b80      	cmp	r3, #128	; 0x80
 800301a:	d919      	bls.n	8003050 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2ba0      	cmp	r3, #160	; 0xa0
 8003020:	d902      	bls.n	8003028 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003022:	2302      	movs	r3, #2
 8003024:	613b      	str	r3, [r7, #16]
 8003026:	e013      	b.n	8003050 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003028:	2301      	movs	r3, #1
 800302a:	613b      	str	r3, [r7, #16]
 800302c:	e010      	b.n	8003050 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2b80      	cmp	r3, #128	; 0x80
 8003032:	d902      	bls.n	800303a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003034:	2303      	movs	r3, #3
 8003036:	613b      	str	r3, [r7, #16]
 8003038:	e00a      	b.n	8003050 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2b80      	cmp	r3, #128	; 0x80
 800303e:	d102      	bne.n	8003046 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003040:	2302      	movs	r3, #2
 8003042:	613b      	str	r3, [r7, #16]
 8003044:	e004      	b.n	8003050 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2b70      	cmp	r3, #112	; 0x70
 800304a:	d101      	bne.n	8003050 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800304c:	2301      	movs	r3, #1
 800304e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003050:	4b0b      	ldr	r3, [pc, #44]	; (8003080 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f023 0207 	bic.w	r2, r3, #7
 8003058:	4909      	ldr	r1, [pc, #36]	; (8003080 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	4313      	orrs	r3, r2
 800305e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003060:	4b07      	ldr	r3, [pc, #28]	; (8003080 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0307 	and.w	r3, r3, #7
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	429a      	cmp	r2, r3
 800306c:	d001      	beq.n	8003072 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e000      	b.n	8003074 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	3718      	adds	r7, #24
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	40021000 	.word	0x40021000
 8003080:	40022000 	.word	0x40022000

08003084 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e095      	b.n	80031c2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309a:	2b00      	cmp	r3, #0
 800309c:	d108      	bne.n	80030b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030a6:	d009      	beq.n	80030bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	61da      	str	r2, [r3, #28]
 80030ae:	e005      	b.n	80030bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d106      	bne.n	80030dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f7fe f902 	bl	80012e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2202      	movs	r2, #2
 80030e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030f2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030fc:	d902      	bls.n	8003104 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80030fe:	2300      	movs	r3, #0
 8003100:	60fb      	str	r3, [r7, #12]
 8003102:	e002      	b.n	800310a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003104:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003108:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003112:	d007      	beq.n	8003124 <HAL_SPI_Init+0xa0>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800311c:	d002      	beq.n	8003124 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003134:	431a      	orrs	r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	431a      	orrs	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	695b      	ldr	r3, [r3, #20]
 8003144:	f003 0301 	and.w	r3, r3, #1
 8003148:	431a      	orrs	r2, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003152:	431a      	orrs	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	69db      	ldr	r3, [r3, #28]
 8003158:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800315c:	431a      	orrs	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003166:	ea42 0103 	orr.w	r1, r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	430a      	orrs	r2, r1
 8003178:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	0c1b      	lsrs	r3, r3, #16
 8003180:	f003 0204 	and.w	r2, r3, #4
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003188:	f003 0310 	and.w	r3, r3, #16
 800318c:	431a      	orrs	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003192:	f003 0308 	and.w	r3, r3, #8
 8003196:	431a      	orrs	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80031a0:	ea42 0103 	orr.w	r1, r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	430a      	orrs	r2, r1
 80031b0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b088      	sub	sp, #32
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	60f8      	str	r0, [r7, #12]
 80031d2:	60b9      	str	r1, [r7, #8]
 80031d4:	603b      	str	r3, [r7, #0]
 80031d6:	4613      	mov	r3, r2
 80031d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80031da:	2300      	movs	r3, #0
 80031dc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d101      	bne.n	80031ec <HAL_SPI_Transmit+0x22>
 80031e8:	2302      	movs	r3, #2
 80031ea:	e158      	b.n	800349e <HAL_SPI_Transmit+0x2d4>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031f4:	f7fe fab0 	bl	8001758 <HAL_GetTick>
 80031f8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80031fa:	88fb      	ldrh	r3, [r7, #6]
 80031fc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b01      	cmp	r3, #1
 8003208:	d002      	beq.n	8003210 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800320a:	2302      	movs	r3, #2
 800320c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800320e:	e13d      	b.n	800348c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d002      	beq.n	800321c <HAL_SPI_Transmit+0x52>
 8003216:	88fb      	ldrh	r3, [r7, #6]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d102      	bne.n	8003222 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003220:	e134      	b.n	800348c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2203      	movs	r2, #3
 8003226:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	68ba      	ldr	r2, [r7, #8]
 8003234:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	88fa      	ldrh	r2, [r7, #6]
 800323a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	88fa      	ldrh	r2, [r7, #6]
 8003240:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2200      	movs	r2, #0
 800324c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800326c:	d10f      	bne.n	800328e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800327c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800328c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003298:	2b40      	cmp	r3, #64	; 0x40
 800329a:	d007      	beq.n	80032ac <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80032b4:	d94b      	bls.n	800334e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d002      	beq.n	80032c4 <HAL_SPI_Transmit+0xfa>
 80032be:	8afb      	ldrh	r3, [r7, #22]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d13e      	bne.n	8003342 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c8:	881a      	ldrh	r2, [r3, #0]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d4:	1c9a      	adds	r2, r3, #2
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032de:	b29b      	uxth	r3, r3
 80032e0:	3b01      	subs	r3, #1
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80032e8:	e02b      	b.n	8003342 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d112      	bne.n	800331e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032fc:	881a      	ldrh	r2, [r3, #0]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003308:	1c9a      	adds	r2, r3, #2
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003312:	b29b      	uxth	r3, r3
 8003314:	3b01      	subs	r3, #1
 8003316:	b29a      	uxth	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800331c:	e011      	b.n	8003342 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800331e:	f7fe fa1b 	bl	8001758 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	429a      	cmp	r2, r3
 800332c:	d803      	bhi.n	8003336 <HAL_SPI_Transmit+0x16c>
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003334:	d102      	bne.n	800333c <HAL_SPI_Transmit+0x172>
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d102      	bne.n	8003342 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003340:	e0a4      	b.n	800348c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003346:	b29b      	uxth	r3, r3
 8003348:	2b00      	cmp	r3, #0
 800334a:	d1ce      	bne.n	80032ea <HAL_SPI_Transmit+0x120>
 800334c:	e07c      	b.n	8003448 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d002      	beq.n	800335c <HAL_SPI_Transmit+0x192>
 8003356:	8afb      	ldrh	r3, [r7, #22]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d170      	bne.n	800343e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003360:	b29b      	uxth	r3, r3
 8003362:	2b01      	cmp	r3, #1
 8003364:	d912      	bls.n	800338c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800336a:	881a      	ldrh	r2, [r3, #0]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003376:	1c9a      	adds	r2, r3, #2
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003380:	b29b      	uxth	r3, r3
 8003382:	3b02      	subs	r3, #2
 8003384:	b29a      	uxth	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	87da      	strh	r2, [r3, #62]	; 0x3e
 800338a:	e058      	b.n	800343e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	330c      	adds	r3, #12
 8003396:	7812      	ldrb	r2, [r2, #0]
 8003398:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339e:	1c5a      	adds	r2, r3, #1
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	3b01      	subs	r3, #1
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80033b2:	e044      	b.n	800343e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d12b      	bne.n	800341a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d912      	bls.n	80033f2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d0:	881a      	ldrh	r2, [r3, #0]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033dc:	1c9a      	adds	r2, r3, #2
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	3b02      	subs	r3, #2
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	87da      	strh	r2, [r3, #62]	; 0x3e
 80033f0:	e025      	b.n	800343e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	330c      	adds	r3, #12
 80033fc:	7812      	ldrb	r2, [r2, #0]
 80033fe:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003404:	1c5a      	adds	r2, r3, #1
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800340e:	b29b      	uxth	r3, r3
 8003410:	3b01      	subs	r3, #1
 8003412:	b29a      	uxth	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003418:	e011      	b.n	800343e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800341a:	f7fe f99d 	bl	8001758 <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	683a      	ldr	r2, [r7, #0]
 8003426:	429a      	cmp	r2, r3
 8003428:	d803      	bhi.n	8003432 <HAL_SPI_Transmit+0x268>
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003430:	d102      	bne.n	8003438 <HAL_SPI_Transmit+0x26e>
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d102      	bne.n	800343e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800343c:	e026      	b.n	800348c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003442:	b29b      	uxth	r3, r3
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1b5      	bne.n	80033b4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	6839      	ldr	r1, [r7, #0]
 800344c:	68f8      	ldr	r0, [r7, #12]
 800344e:	f000 fce3 	bl	8003e18 <SPI_EndRxTxTransaction>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d002      	beq.n	800345e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2220      	movs	r2, #32
 800345c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10a      	bne.n	800347c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003466:	2300      	movs	r3, #0
 8003468:	613b      	str	r3, [r7, #16]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	613b      	str	r3, [r7, #16]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	613b      	str	r3, [r7, #16]
 800347a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003480:	2b00      	cmp	r3, #0
 8003482:	d002      	beq.n	800348a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	77fb      	strb	r3, [r7, #31]
 8003488:	e000      	b.n	800348c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800348a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800349c:	7ffb      	ldrb	r3, [r7, #31]
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3720      	adds	r7, #32
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b088      	sub	sp, #32
 80034aa:	af02      	add	r7, sp, #8
 80034ac:	60f8      	str	r0, [r7, #12]
 80034ae:	60b9      	str	r1, [r7, #8]
 80034b0:	603b      	str	r3, [r7, #0]
 80034b2:	4613      	mov	r3, r2
 80034b4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80034b6:	2300      	movs	r3, #0
 80034b8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034c2:	d112      	bne.n	80034ea <HAL_SPI_Receive+0x44>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d10e      	bne.n	80034ea <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2204      	movs	r2, #4
 80034d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80034d4:	88fa      	ldrh	r2, [r7, #6]
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	9300      	str	r3, [sp, #0]
 80034da:	4613      	mov	r3, r2
 80034dc:	68ba      	ldr	r2, [r7, #8]
 80034de:	68b9      	ldr	r1, [r7, #8]
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f000 f910 	bl	8003706 <HAL_SPI_TransmitReceive>
 80034e6:	4603      	mov	r3, r0
 80034e8:	e109      	b.n	80036fe <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d101      	bne.n	80034f8 <HAL_SPI_Receive+0x52>
 80034f4:	2302      	movs	r3, #2
 80034f6:	e102      	b.n	80036fe <HAL_SPI_Receive+0x258>
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003500:	f7fe f92a 	bl	8001758 <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b01      	cmp	r3, #1
 8003510:	d002      	beq.n	8003518 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003512:	2302      	movs	r3, #2
 8003514:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003516:	e0e9      	b.n	80036ec <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d002      	beq.n	8003524 <HAL_SPI_Receive+0x7e>
 800351e:	88fb      	ldrh	r3, [r7, #6]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d102      	bne.n	800352a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003528:	e0e0      	b.n	80036ec <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2204      	movs	r2, #4
 800352e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2200      	movs	r2, #0
 8003536:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	68ba      	ldr	r2, [r7, #8]
 800353c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	88fa      	ldrh	r2, [r7, #6]
 8003542:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	88fa      	ldrh	r2, [r7, #6]
 800354a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003574:	d908      	bls.n	8003588 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	685a      	ldr	r2, [r3, #4]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003584:	605a      	str	r2, [r3, #4]
 8003586:	e007      	b.n	8003598 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	685a      	ldr	r2, [r3, #4]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003596:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035a0:	d10f      	bne.n	80035c2 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035b0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80035c0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035cc:	2b40      	cmp	r3, #64	; 0x40
 80035ce:	d007      	beq.n	80035e0 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035de:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80035e8:	d867      	bhi.n	80036ba <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80035ea:	e030      	b.n	800364e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d117      	bne.n	800362a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f103 020c 	add.w	r2, r3, #12
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003606:	7812      	ldrb	r2, [r2, #0]
 8003608:	b2d2      	uxtb	r2, r2
 800360a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003610:	1c5a      	adds	r2, r3, #1
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800361c:	b29b      	uxth	r3, r3
 800361e:	3b01      	subs	r3, #1
 8003620:	b29a      	uxth	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003628:	e011      	b.n	800364e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800362a:	f7fe f895 	bl	8001758 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	683a      	ldr	r2, [r7, #0]
 8003636:	429a      	cmp	r2, r3
 8003638:	d803      	bhi.n	8003642 <HAL_SPI_Receive+0x19c>
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003640:	d102      	bne.n	8003648 <HAL_SPI_Receive+0x1a2>
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d102      	bne.n	800364e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800364c:	e04e      	b.n	80036ec <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003654:	b29b      	uxth	r3, r3
 8003656:	2b00      	cmp	r3, #0
 8003658:	d1c8      	bne.n	80035ec <HAL_SPI_Receive+0x146>
 800365a:	e034      	b.n	80036c6 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	2b01      	cmp	r3, #1
 8003668:	d115      	bne.n	8003696 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68da      	ldr	r2, [r3, #12]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003674:	b292      	uxth	r2, r2
 8003676:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367c:	1c9a      	adds	r2, r3, #2
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003688:	b29b      	uxth	r3, r3
 800368a:	3b01      	subs	r3, #1
 800368c:	b29a      	uxth	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003694:	e011      	b.n	80036ba <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003696:	f7fe f85f 	bl	8001758 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d803      	bhi.n	80036ae <HAL_SPI_Receive+0x208>
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ac:	d102      	bne.n	80036b4 <HAL_SPI_Receive+0x20e>
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d102      	bne.n	80036ba <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80036b8:	e018      	b.n	80036ec <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1ca      	bne.n	800365c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036c6:	693a      	ldr	r2, [r7, #16]
 80036c8:	6839      	ldr	r1, [r7, #0]
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f000 fb4c 	bl	8003d68 <SPI_EndRxTransaction>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d002      	beq.n	80036dc <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2220      	movs	r2, #32
 80036da:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d002      	beq.n	80036ea <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	75fb      	strb	r3, [r7, #23]
 80036e8:	e000      	b.n	80036ec <HAL_SPI_Receive+0x246>
  }

error :
 80036ea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80036fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3718      	adds	r7, #24
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003706:	b580      	push	{r7, lr}
 8003708:	b08a      	sub	sp, #40	; 0x28
 800370a:	af00      	add	r7, sp, #0
 800370c:	60f8      	str	r0, [r7, #12]
 800370e:	60b9      	str	r1, [r7, #8]
 8003710:	607a      	str	r2, [r7, #4]
 8003712:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003714:	2301      	movs	r3, #1
 8003716:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003718:	2300      	movs	r3, #0
 800371a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003724:	2b01      	cmp	r3, #1
 8003726:	d101      	bne.n	800372c <HAL_SPI_TransmitReceive+0x26>
 8003728:	2302      	movs	r3, #2
 800372a:	e1fb      	b.n	8003b24 <HAL_SPI_TransmitReceive+0x41e>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003734:	f7fe f810 	bl	8001758 <HAL_GetTick>
 8003738:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003740:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003748:	887b      	ldrh	r3, [r7, #2]
 800374a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800374c:	887b      	ldrh	r3, [r7, #2]
 800374e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003750:	7efb      	ldrb	r3, [r7, #27]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d00e      	beq.n	8003774 <HAL_SPI_TransmitReceive+0x6e>
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800375c:	d106      	bne.n	800376c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d102      	bne.n	800376c <HAL_SPI_TransmitReceive+0x66>
 8003766:	7efb      	ldrb	r3, [r7, #27]
 8003768:	2b04      	cmp	r3, #4
 800376a:	d003      	beq.n	8003774 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800376c:	2302      	movs	r3, #2
 800376e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003772:	e1cd      	b.n	8003b10 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d005      	beq.n	8003786 <HAL_SPI_TransmitReceive+0x80>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d002      	beq.n	8003786 <HAL_SPI_TransmitReceive+0x80>
 8003780:	887b      	ldrh	r3, [r7, #2]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d103      	bne.n	800378e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800378c:	e1c0      	b.n	8003b10 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b04      	cmp	r3, #4
 8003798:	d003      	beq.n	80037a2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2205      	movs	r2, #5
 800379e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	887a      	ldrh	r2, [r7, #2]
 80037b2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	887a      	ldrh	r2, [r7, #2]
 80037ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	68ba      	ldr	r2, [r7, #8]
 80037c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	887a      	ldrh	r2, [r7, #2]
 80037c8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	887a      	ldrh	r2, [r7, #2]
 80037ce:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037e4:	d802      	bhi.n	80037ec <HAL_SPI_TransmitReceive+0xe6>
 80037e6:	8a3b      	ldrh	r3, [r7, #16]
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d908      	bls.n	80037fe <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	685a      	ldr	r2, [r3, #4]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80037fa:	605a      	str	r2, [r3, #4]
 80037fc:	e007      	b.n	800380e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	685a      	ldr	r2, [r3, #4]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800380c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003818:	2b40      	cmp	r3, #64	; 0x40
 800381a:	d007      	beq.n	800382c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800382a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003834:	d97c      	bls.n	8003930 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d002      	beq.n	8003844 <HAL_SPI_TransmitReceive+0x13e>
 800383e:	8a7b      	ldrh	r3, [r7, #18]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d169      	bne.n	8003918 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003848:	881a      	ldrh	r2, [r3, #0]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003854:	1c9a      	adds	r2, r3, #2
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800385e:	b29b      	uxth	r3, r3
 8003860:	3b01      	subs	r3, #1
 8003862:	b29a      	uxth	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003868:	e056      	b.n	8003918 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f003 0302 	and.w	r3, r3, #2
 8003874:	2b02      	cmp	r3, #2
 8003876:	d11b      	bne.n	80038b0 <HAL_SPI_TransmitReceive+0x1aa>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800387c:	b29b      	uxth	r3, r3
 800387e:	2b00      	cmp	r3, #0
 8003880:	d016      	beq.n	80038b0 <HAL_SPI_TransmitReceive+0x1aa>
 8003882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003884:	2b01      	cmp	r3, #1
 8003886:	d113      	bne.n	80038b0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800388c:	881a      	ldrh	r2, [r3, #0]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003898:	1c9a      	adds	r2, r3, #2
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	3b01      	subs	r3, #1
 80038a6:	b29a      	uxth	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038ac:	2300      	movs	r3, #0
 80038ae:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d11c      	bne.n	80038f8 <HAL_SPI_TransmitReceive+0x1f2>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d016      	beq.n	80038f8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68da      	ldr	r2, [r3, #12]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d4:	b292      	uxth	r2, r2
 80038d6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038dc:	1c9a      	adds	r2, r3, #2
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	3b01      	subs	r3, #1
 80038ec:	b29a      	uxth	r2, r3
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80038f4:	2301      	movs	r3, #1
 80038f6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80038f8:	f7fd ff2e 	bl	8001758 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003904:	429a      	cmp	r2, r3
 8003906:	d807      	bhi.n	8003918 <HAL_SPI_TransmitReceive+0x212>
 8003908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800390a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800390e:	d003      	beq.n	8003918 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003916:	e0fb      	b.n	8003b10 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800391c:	b29b      	uxth	r3, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1a3      	bne.n	800386a <HAL_SPI_TransmitReceive+0x164>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003928:	b29b      	uxth	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d19d      	bne.n	800386a <HAL_SPI_TransmitReceive+0x164>
 800392e:	e0df      	b.n	8003af0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d003      	beq.n	8003940 <HAL_SPI_TransmitReceive+0x23a>
 8003938:	8a7b      	ldrh	r3, [r7, #18]
 800393a:	2b01      	cmp	r3, #1
 800393c:	f040 80cb 	bne.w	8003ad6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003944:	b29b      	uxth	r3, r3
 8003946:	2b01      	cmp	r3, #1
 8003948:	d912      	bls.n	8003970 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394e:	881a      	ldrh	r2, [r3, #0]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800395a:	1c9a      	adds	r2, r3, #2
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003964:	b29b      	uxth	r3, r3
 8003966:	3b02      	subs	r3, #2
 8003968:	b29a      	uxth	r2, r3
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800396e:	e0b2      	b.n	8003ad6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	330c      	adds	r3, #12
 800397a:	7812      	ldrb	r2, [r2, #0]
 800397c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003982:	1c5a      	adds	r2, r3, #1
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800398c:	b29b      	uxth	r3, r3
 800398e:	3b01      	subs	r3, #1
 8003990:	b29a      	uxth	r2, r3
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003996:	e09e      	b.n	8003ad6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d134      	bne.n	8003a10 <HAL_SPI_TransmitReceive+0x30a>
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d02f      	beq.n	8003a10 <HAL_SPI_TransmitReceive+0x30a>
 80039b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d12c      	bne.n	8003a10 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d912      	bls.n	80039e6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c4:	881a      	ldrh	r2, [r3, #0]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d0:	1c9a      	adds	r2, r3, #2
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039da:	b29b      	uxth	r3, r3
 80039dc:	3b02      	subs	r3, #2
 80039de:	b29a      	uxth	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80039e4:	e012      	b.n	8003a0c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	330c      	adds	r3, #12
 80039f0:	7812      	ldrb	r2, [r2, #0]
 80039f2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f8:	1c5a      	adds	r2, r3, #1
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	3b01      	subs	r3, #1
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d148      	bne.n	8003ab0 <HAL_SPI_TransmitReceive+0x3aa>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d042      	beq.n	8003ab0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d923      	bls.n	8003a7e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68da      	ldr	r2, [r3, #12]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a40:	b292      	uxth	r2, r2
 8003a42:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a48:	1c9a      	adds	r2, r3, #2
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	3b02      	subs	r3, #2
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d81f      	bhi.n	8003aac <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	685a      	ldr	r2, [r3, #4]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003a7a:	605a      	str	r2, [r3, #4]
 8003a7c:	e016      	b.n	8003aac <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f103 020c 	add.w	r2, r3, #12
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8a:	7812      	ldrb	r2, [r2, #0]
 8003a8c:	b2d2      	uxtb	r2, r2
 8003a8e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a94:	1c5a      	adds	r2, r3, #1
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	b29a      	uxth	r2, r3
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003aac:	2301      	movs	r3, #1
 8003aae:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003ab0:	f7fd fe52 	bl	8001758 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d803      	bhi.n	8003ac8 <HAL_SPI_TransmitReceive+0x3c2>
 8003ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac6:	d102      	bne.n	8003ace <HAL_SPI_TransmitReceive+0x3c8>
 8003ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d103      	bne.n	8003ad6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003ad4:	e01c      	b.n	8003b10 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f47f af5b 	bne.w	8003998 <HAL_SPI_TransmitReceive+0x292>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f47f af54 	bne.w	8003998 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003af0:	69fa      	ldr	r2, [r7, #28]
 8003af2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003af4:	68f8      	ldr	r0, [r7, #12]
 8003af6:	f000 f98f 	bl	8003e18 <SPI_EndRxTxTransaction>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d006      	beq.n	8003b0e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2220      	movs	r2, #32
 8003b0a:	661a      	str	r2, [r3, #96]	; 0x60
 8003b0c:	e000      	b.n	8003b10 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003b0e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003b20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3728      	adds	r7, #40	; 0x28
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b088      	sub	sp, #32
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	603b      	str	r3, [r7, #0]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003b3c:	f7fd fe0c 	bl	8001758 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b44:	1a9b      	subs	r3, r3, r2
 8003b46:	683a      	ldr	r2, [r7, #0]
 8003b48:	4413      	add	r3, r2
 8003b4a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003b4c:	f7fd fe04 	bl	8001758 <HAL_GetTick>
 8003b50:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003b52:	4b39      	ldr	r3, [pc, #228]	; (8003c38 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	015b      	lsls	r3, r3, #5
 8003b58:	0d1b      	lsrs	r3, r3, #20
 8003b5a:	69fa      	ldr	r2, [r7, #28]
 8003b5c:	fb02 f303 	mul.w	r3, r2, r3
 8003b60:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b62:	e054      	b.n	8003c0e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b6a:	d050      	beq.n	8003c0e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b6c:	f7fd fdf4 	bl	8001758 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	69fa      	ldr	r2, [r7, #28]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d902      	bls.n	8003b82 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d13d      	bne.n	8003bfe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	685a      	ldr	r2, [r3, #4]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b90:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b9a:	d111      	bne.n	8003bc0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ba4:	d004      	beq.n	8003bb0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bae:	d107      	bne.n	8003bc0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bbe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bc8:	d10f      	bne.n	8003bea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bd8:	601a      	str	r2, [r3, #0]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003be8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e017      	b.n	8003c2e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d101      	bne.n	8003c08 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003c04:	2300      	movs	r3, #0
 8003c06:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	689a      	ldr	r2, [r3, #8]
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	4013      	ands	r3, r2
 8003c18:	68ba      	ldr	r2, [r7, #8]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	bf0c      	ite	eq
 8003c1e:	2301      	moveq	r3, #1
 8003c20:	2300      	movne	r3, #0
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	461a      	mov	r2, r3
 8003c26:	79fb      	ldrb	r3, [r7, #7]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d19b      	bne.n	8003b64 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3720      	adds	r7, #32
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	20000010 	.word	0x20000010

08003c3c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b08a      	sub	sp, #40	; 0x28
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
 8003c48:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003c4e:	f7fd fd83 	bl	8001758 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c56:	1a9b      	subs	r3, r3, r2
 8003c58:	683a      	ldr	r2, [r7, #0]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003c5e:	f7fd fd7b 	bl	8001758 <HAL_GetTick>
 8003c62:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	330c      	adds	r3, #12
 8003c6a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003c6c:	4b3d      	ldr	r3, [pc, #244]	; (8003d64 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	4613      	mov	r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	4413      	add	r3, r2
 8003c76:	00da      	lsls	r2, r3, #3
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	0d1b      	lsrs	r3, r3, #20
 8003c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c7e:	fb02 f303 	mul.w	r3, r2, r3
 8003c82:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003c84:	e060      	b.n	8003d48 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003c8c:	d107      	bne.n	8003c9e <SPI_WaitFifoStateUntilTimeout+0x62>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d104      	bne.n	8003c9e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003c9c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca4:	d050      	beq.n	8003d48 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ca6:	f7fd fd57 	bl	8001758 <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	6a3b      	ldr	r3, [r7, #32]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d902      	bls.n	8003cbc <SPI_WaitFifoStateUntilTimeout+0x80>
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d13d      	bne.n	8003d38 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	685a      	ldr	r2, [r3, #4]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003cca:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cd4:	d111      	bne.n	8003cfa <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cde:	d004      	beq.n	8003cea <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ce8:	d107      	bne.n	8003cfa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cf8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d02:	d10f      	bne.n	8003d24 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d12:	601a      	str	r2, [r3, #0]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d22:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e010      	b.n	8003d5a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	3b01      	subs	r3, #1
 8003d46:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	689a      	ldr	r2, [r3, #8]
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	4013      	ands	r3, r2
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d196      	bne.n	8003c86 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3728      	adds	r7, #40	; 0x28
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	20000010 	.word	0x20000010

08003d68 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b086      	sub	sp, #24
 8003d6c:	af02      	add	r7, sp, #8
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d7c:	d111      	bne.n	8003da2 <SPI_EndRxTransaction+0x3a>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d86:	d004      	beq.n	8003d92 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d90:	d107      	bne.n	8003da2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003da0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	9300      	str	r3, [sp, #0]
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	2200      	movs	r2, #0
 8003daa:	2180      	movs	r1, #128	; 0x80
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	f7ff febd 	bl	8003b2c <SPI_WaitFlagStateUntilTimeout>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d007      	beq.n	8003dc8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dbc:	f043 0220 	orr.w	r2, r3, #32
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e023      	b.n	8003e10 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dd0:	d11d      	bne.n	8003e0e <SPI_EndRxTransaction+0xa6>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dda:	d004      	beq.n	8003de6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003de4:	d113      	bne.n	8003e0e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	9300      	str	r3, [sp, #0]
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003df2:	68f8      	ldr	r0, [r7, #12]
 8003df4:	f7ff ff22 	bl	8003c3c <SPI_WaitFifoStateUntilTimeout>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d007      	beq.n	8003e0e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e02:	f043 0220 	orr.w	r2, r3, #32
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e000      	b.n	8003e10 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3710      	adds	r7, #16
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b086      	sub	sp, #24
 8003e1c:	af02      	add	r7, sp, #8
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	9300      	str	r3, [sp, #0]
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003e30:	68f8      	ldr	r0, [r7, #12]
 8003e32:	f7ff ff03 	bl	8003c3c <SPI_WaitFifoStateUntilTimeout>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d007      	beq.n	8003e4c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e40:	f043 0220 	orr.w	r2, r3, #32
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e027      	b.n	8003e9c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	9300      	str	r3, [sp, #0]
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	2200      	movs	r2, #0
 8003e54:	2180      	movs	r1, #128	; 0x80
 8003e56:	68f8      	ldr	r0, [r7, #12]
 8003e58:	f7ff fe68 	bl	8003b2c <SPI_WaitFlagStateUntilTimeout>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d007      	beq.n	8003e72 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e66:	f043 0220 	orr.w	r2, r3, #32
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e014      	b.n	8003e9c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	9300      	str	r3, [sp, #0]
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	f7ff fedc 	bl	8003c3c <SPI_WaitFifoStateUntilTimeout>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d007      	beq.n	8003e9a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e8e:	f043 0220 	orr.w	r2, r3, #32
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e000      	b.n	8003e9c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3710      	adds	r7, #16
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d101      	bne.n	8003eb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e049      	b.n	8003f4a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d106      	bne.n	8003ed0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f7fd fa4a 	bl	8001364 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	3304      	adds	r3, #4
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	4610      	mov	r0, r2
 8003ee4:	f000 fb50 	bl	8004588 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3708      	adds	r7, #8
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
	...

08003f54 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d001      	beq.n	8003f6c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e047      	b.n	8003ffc <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2202      	movs	r2, #2
 8003f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a23      	ldr	r2, [pc, #140]	; (8004008 <HAL_TIM_Base_Start+0xb4>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d01d      	beq.n	8003fba <HAL_TIM_Base_Start+0x66>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f86:	d018      	beq.n	8003fba <HAL_TIM_Base_Start+0x66>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a1f      	ldr	r2, [pc, #124]	; (800400c <HAL_TIM_Base_Start+0xb8>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d013      	beq.n	8003fba <HAL_TIM_Base_Start+0x66>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a1e      	ldr	r2, [pc, #120]	; (8004010 <HAL_TIM_Base_Start+0xbc>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d00e      	beq.n	8003fba <HAL_TIM_Base_Start+0x66>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a1c      	ldr	r2, [pc, #112]	; (8004014 <HAL_TIM_Base_Start+0xc0>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d009      	beq.n	8003fba <HAL_TIM_Base_Start+0x66>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a1b      	ldr	r2, [pc, #108]	; (8004018 <HAL_TIM_Base_Start+0xc4>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d004      	beq.n	8003fba <HAL_TIM_Base_Start+0x66>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a19      	ldr	r2, [pc, #100]	; (800401c <HAL_TIM_Base_Start+0xc8>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d115      	bne.n	8003fe6 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	689a      	ldr	r2, [r3, #8]
 8003fc0:	4b17      	ldr	r3, [pc, #92]	; (8004020 <HAL_TIM_Base_Start+0xcc>)
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2b06      	cmp	r3, #6
 8003fca:	d015      	beq.n	8003ff8 <HAL_TIM_Base_Start+0xa4>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fd2:	d011      	beq.n	8003ff8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f042 0201 	orr.w	r2, r2, #1
 8003fe2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fe4:	e008      	b.n	8003ff8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f042 0201 	orr.w	r2, r2, #1
 8003ff4:	601a      	str	r2, [r3, #0]
 8003ff6:	e000      	b.n	8003ffa <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ff8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3714      	adds	r7, #20
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr
 8004008:	40012c00 	.word	0x40012c00
 800400c:	40000400 	.word	0x40000400
 8004010:	40000800 	.word	0x40000800
 8004014:	40000c00 	.word	0x40000c00
 8004018:	40013400 	.word	0x40013400
 800401c:	40014000 	.word	0x40014000
 8004020:	00010007 	.word	0x00010007

08004024 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	6a1a      	ldr	r2, [r3, #32]
 8004032:	f241 1311 	movw	r3, #4369	; 0x1111
 8004036:	4013      	ands	r3, r2
 8004038:	2b00      	cmp	r3, #0
 800403a:	d10f      	bne.n	800405c <HAL_TIM_Base_Stop+0x38>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	6a1a      	ldr	r2, [r3, #32]
 8004042:	f240 4344 	movw	r3, #1092	; 0x444
 8004046:	4013      	ands	r3, r2
 8004048:	2b00      	cmp	r3, #0
 800404a:	d107      	bne.n	800405c <HAL_TIM_Base_Stop+0x38>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f022 0201 	bic.w	r2, r2, #1
 800405a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	370c      	adds	r7, #12
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
	...

08004074 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004074:	b480      	push	{r7}
 8004076:	b085      	sub	sp, #20
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004082:	b2db      	uxtb	r3, r3
 8004084:	2b01      	cmp	r3, #1
 8004086:	d001      	beq.n	800408c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e04f      	b.n	800412c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2202      	movs	r2, #2
 8004090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68da      	ldr	r2, [r3, #12]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f042 0201 	orr.w	r2, r2, #1
 80040a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a23      	ldr	r2, [pc, #140]	; (8004138 <HAL_TIM_Base_Start_IT+0xc4>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d01d      	beq.n	80040ea <HAL_TIM_Base_Start_IT+0x76>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040b6:	d018      	beq.n	80040ea <HAL_TIM_Base_Start_IT+0x76>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a1f      	ldr	r2, [pc, #124]	; (800413c <HAL_TIM_Base_Start_IT+0xc8>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d013      	beq.n	80040ea <HAL_TIM_Base_Start_IT+0x76>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a1e      	ldr	r2, [pc, #120]	; (8004140 <HAL_TIM_Base_Start_IT+0xcc>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d00e      	beq.n	80040ea <HAL_TIM_Base_Start_IT+0x76>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a1c      	ldr	r2, [pc, #112]	; (8004144 <HAL_TIM_Base_Start_IT+0xd0>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d009      	beq.n	80040ea <HAL_TIM_Base_Start_IT+0x76>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a1b      	ldr	r2, [pc, #108]	; (8004148 <HAL_TIM_Base_Start_IT+0xd4>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d004      	beq.n	80040ea <HAL_TIM_Base_Start_IT+0x76>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a19      	ldr	r2, [pc, #100]	; (800414c <HAL_TIM_Base_Start_IT+0xd8>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d115      	bne.n	8004116 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	689a      	ldr	r2, [r3, #8]
 80040f0:	4b17      	ldr	r3, [pc, #92]	; (8004150 <HAL_TIM_Base_Start_IT+0xdc>)
 80040f2:	4013      	ands	r3, r2
 80040f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2b06      	cmp	r3, #6
 80040fa:	d015      	beq.n	8004128 <HAL_TIM_Base_Start_IT+0xb4>
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004102:	d011      	beq.n	8004128 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f042 0201 	orr.w	r2, r2, #1
 8004112:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004114:	e008      	b.n	8004128 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f042 0201 	orr.w	r2, r2, #1
 8004124:	601a      	str	r2, [r3, #0]
 8004126:	e000      	b.n	800412a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004128:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	3714      	adds	r7, #20
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr
 8004138:	40012c00 	.word	0x40012c00
 800413c:	40000400 	.word	0x40000400
 8004140:	40000800 	.word	0x40000800
 8004144:	40000c00 	.word	0x40000c00
 8004148:	40013400 	.word	0x40013400
 800414c:	40014000 	.word	0x40014000
 8004150:	00010007 	.word	0x00010007

08004154 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b02      	cmp	r3, #2
 8004168:	d122      	bne.n	80041b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	f003 0302 	and.w	r3, r3, #2
 8004174:	2b02      	cmp	r3, #2
 8004176:	d11b      	bne.n	80041b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f06f 0202 	mvn.w	r2, #2
 8004180:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2201      	movs	r2, #1
 8004186:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	f003 0303 	and.w	r3, r3, #3
 8004192:	2b00      	cmp	r3, #0
 8004194:	d003      	beq.n	800419e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 f9d8 	bl	800454c <HAL_TIM_IC_CaptureCallback>
 800419c:	e005      	b.n	80041aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 f9ca 	bl	8004538 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 f9db 	bl	8004560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	f003 0304 	and.w	r3, r3, #4
 80041ba:	2b04      	cmp	r3, #4
 80041bc:	d122      	bne.n	8004204 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	f003 0304 	and.w	r3, r3, #4
 80041c8:	2b04      	cmp	r3, #4
 80041ca:	d11b      	bne.n	8004204 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f06f 0204 	mvn.w	r2, #4
 80041d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2202      	movs	r2, #2
 80041da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d003      	beq.n	80041f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 f9ae 	bl	800454c <HAL_TIM_IC_CaptureCallback>
 80041f0:	e005      	b.n	80041fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 f9a0 	bl	8004538 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f000 f9b1 	bl	8004560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	f003 0308 	and.w	r3, r3, #8
 800420e:	2b08      	cmp	r3, #8
 8004210:	d122      	bne.n	8004258 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	f003 0308 	and.w	r3, r3, #8
 800421c:	2b08      	cmp	r3, #8
 800421e:	d11b      	bne.n	8004258 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f06f 0208 	mvn.w	r2, #8
 8004228:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2204      	movs	r2, #4
 800422e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	69db      	ldr	r3, [r3, #28]
 8004236:	f003 0303 	and.w	r3, r3, #3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d003      	beq.n	8004246 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 f984 	bl	800454c <HAL_TIM_IC_CaptureCallback>
 8004244:	e005      	b.n	8004252 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 f976 	bl	8004538 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f000 f987 	bl	8004560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	f003 0310 	and.w	r3, r3, #16
 8004262:	2b10      	cmp	r3, #16
 8004264:	d122      	bne.n	80042ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	f003 0310 	and.w	r3, r3, #16
 8004270:	2b10      	cmp	r3, #16
 8004272:	d11b      	bne.n	80042ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f06f 0210 	mvn.w	r2, #16
 800427c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2208      	movs	r2, #8
 8004282:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	69db      	ldr	r3, [r3, #28]
 800428a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800428e:	2b00      	cmp	r3, #0
 8004290:	d003      	beq.n	800429a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 f95a 	bl	800454c <HAL_TIM_IC_CaptureCallback>
 8004298:	e005      	b.n	80042a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 f94c 	bl	8004538 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f000 f95d 	bl	8004560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d10e      	bne.n	80042d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	f003 0301 	and.w	r3, r3, #1
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d107      	bne.n	80042d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f06f 0201 	mvn.w	r2, #1
 80042d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 f926 	bl	8004524 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042e2:	2b80      	cmp	r3, #128	; 0x80
 80042e4:	d10e      	bne.n	8004304 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042f0:	2b80      	cmp	r3, #128	; 0x80
 80042f2:	d107      	bne.n	8004304 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 fb08 	bl	8004914 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800430e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004312:	d10e      	bne.n	8004332 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800431e:	2b80      	cmp	r3, #128	; 0x80
 8004320:	d107      	bne.n	8004332 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800432a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f000 fafb 	bl	8004928 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800433c:	2b40      	cmp	r3, #64	; 0x40
 800433e:	d10e      	bne.n	800435e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800434a:	2b40      	cmp	r3, #64	; 0x40
 800434c:	d107      	bne.n	800435e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004356:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f000 f90b 	bl	8004574 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	691b      	ldr	r3, [r3, #16]
 8004364:	f003 0320 	and.w	r3, r3, #32
 8004368:	2b20      	cmp	r3, #32
 800436a:	d10e      	bne.n	800438a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	f003 0320 	and.w	r3, r3, #32
 8004376:	2b20      	cmp	r3, #32
 8004378:	d107      	bne.n	800438a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f06f 0220 	mvn.w	r2, #32
 8004382:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 fabb 	bl	8004900 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800438a:	bf00      	nop
 800438c:	3708      	adds	r7, #8
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}

08004392 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004392:	b580      	push	{r7, lr}
 8004394:	b084      	sub	sp, #16
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
 800439a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800439c:	2300      	movs	r3, #0
 800439e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d101      	bne.n	80043ae <HAL_TIM_ConfigClockSource+0x1c>
 80043aa:	2302      	movs	r3, #2
 80043ac:	e0b6      	b.n	800451c <HAL_TIM_ConfigClockSource+0x18a>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2201      	movs	r2, #1
 80043b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2202      	movs	r2, #2
 80043ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043cc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80043d0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043d8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68ba      	ldr	r2, [r7, #8]
 80043e0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043ea:	d03e      	beq.n	800446a <HAL_TIM_ConfigClockSource+0xd8>
 80043ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043f0:	f200 8087 	bhi.w	8004502 <HAL_TIM_ConfigClockSource+0x170>
 80043f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043f8:	f000 8086 	beq.w	8004508 <HAL_TIM_ConfigClockSource+0x176>
 80043fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004400:	d87f      	bhi.n	8004502 <HAL_TIM_ConfigClockSource+0x170>
 8004402:	2b70      	cmp	r3, #112	; 0x70
 8004404:	d01a      	beq.n	800443c <HAL_TIM_ConfigClockSource+0xaa>
 8004406:	2b70      	cmp	r3, #112	; 0x70
 8004408:	d87b      	bhi.n	8004502 <HAL_TIM_ConfigClockSource+0x170>
 800440a:	2b60      	cmp	r3, #96	; 0x60
 800440c:	d050      	beq.n	80044b0 <HAL_TIM_ConfigClockSource+0x11e>
 800440e:	2b60      	cmp	r3, #96	; 0x60
 8004410:	d877      	bhi.n	8004502 <HAL_TIM_ConfigClockSource+0x170>
 8004412:	2b50      	cmp	r3, #80	; 0x50
 8004414:	d03c      	beq.n	8004490 <HAL_TIM_ConfigClockSource+0xfe>
 8004416:	2b50      	cmp	r3, #80	; 0x50
 8004418:	d873      	bhi.n	8004502 <HAL_TIM_ConfigClockSource+0x170>
 800441a:	2b40      	cmp	r3, #64	; 0x40
 800441c:	d058      	beq.n	80044d0 <HAL_TIM_ConfigClockSource+0x13e>
 800441e:	2b40      	cmp	r3, #64	; 0x40
 8004420:	d86f      	bhi.n	8004502 <HAL_TIM_ConfigClockSource+0x170>
 8004422:	2b30      	cmp	r3, #48	; 0x30
 8004424:	d064      	beq.n	80044f0 <HAL_TIM_ConfigClockSource+0x15e>
 8004426:	2b30      	cmp	r3, #48	; 0x30
 8004428:	d86b      	bhi.n	8004502 <HAL_TIM_ConfigClockSource+0x170>
 800442a:	2b20      	cmp	r3, #32
 800442c:	d060      	beq.n	80044f0 <HAL_TIM_ConfigClockSource+0x15e>
 800442e:	2b20      	cmp	r3, #32
 8004430:	d867      	bhi.n	8004502 <HAL_TIM_ConfigClockSource+0x170>
 8004432:	2b00      	cmp	r3, #0
 8004434:	d05c      	beq.n	80044f0 <HAL_TIM_ConfigClockSource+0x15e>
 8004436:	2b10      	cmp	r3, #16
 8004438:	d05a      	beq.n	80044f0 <HAL_TIM_ConfigClockSource+0x15e>
 800443a:	e062      	b.n	8004502 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6818      	ldr	r0, [r3, #0]
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	6899      	ldr	r1, [r3, #8]
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	685a      	ldr	r2, [r3, #4]
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	f000 f9b0 	bl	80047b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800445e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68ba      	ldr	r2, [r7, #8]
 8004466:	609a      	str	r2, [r3, #8]
      break;
 8004468:	e04f      	b.n	800450a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6818      	ldr	r0, [r3, #0]
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	6899      	ldr	r1, [r3, #8]
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	685a      	ldr	r2, [r3, #4]
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	f000 f999 	bl	80047b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	689a      	ldr	r2, [r3, #8]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800448c:	609a      	str	r2, [r3, #8]
      break;
 800448e:	e03c      	b.n	800450a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6818      	ldr	r0, [r3, #0]
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	6859      	ldr	r1, [r3, #4]
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	461a      	mov	r2, r3
 800449e:	f000 f90d 	bl	80046bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2150      	movs	r1, #80	; 0x50
 80044a8:	4618      	mov	r0, r3
 80044aa:	f000 f966 	bl	800477a <TIM_ITRx_SetConfig>
      break;
 80044ae:	e02c      	b.n	800450a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6818      	ldr	r0, [r3, #0]
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	6859      	ldr	r1, [r3, #4]
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	461a      	mov	r2, r3
 80044be:	f000 f92c 	bl	800471a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2160      	movs	r1, #96	; 0x60
 80044c8:	4618      	mov	r0, r3
 80044ca:	f000 f956 	bl	800477a <TIM_ITRx_SetConfig>
      break;
 80044ce:	e01c      	b.n	800450a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6818      	ldr	r0, [r3, #0]
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	6859      	ldr	r1, [r3, #4]
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	461a      	mov	r2, r3
 80044de:	f000 f8ed 	bl	80046bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2140      	movs	r1, #64	; 0x40
 80044e8:	4618      	mov	r0, r3
 80044ea:	f000 f946 	bl	800477a <TIM_ITRx_SetConfig>
      break;
 80044ee:	e00c      	b.n	800450a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4619      	mov	r1, r3
 80044fa:	4610      	mov	r0, r2
 80044fc:	f000 f93d 	bl	800477a <TIM_ITRx_SetConfig>
      break;
 8004500:	e003      	b.n	800450a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	73fb      	strb	r3, [r7, #15]
      break;
 8004506:	e000      	b.n	800450a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004508:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2201      	movs	r2, #1
 800450e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800451a:	7bfb      	ldrb	r3, [r7, #15]
}
 800451c:	4618      	mov	r0, r3
 800451e:	3710      	adds	r7, #16
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800452c:	bf00      	nop
 800452e:	370c      	adds	r7, #12
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr

08004538 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004540:	bf00      	nop
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004554:	bf00      	nop
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004568:	bf00      	nop
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800457c:	bf00      	nop
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004588:	b480      	push	{r7}
 800458a:	b085      	sub	sp, #20
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a40      	ldr	r2, [pc, #256]	; (800469c <TIM_Base_SetConfig+0x114>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d013      	beq.n	80045c8 <TIM_Base_SetConfig+0x40>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045a6:	d00f      	beq.n	80045c8 <TIM_Base_SetConfig+0x40>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a3d      	ldr	r2, [pc, #244]	; (80046a0 <TIM_Base_SetConfig+0x118>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d00b      	beq.n	80045c8 <TIM_Base_SetConfig+0x40>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4a3c      	ldr	r2, [pc, #240]	; (80046a4 <TIM_Base_SetConfig+0x11c>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d007      	beq.n	80045c8 <TIM_Base_SetConfig+0x40>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4a3b      	ldr	r2, [pc, #236]	; (80046a8 <TIM_Base_SetConfig+0x120>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d003      	beq.n	80045c8 <TIM_Base_SetConfig+0x40>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a3a      	ldr	r2, [pc, #232]	; (80046ac <TIM_Base_SetConfig+0x124>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d108      	bne.n	80045da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	68fa      	ldr	r2, [r7, #12]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a2f      	ldr	r2, [pc, #188]	; (800469c <TIM_Base_SetConfig+0x114>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d01f      	beq.n	8004622 <TIM_Base_SetConfig+0x9a>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045e8:	d01b      	beq.n	8004622 <TIM_Base_SetConfig+0x9a>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a2c      	ldr	r2, [pc, #176]	; (80046a0 <TIM_Base_SetConfig+0x118>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d017      	beq.n	8004622 <TIM_Base_SetConfig+0x9a>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a2b      	ldr	r2, [pc, #172]	; (80046a4 <TIM_Base_SetConfig+0x11c>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d013      	beq.n	8004622 <TIM_Base_SetConfig+0x9a>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a2a      	ldr	r2, [pc, #168]	; (80046a8 <TIM_Base_SetConfig+0x120>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d00f      	beq.n	8004622 <TIM_Base_SetConfig+0x9a>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a29      	ldr	r2, [pc, #164]	; (80046ac <TIM_Base_SetConfig+0x124>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d00b      	beq.n	8004622 <TIM_Base_SetConfig+0x9a>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a28      	ldr	r2, [pc, #160]	; (80046b0 <TIM_Base_SetConfig+0x128>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d007      	beq.n	8004622 <TIM_Base_SetConfig+0x9a>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a27      	ldr	r2, [pc, #156]	; (80046b4 <TIM_Base_SetConfig+0x12c>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d003      	beq.n	8004622 <TIM_Base_SetConfig+0x9a>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a26      	ldr	r2, [pc, #152]	; (80046b8 <TIM_Base_SetConfig+0x130>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d108      	bne.n	8004634 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004628:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	4313      	orrs	r3, r2
 8004632:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	4313      	orrs	r3, r2
 8004640:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	689a      	ldr	r2, [r3, #8]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a10      	ldr	r2, [pc, #64]	; (800469c <TIM_Base_SetConfig+0x114>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d00f      	beq.n	8004680 <TIM_Base_SetConfig+0xf8>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4a12      	ldr	r2, [pc, #72]	; (80046ac <TIM_Base_SetConfig+0x124>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d00b      	beq.n	8004680 <TIM_Base_SetConfig+0xf8>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4a11      	ldr	r2, [pc, #68]	; (80046b0 <TIM_Base_SetConfig+0x128>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d007      	beq.n	8004680 <TIM_Base_SetConfig+0xf8>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a10      	ldr	r2, [pc, #64]	; (80046b4 <TIM_Base_SetConfig+0x12c>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d003      	beq.n	8004680 <TIM_Base_SetConfig+0xf8>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a0f      	ldr	r2, [pc, #60]	; (80046b8 <TIM_Base_SetConfig+0x130>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d103      	bne.n	8004688 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	691a      	ldr	r2, [r3, #16]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	615a      	str	r2, [r3, #20]
}
 800468e:	bf00      	nop
 8004690:	3714      	adds	r7, #20
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	40012c00 	.word	0x40012c00
 80046a0:	40000400 	.word	0x40000400
 80046a4:	40000800 	.word	0x40000800
 80046a8:	40000c00 	.word	0x40000c00
 80046ac:	40013400 	.word	0x40013400
 80046b0:	40014000 	.word	0x40014000
 80046b4:	40014400 	.word	0x40014400
 80046b8:	40014800 	.word	0x40014800

080046bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046bc:	b480      	push	{r7}
 80046be:	b087      	sub	sp, #28
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6a1b      	ldr	r3, [r3, #32]
 80046cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6a1b      	ldr	r3, [r3, #32]
 80046d2:	f023 0201 	bic.w	r2, r3, #1
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	011b      	lsls	r3, r3, #4
 80046ec:	693a      	ldr	r2, [r7, #16]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	f023 030a 	bic.w	r3, r3, #10
 80046f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046fa:	697a      	ldr	r2, [r7, #20]
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	4313      	orrs	r3, r2
 8004700:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	693a      	ldr	r2, [r7, #16]
 8004706:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	697a      	ldr	r2, [r7, #20]
 800470c:	621a      	str	r2, [r3, #32]
}
 800470e:	bf00      	nop
 8004710:	371c      	adds	r7, #28
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr

0800471a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800471a:	b480      	push	{r7}
 800471c:	b087      	sub	sp, #28
 800471e:	af00      	add	r7, sp, #0
 8004720:	60f8      	str	r0, [r7, #12]
 8004722:	60b9      	str	r1, [r7, #8]
 8004724:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6a1b      	ldr	r3, [r3, #32]
 800472a:	f023 0210 	bic.w	r2, r3, #16
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6a1b      	ldr	r3, [r3, #32]
 800473c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004744:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	031b      	lsls	r3, r3, #12
 800474a:	697a      	ldr	r2, [r7, #20]
 800474c:	4313      	orrs	r3, r2
 800474e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004756:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	011b      	lsls	r3, r3, #4
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	4313      	orrs	r3, r2
 8004760:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	621a      	str	r2, [r3, #32]
}
 800476e:	bf00      	nop
 8004770:	371c      	adds	r7, #28
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr

0800477a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800477a:	b480      	push	{r7}
 800477c:	b085      	sub	sp, #20
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
 8004782:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004790:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004792:	683a      	ldr	r2, [r7, #0]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	4313      	orrs	r3, r2
 8004798:	f043 0307 	orr.w	r3, r3, #7
 800479c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	609a      	str	r2, [r3, #8]
}
 80047a4:	bf00      	nop
 80047a6:	3714      	adds	r7, #20
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b087      	sub	sp, #28
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	607a      	str	r2, [r7, #4]
 80047bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	021a      	lsls	r2, r3, #8
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	431a      	orrs	r2, r3
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	697a      	ldr	r2, [r7, #20]
 80047da:	4313      	orrs	r3, r2
 80047dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	609a      	str	r2, [r3, #8]
}
 80047e4:	bf00      	nop
 80047e6:	371c      	adds	r7, #28
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b085      	sub	sp, #20
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004800:	2b01      	cmp	r3, #1
 8004802:	d101      	bne.n	8004808 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004804:	2302      	movs	r3, #2
 8004806:	e068      	b.n	80048da <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2202      	movs	r2, #2
 8004814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a2e      	ldr	r2, [pc, #184]	; (80048e8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d004      	beq.n	800483c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a2d      	ldr	r2, [pc, #180]	; (80048ec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d108      	bne.n	800484e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004842:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	4313      	orrs	r3, r2
 800484c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004854:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68fa      	ldr	r2, [r7, #12]
 800485c:	4313      	orrs	r3, r2
 800485e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a1e      	ldr	r2, [pc, #120]	; (80048e8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d01d      	beq.n	80048ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800487a:	d018      	beq.n	80048ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a1b      	ldr	r2, [pc, #108]	; (80048f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d013      	beq.n	80048ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a1a      	ldr	r2, [pc, #104]	; (80048f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d00e      	beq.n	80048ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a18      	ldr	r2, [pc, #96]	; (80048f8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d009      	beq.n	80048ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a13      	ldr	r2, [pc, #76]	; (80048ec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d004      	beq.n	80048ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a14      	ldr	r2, [pc, #80]	; (80048fc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d10c      	bne.n	80048c8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	68ba      	ldr	r2, [r7, #8]
 80048bc:	4313      	orrs	r3, r2
 80048be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68ba      	ldr	r2, [r7, #8]
 80048c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3714      	adds	r7, #20
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	40012c00 	.word	0x40012c00
 80048ec:	40013400 	.word	0x40013400
 80048f0:	40000400 	.word	0x40000400
 80048f4:	40000800 	.word	0x40000800
 80048f8:	40000c00 	.word	0x40000c00
 80048fc:	40014000 	.word	0x40014000

08004900 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004908:	bf00      	nop
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800491c:	bf00      	nop
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004930:	bf00      	nop
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <_Znwj>:
 800493c:	2801      	cmp	r0, #1
 800493e:	bf38      	it	cc
 8004940:	2001      	movcc	r0, #1
 8004942:	b510      	push	{r4, lr}
 8004944:	4604      	mov	r4, r0
 8004946:	4620      	mov	r0, r4
 8004948:	f000 f844 	bl	80049d4 <malloc>
 800494c:	b930      	cbnz	r0, 800495c <_Znwj+0x20>
 800494e:	f000 f807 	bl	8004960 <_ZSt15get_new_handlerv>
 8004952:	b908      	cbnz	r0, 8004958 <_Znwj+0x1c>
 8004954:	f000 f80c 	bl	8004970 <abort>
 8004958:	4780      	blx	r0
 800495a:	e7f4      	b.n	8004946 <_Znwj+0xa>
 800495c:	bd10      	pop	{r4, pc}
	...

08004960 <_ZSt15get_new_handlerv>:
 8004960:	4b02      	ldr	r3, [pc, #8]	; (800496c <_ZSt15get_new_handlerv+0xc>)
 8004962:	6818      	ldr	r0, [r3, #0]
 8004964:	f3bf 8f5b 	dmb	ish
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop
 800496c:	20000208 	.word	0x20000208

08004970 <abort>:
 8004970:	b508      	push	{r3, lr}
 8004972:	2006      	movs	r0, #6
 8004974:	f000 f960 	bl	8004c38 <raise>
 8004978:	2001      	movs	r0, #1
 800497a:	f7fc fd93 	bl	80014a4 <_exit>
	...

08004980 <__errno>:
 8004980:	4b01      	ldr	r3, [pc, #4]	; (8004988 <__errno+0x8>)
 8004982:	6818      	ldr	r0, [r3, #0]
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	2000001c 	.word	0x2000001c

0800498c <__libc_init_array>:
 800498c:	b570      	push	{r4, r5, r6, lr}
 800498e:	4d0d      	ldr	r5, [pc, #52]	; (80049c4 <__libc_init_array+0x38>)
 8004990:	4c0d      	ldr	r4, [pc, #52]	; (80049c8 <__libc_init_array+0x3c>)
 8004992:	1b64      	subs	r4, r4, r5
 8004994:	10a4      	asrs	r4, r4, #2
 8004996:	2600      	movs	r6, #0
 8004998:	42a6      	cmp	r6, r4
 800499a:	d109      	bne.n	80049b0 <__libc_init_array+0x24>
 800499c:	4d0b      	ldr	r5, [pc, #44]	; (80049cc <__libc_init_array+0x40>)
 800499e:	4c0c      	ldr	r4, [pc, #48]	; (80049d0 <__libc_init_array+0x44>)
 80049a0:	f001 f81a 	bl	80059d8 <_init>
 80049a4:	1b64      	subs	r4, r4, r5
 80049a6:	10a4      	asrs	r4, r4, #2
 80049a8:	2600      	movs	r6, #0
 80049aa:	42a6      	cmp	r6, r4
 80049ac:	d105      	bne.n	80049ba <__libc_init_array+0x2e>
 80049ae:	bd70      	pop	{r4, r5, r6, pc}
 80049b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80049b4:	4798      	blx	r3
 80049b6:	3601      	adds	r6, #1
 80049b8:	e7ee      	b.n	8004998 <__libc_init_array+0xc>
 80049ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80049be:	4798      	blx	r3
 80049c0:	3601      	adds	r6, #1
 80049c2:	e7f2      	b.n	80049aa <__libc_init_array+0x1e>
 80049c4:	08005b8c 	.word	0x08005b8c
 80049c8:	08005b8c 	.word	0x08005b8c
 80049cc:	08005b8c 	.word	0x08005b8c
 80049d0:	08005b94 	.word	0x08005b94

080049d4 <malloc>:
 80049d4:	4b02      	ldr	r3, [pc, #8]	; (80049e0 <malloc+0xc>)
 80049d6:	4601      	mov	r1, r0
 80049d8:	6818      	ldr	r0, [r3, #0]
 80049da:	f000 b85b 	b.w	8004a94 <_malloc_r>
 80049de:	bf00      	nop
 80049e0:	2000001c 	.word	0x2000001c

080049e4 <memset>:
 80049e4:	4402      	add	r2, r0
 80049e6:	4603      	mov	r3, r0
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d100      	bne.n	80049ee <memset+0xa>
 80049ec:	4770      	bx	lr
 80049ee:	f803 1b01 	strb.w	r1, [r3], #1
 80049f2:	e7f9      	b.n	80049e8 <memset+0x4>

080049f4 <_free_r>:
 80049f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80049f6:	2900      	cmp	r1, #0
 80049f8:	d048      	beq.n	8004a8c <_free_r+0x98>
 80049fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049fe:	9001      	str	r0, [sp, #4]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	f1a1 0404 	sub.w	r4, r1, #4
 8004a06:	bfb8      	it	lt
 8004a08:	18e4      	addlt	r4, r4, r3
 8004a0a:	f000 f961 	bl	8004cd0 <__malloc_lock>
 8004a0e:	4a20      	ldr	r2, [pc, #128]	; (8004a90 <_free_r+0x9c>)
 8004a10:	9801      	ldr	r0, [sp, #4]
 8004a12:	6813      	ldr	r3, [r2, #0]
 8004a14:	4615      	mov	r5, r2
 8004a16:	b933      	cbnz	r3, 8004a26 <_free_r+0x32>
 8004a18:	6063      	str	r3, [r4, #4]
 8004a1a:	6014      	str	r4, [r2, #0]
 8004a1c:	b003      	add	sp, #12
 8004a1e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004a22:	f000 b95b 	b.w	8004cdc <__malloc_unlock>
 8004a26:	42a3      	cmp	r3, r4
 8004a28:	d90b      	bls.n	8004a42 <_free_r+0x4e>
 8004a2a:	6821      	ldr	r1, [r4, #0]
 8004a2c:	1862      	adds	r2, r4, r1
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	bf04      	itt	eq
 8004a32:	681a      	ldreq	r2, [r3, #0]
 8004a34:	685b      	ldreq	r3, [r3, #4]
 8004a36:	6063      	str	r3, [r4, #4]
 8004a38:	bf04      	itt	eq
 8004a3a:	1852      	addeq	r2, r2, r1
 8004a3c:	6022      	streq	r2, [r4, #0]
 8004a3e:	602c      	str	r4, [r5, #0]
 8004a40:	e7ec      	b.n	8004a1c <_free_r+0x28>
 8004a42:	461a      	mov	r2, r3
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	b10b      	cbz	r3, 8004a4c <_free_r+0x58>
 8004a48:	42a3      	cmp	r3, r4
 8004a4a:	d9fa      	bls.n	8004a42 <_free_r+0x4e>
 8004a4c:	6811      	ldr	r1, [r2, #0]
 8004a4e:	1855      	adds	r5, r2, r1
 8004a50:	42a5      	cmp	r5, r4
 8004a52:	d10b      	bne.n	8004a6c <_free_r+0x78>
 8004a54:	6824      	ldr	r4, [r4, #0]
 8004a56:	4421      	add	r1, r4
 8004a58:	1854      	adds	r4, r2, r1
 8004a5a:	42a3      	cmp	r3, r4
 8004a5c:	6011      	str	r1, [r2, #0]
 8004a5e:	d1dd      	bne.n	8004a1c <_free_r+0x28>
 8004a60:	681c      	ldr	r4, [r3, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	6053      	str	r3, [r2, #4]
 8004a66:	4421      	add	r1, r4
 8004a68:	6011      	str	r1, [r2, #0]
 8004a6a:	e7d7      	b.n	8004a1c <_free_r+0x28>
 8004a6c:	d902      	bls.n	8004a74 <_free_r+0x80>
 8004a6e:	230c      	movs	r3, #12
 8004a70:	6003      	str	r3, [r0, #0]
 8004a72:	e7d3      	b.n	8004a1c <_free_r+0x28>
 8004a74:	6825      	ldr	r5, [r4, #0]
 8004a76:	1961      	adds	r1, r4, r5
 8004a78:	428b      	cmp	r3, r1
 8004a7a:	bf04      	itt	eq
 8004a7c:	6819      	ldreq	r1, [r3, #0]
 8004a7e:	685b      	ldreq	r3, [r3, #4]
 8004a80:	6063      	str	r3, [r4, #4]
 8004a82:	bf04      	itt	eq
 8004a84:	1949      	addeq	r1, r1, r5
 8004a86:	6021      	streq	r1, [r4, #0]
 8004a88:	6054      	str	r4, [r2, #4]
 8004a8a:	e7c7      	b.n	8004a1c <_free_r+0x28>
 8004a8c:	b003      	add	sp, #12
 8004a8e:	bd30      	pop	{r4, r5, pc}
 8004a90:	2000020c 	.word	0x2000020c

08004a94 <_malloc_r>:
 8004a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a96:	1ccd      	adds	r5, r1, #3
 8004a98:	f025 0503 	bic.w	r5, r5, #3
 8004a9c:	3508      	adds	r5, #8
 8004a9e:	2d0c      	cmp	r5, #12
 8004aa0:	bf38      	it	cc
 8004aa2:	250c      	movcc	r5, #12
 8004aa4:	2d00      	cmp	r5, #0
 8004aa6:	4606      	mov	r6, r0
 8004aa8:	db01      	blt.n	8004aae <_malloc_r+0x1a>
 8004aaa:	42a9      	cmp	r1, r5
 8004aac:	d903      	bls.n	8004ab6 <_malloc_r+0x22>
 8004aae:	230c      	movs	r3, #12
 8004ab0:	6033      	str	r3, [r6, #0]
 8004ab2:	2000      	movs	r0, #0
 8004ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ab6:	f000 f90b 	bl	8004cd0 <__malloc_lock>
 8004aba:	4921      	ldr	r1, [pc, #132]	; (8004b40 <_malloc_r+0xac>)
 8004abc:	680a      	ldr	r2, [r1, #0]
 8004abe:	4614      	mov	r4, r2
 8004ac0:	b99c      	cbnz	r4, 8004aea <_malloc_r+0x56>
 8004ac2:	4f20      	ldr	r7, [pc, #128]	; (8004b44 <_malloc_r+0xb0>)
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	b923      	cbnz	r3, 8004ad2 <_malloc_r+0x3e>
 8004ac8:	4621      	mov	r1, r4
 8004aca:	4630      	mov	r0, r6
 8004acc:	f000 f87c 	bl	8004bc8 <_sbrk_r>
 8004ad0:	6038      	str	r0, [r7, #0]
 8004ad2:	4629      	mov	r1, r5
 8004ad4:	4630      	mov	r0, r6
 8004ad6:	f000 f877 	bl	8004bc8 <_sbrk_r>
 8004ada:	1c43      	adds	r3, r0, #1
 8004adc:	d123      	bne.n	8004b26 <_malloc_r+0x92>
 8004ade:	230c      	movs	r3, #12
 8004ae0:	6033      	str	r3, [r6, #0]
 8004ae2:	4630      	mov	r0, r6
 8004ae4:	f000 f8fa 	bl	8004cdc <__malloc_unlock>
 8004ae8:	e7e3      	b.n	8004ab2 <_malloc_r+0x1e>
 8004aea:	6823      	ldr	r3, [r4, #0]
 8004aec:	1b5b      	subs	r3, r3, r5
 8004aee:	d417      	bmi.n	8004b20 <_malloc_r+0x8c>
 8004af0:	2b0b      	cmp	r3, #11
 8004af2:	d903      	bls.n	8004afc <_malloc_r+0x68>
 8004af4:	6023      	str	r3, [r4, #0]
 8004af6:	441c      	add	r4, r3
 8004af8:	6025      	str	r5, [r4, #0]
 8004afa:	e004      	b.n	8004b06 <_malloc_r+0x72>
 8004afc:	6863      	ldr	r3, [r4, #4]
 8004afe:	42a2      	cmp	r2, r4
 8004b00:	bf0c      	ite	eq
 8004b02:	600b      	streq	r3, [r1, #0]
 8004b04:	6053      	strne	r3, [r2, #4]
 8004b06:	4630      	mov	r0, r6
 8004b08:	f000 f8e8 	bl	8004cdc <__malloc_unlock>
 8004b0c:	f104 000b 	add.w	r0, r4, #11
 8004b10:	1d23      	adds	r3, r4, #4
 8004b12:	f020 0007 	bic.w	r0, r0, #7
 8004b16:	1ac2      	subs	r2, r0, r3
 8004b18:	d0cc      	beq.n	8004ab4 <_malloc_r+0x20>
 8004b1a:	1a1b      	subs	r3, r3, r0
 8004b1c:	50a3      	str	r3, [r4, r2]
 8004b1e:	e7c9      	b.n	8004ab4 <_malloc_r+0x20>
 8004b20:	4622      	mov	r2, r4
 8004b22:	6864      	ldr	r4, [r4, #4]
 8004b24:	e7cc      	b.n	8004ac0 <_malloc_r+0x2c>
 8004b26:	1cc4      	adds	r4, r0, #3
 8004b28:	f024 0403 	bic.w	r4, r4, #3
 8004b2c:	42a0      	cmp	r0, r4
 8004b2e:	d0e3      	beq.n	8004af8 <_malloc_r+0x64>
 8004b30:	1a21      	subs	r1, r4, r0
 8004b32:	4630      	mov	r0, r6
 8004b34:	f000 f848 	bl	8004bc8 <_sbrk_r>
 8004b38:	3001      	adds	r0, #1
 8004b3a:	d1dd      	bne.n	8004af8 <_malloc_r+0x64>
 8004b3c:	e7cf      	b.n	8004ade <_malloc_r+0x4a>
 8004b3e:	bf00      	nop
 8004b40:	2000020c 	.word	0x2000020c
 8004b44:	20000210 	.word	0x20000210

08004b48 <rand>:
 8004b48:	4b17      	ldr	r3, [pc, #92]	; (8004ba8 <rand+0x60>)
 8004b4a:	b510      	push	{r4, lr}
 8004b4c:	681c      	ldr	r4, [r3, #0]
 8004b4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004b50:	b9b3      	cbnz	r3, 8004b80 <rand+0x38>
 8004b52:	2018      	movs	r0, #24
 8004b54:	f7ff ff3e 	bl	80049d4 <malloc>
 8004b58:	63a0      	str	r0, [r4, #56]	; 0x38
 8004b5a:	b928      	cbnz	r0, 8004b68 <rand+0x20>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	4b13      	ldr	r3, [pc, #76]	; (8004bac <rand+0x64>)
 8004b60:	4813      	ldr	r0, [pc, #76]	; (8004bb0 <rand+0x68>)
 8004b62:	214e      	movs	r1, #78	; 0x4e
 8004b64:	f000 f884 	bl	8004c70 <__assert_func>
 8004b68:	4a12      	ldr	r2, [pc, #72]	; (8004bb4 <rand+0x6c>)
 8004b6a:	4b13      	ldr	r3, [pc, #76]	; (8004bb8 <rand+0x70>)
 8004b6c:	e9c0 2300 	strd	r2, r3, [r0]
 8004b70:	4b12      	ldr	r3, [pc, #72]	; (8004bbc <rand+0x74>)
 8004b72:	6083      	str	r3, [r0, #8]
 8004b74:	230b      	movs	r3, #11
 8004b76:	8183      	strh	r3, [r0, #12]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8004b80:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004b82:	480f      	ldr	r0, [pc, #60]	; (8004bc0 <rand+0x78>)
 8004b84:	690a      	ldr	r2, [r1, #16]
 8004b86:	694b      	ldr	r3, [r1, #20]
 8004b88:	4c0e      	ldr	r4, [pc, #56]	; (8004bc4 <rand+0x7c>)
 8004b8a:	4350      	muls	r0, r2
 8004b8c:	fb04 0003 	mla	r0, r4, r3, r0
 8004b90:	fba2 3404 	umull	r3, r4, r2, r4
 8004b94:	1c5a      	adds	r2, r3, #1
 8004b96:	4404      	add	r4, r0
 8004b98:	f144 0000 	adc.w	r0, r4, #0
 8004b9c:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8004ba0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004ba4:	bd10      	pop	{r4, pc}
 8004ba6:	bf00      	nop
 8004ba8:	2000001c 	.word	0x2000001c
 8004bac:	08005a44 	.word	0x08005a44
 8004bb0:	08005a5b 	.word	0x08005a5b
 8004bb4:	abcd330e 	.word	0xabcd330e
 8004bb8:	e66d1234 	.word	0xe66d1234
 8004bbc:	0005deec 	.word	0x0005deec
 8004bc0:	5851f42d 	.word	0x5851f42d
 8004bc4:	4c957f2d 	.word	0x4c957f2d

08004bc8 <_sbrk_r>:
 8004bc8:	b538      	push	{r3, r4, r5, lr}
 8004bca:	4d06      	ldr	r5, [pc, #24]	; (8004be4 <_sbrk_r+0x1c>)
 8004bcc:	2300      	movs	r3, #0
 8004bce:	4604      	mov	r4, r0
 8004bd0:	4608      	mov	r0, r1
 8004bd2:	602b      	str	r3, [r5, #0]
 8004bd4:	f7fc fcde 	bl	8001594 <_sbrk>
 8004bd8:	1c43      	adds	r3, r0, #1
 8004bda:	d102      	bne.n	8004be2 <_sbrk_r+0x1a>
 8004bdc:	682b      	ldr	r3, [r5, #0]
 8004bde:	b103      	cbz	r3, 8004be2 <_sbrk_r+0x1a>
 8004be0:	6023      	str	r3, [r4, #0]
 8004be2:	bd38      	pop	{r3, r4, r5, pc}
 8004be4:	20000218 	.word	0x20000218

08004be8 <_raise_r>:
 8004be8:	291f      	cmp	r1, #31
 8004bea:	b538      	push	{r3, r4, r5, lr}
 8004bec:	4604      	mov	r4, r0
 8004bee:	460d      	mov	r5, r1
 8004bf0:	d904      	bls.n	8004bfc <_raise_r+0x14>
 8004bf2:	2316      	movs	r3, #22
 8004bf4:	6003      	str	r3, [r0, #0]
 8004bf6:	f04f 30ff 	mov.w	r0, #4294967295
 8004bfa:	bd38      	pop	{r3, r4, r5, pc}
 8004bfc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004bfe:	b112      	cbz	r2, 8004c06 <_raise_r+0x1e>
 8004c00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004c04:	b94b      	cbnz	r3, 8004c1a <_raise_r+0x32>
 8004c06:	4620      	mov	r0, r4
 8004c08:	f000 f830 	bl	8004c6c <_getpid_r>
 8004c0c:	462a      	mov	r2, r5
 8004c0e:	4601      	mov	r1, r0
 8004c10:	4620      	mov	r0, r4
 8004c12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c16:	f000 b817 	b.w	8004c48 <_kill_r>
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d00a      	beq.n	8004c34 <_raise_r+0x4c>
 8004c1e:	1c59      	adds	r1, r3, #1
 8004c20:	d103      	bne.n	8004c2a <_raise_r+0x42>
 8004c22:	2316      	movs	r3, #22
 8004c24:	6003      	str	r3, [r0, #0]
 8004c26:	2001      	movs	r0, #1
 8004c28:	e7e7      	b.n	8004bfa <_raise_r+0x12>
 8004c2a:	2400      	movs	r4, #0
 8004c2c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004c30:	4628      	mov	r0, r5
 8004c32:	4798      	blx	r3
 8004c34:	2000      	movs	r0, #0
 8004c36:	e7e0      	b.n	8004bfa <_raise_r+0x12>

08004c38 <raise>:
 8004c38:	4b02      	ldr	r3, [pc, #8]	; (8004c44 <raise+0xc>)
 8004c3a:	4601      	mov	r1, r0
 8004c3c:	6818      	ldr	r0, [r3, #0]
 8004c3e:	f7ff bfd3 	b.w	8004be8 <_raise_r>
 8004c42:	bf00      	nop
 8004c44:	2000001c 	.word	0x2000001c

08004c48 <_kill_r>:
 8004c48:	b538      	push	{r3, r4, r5, lr}
 8004c4a:	4d07      	ldr	r5, [pc, #28]	; (8004c68 <_kill_r+0x20>)
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	4604      	mov	r4, r0
 8004c50:	4608      	mov	r0, r1
 8004c52:	4611      	mov	r1, r2
 8004c54:	602b      	str	r3, [r5, #0]
 8004c56:	f7fc fc15 	bl	8001484 <_kill>
 8004c5a:	1c43      	adds	r3, r0, #1
 8004c5c:	d102      	bne.n	8004c64 <_kill_r+0x1c>
 8004c5e:	682b      	ldr	r3, [r5, #0]
 8004c60:	b103      	cbz	r3, 8004c64 <_kill_r+0x1c>
 8004c62:	6023      	str	r3, [r4, #0]
 8004c64:	bd38      	pop	{r3, r4, r5, pc}
 8004c66:	bf00      	nop
 8004c68:	20000218 	.word	0x20000218

08004c6c <_getpid_r>:
 8004c6c:	f7fc bc02 	b.w	8001474 <_getpid>

08004c70 <__assert_func>:
 8004c70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004c72:	4614      	mov	r4, r2
 8004c74:	461a      	mov	r2, r3
 8004c76:	4b09      	ldr	r3, [pc, #36]	; (8004c9c <__assert_func+0x2c>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4605      	mov	r5, r0
 8004c7c:	68d8      	ldr	r0, [r3, #12]
 8004c7e:	b14c      	cbz	r4, 8004c94 <__assert_func+0x24>
 8004c80:	4b07      	ldr	r3, [pc, #28]	; (8004ca0 <__assert_func+0x30>)
 8004c82:	9100      	str	r1, [sp, #0]
 8004c84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004c88:	4906      	ldr	r1, [pc, #24]	; (8004ca4 <__assert_func+0x34>)
 8004c8a:	462b      	mov	r3, r5
 8004c8c:	f000 f80e 	bl	8004cac <fiprintf>
 8004c90:	f7ff fe6e 	bl	8004970 <abort>
 8004c94:	4b04      	ldr	r3, [pc, #16]	; (8004ca8 <__assert_func+0x38>)
 8004c96:	461c      	mov	r4, r3
 8004c98:	e7f3      	b.n	8004c82 <__assert_func+0x12>
 8004c9a:	bf00      	nop
 8004c9c:	2000001c 	.word	0x2000001c
 8004ca0:	08005aba 	.word	0x08005aba
 8004ca4:	08005ac7 	.word	0x08005ac7
 8004ca8:	08005af5 	.word	0x08005af5

08004cac <fiprintf>:
 8004cac:	b40e      	push	{r1, r2, r3}
 8004cae:	b503      	push	{r0, r1, lr}
 8004cb0:	4601      	mov	r1, r0
 8004cb2:	ab03      	add	r3, sp, #12
 8004cb4:	4805      	ldr	r0, [pc, #20]	; (8004ccc <fiprintf+0x20>)
 8004cb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8004cba:	6800      	ldr	r0, [r0, #0]
 8004cbc:	9301      	str	r3, [sp, #4]
 8004cbe:	f000 f83d 	bl	8004d3c <_vfiprintf_r>
 8004cc2:	b002      	add	sp, #8
 8004cc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004cc8:	b003      	add	sp, #12
 8004cca:	4770      	bx	lr
 8004ccc:	2000001c 	.word	0x2000001c

08004cd0 <__malloc_lock>:
 8004cd0:	4801      	ldr	r0, [pc, #4]	; (8004cd8 <__malloc_lock+0x8>)
 8004cd2:	f000 bd6f 	b.w	80057b4 <__retarget_lock_acquire_recursive>
 8004cd6:	bf00      	nop
 8004cd8:	20000220 	.word	0x20000220

08004cdc <__malloc_unlock>:
 8004cdc:	4801      	ldr	r0, [pc, #4]	; (8004ce4 <__malloc_unlock+0x8>)
 8004cde:	f000 bd6a 	b.w	80057b6 <__retarget_lock_release_recursive>
 8004ce2:	bf00      	nop
 8004ce4:	20000220 	.word	0x20000220

08004ce8 <__sfputc_r>:
 8004ce8:	6893      	ldr	r3, [r2, #8]
 8004cea:	3b01      	subs	r3, #1
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	b410      	push	{r4}
 8004cf0:	6093      	str	r3, [r2, #8]
 8004cf2:	da08      	bge.n	8004d06 <__sfputc_r+0x1e>
 8004cf4:	6994      	ldr	r4, [r2, #24]
 8004cf6:	42a3      	cmp	r3, r4
 8004cf8:	db01      	blt.n	8004cfe <__sfputc_r+0x16>
 8004cfa:	290a      	cmp	r1, #10
 8004cfc:	d103      	bne.n	8004d06 <__sfputc_r+0x1e>
 8004cfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d02:	f000 badf 	b.w	80052c4 <__swbuf_r>
 8004d06:	6813      	ldr	r3, [r2, #0]
 8004d08:	1c58      	adds	r0, r3, #1
 8004d0a:	6010      	str	r0, [r2, #0]
 8004d0c:	7019      	strb	r1, [r3, #0]
 8004d0e:	4608      	mov	r0, r1
 8004d10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d14:	4770      	bx	lr

08004d16 <__sfputs_r>:
 8004d16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d18:	4606      	mov	r6, r0
 8004d1a:	460f      	mov	r7, r1
 8004d1c:	4614      	mov	r4, r2
 8004d1e:	18d5      	adds	r5, r2, r3
 8004d20:	42ac      	cmp	r4, r5
 8004d22:	d101      	bne.n	8004d28 <__sfputs_r+0x12>
 8004d24:	2000      	movs	r0, #0
 8004d26:	e007      	b.n	8004d38 <__sfputs_r+0x22>
 8004d28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d2c:	463a      	mov	r2, r7
 8004d2e:	4630      	mov	r0, r6
 8004d30:	f7ff ffda 	bl	8004ce8 <__sfputc_r>
 8004d34:	1c43      	adds	r3, r0, #1
 8004d36:	d1f3      	bne.n	8004d20 <__sfputs_r+0xa>
 8004d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004d3c <_vfiprintf_r>:
 8004d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d40:	460d      	mov	r5, r1
 8004d42:	b09d      	sub	sp, #116	; 0x74
 8004d44:	4614      	mov	r4, r2
 8004d46:	4698      	mov	r8, r3
 8004d48:	4606      	mov	r6, r0
 8004d4a:	b118      	cbz	r0, 8004d54 <_vfiprintf_r+0x18>
 8004d4c:	6983      	ldr	r3, [r0, #24]
 8004d4e:	b90b      	cbnz	r3, 8004d54 <_vfiprintf_r+0x18>
 8004d50:	f000 fc92 	bl	8005678 <__sinit>
 8004d54:	4b89      	ldr	r3, [pc, #548]	; (8004f7c <_vfiprintf_r+0x240>)
 8004d56:	429d      	cmp	r5, r3
 8004d58:	d11b      	bne.n	8004d92 <_vfiprintf_r+0x56>
 8004d5a:	6875      	ldr	r5, [r6, #4]
 8004d5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004d5e:	07d9      	lsls	r1, r3, #31
 8004d60:	d405      	bmi.n	8004d6e <_vfiprintf_r+0x32>
 8004d62:	89ab      	ldrh	r3, [r5, #12]
 8004d64:	059a      	lsls	r2, r3, #22
 8004d66:	d402      	bmi.n	8004d6e <_vfiprintf_r+0x32>
 8004d68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004d6a:	f000 fd23 	bl	80057b4 <__retarget_lock_acquire_recursive>
 8004d6e:	89ab      	ldrh	r3, [r5, #12]
 8004d70:	071b      	lsls	r3, r3, #28
 8004d72:	d501      	bpl.n	8004d78 <_vfiprintf_r+0x3c>
 8004d74:	692b      	ldr	r3, [r5, #16]
 8004d76:	b9eb      	cbnz	r3, 8004db4 <_vfiprintf_r+0x78>
 8004d78:	4629      	mov	r1, r5
 8004d7a:	4630      	mov	r0, r6
 8004d7c:	f000 faf4 	bl	8005368 <__swsetup_r>
 8004d80:	b1c0      	cbz	r0, 8004db4 <_vfiprintf_r+0x78>
 8004d82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004d84:	07dc      	lsls	r4, r3, #31
 8004d86:	d50e      	bpl.n	8004da6 <_vfiprintf_r+0x6a>
 8004d88:	f04f 30ff 	mov.w	r0, #4294967295
 8004d8c:	b01d      	add	sp, #116	; 0x74
 8004d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d92:	4b7b      	ldr	r3, [pc, #492]	; (8004f80 <_vfiprintf_r+0x244>)
 8004d94:	429d      	cmp	r5, r3
 8004d96:	d101      	bne.n	8004d9c <_vfiprintf_r+0x60>
 8004d98:	68b5      	ldr	r5, [r6, #8]
 8004d9a:	e7df      	b.n	8004d5c <_vfiprintf_r+0x20>
 8004d9c:	4b79      	ldr	r3, [pc, #484]	; (8004f84 <_vfiprintf_r+0x248>)
 8004d9e:	429d      	cmp	r5, r3
 8004da0:	bf08      	it	eq
 8004da2:	68f5      	ldreq	r5, [r6, #12]
 8004da4:	e7da      	b.n	8004d5c <_vfiprintf_r+0x20>
 8004da6:	89ab      	ldrh	r3, [r5, #12]
 8004da8:	0598      	lsls	r0, r3, #22
 8004daa:	d4ed      	bmi.n	8004d88 <_vfiprintf_r+0x4c>
 8004dac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004dae:	f000 fd02 	bl	80057b6 <__retarget_lock_release_recursive>
 8004db2:	e7e9      	b.n	8004d88 <_vfiprintf_r+0x4c>
 8004db4:	2300      	movs	r3, #0
 8004db6:	9309      	str	r3, [sp, #36]	; 0x24
 8004db8:	2320      	movs	r3, #32
 8004dba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004dbe:	f8cd 800c 	str.w	r8, [sp, #12]
 8004dc2:	2330      	movs	r3, #48	; 0x30
 8004dc4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004f88 <_vfiprintf_r+0x24c>
 8004dc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004dcc:	f04f 0901 	mov.w	r9, #1
 8004dd0:	4623      	mov	r3, r4
 8004dd2:	469a      	mov	sl, r3
 8004dd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004dd8:	b10a      	cbz	r2, 8004dde <_vfiprintf_r+0xa2>
 8004dda:	2a25      	cmp	r2, #37	; 0x25
 8004ddc:	d1f9      	bne.n	8004dd2 <_vfiprintf_r+0x96>
 8004dde:	ebba 0b04 	subs.w	fp, sl, r4
 8004de2:	d00b      	beq.n	8004dfc <_vfiprintf_r+0xc0>
 8004de4:	465b      	mov	r3, fp
 8004de6:	4622      	mov	r2, r4
 8004de8:	4629      	mov	r1, r5
 8004dea:	4630      	mov	r0, r6
 8004dec:	f7ff ff93 	bl	8004d16 <__sfputs_r>
 8004df0:	3001      	adds	r0, #1
 8004df2:	f000 80aa 	beq.w	8004f4a <_vfiprintf_r+0x20e>
 8004df6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004df8:	445a      	add	r2, fp
 8004dfa:	9209      	str	r2, [sp, #36]	; 0x24
 8004dfc:	f89a 3000 	ldrb.w	r3, [sl]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	f000 80a2 	beq.w	8004f4a <_vfiprintf_r+0x20e>
 8004e06:	2300      	movs	r3, #0
 8004e08:	f04f 32ff 	mov.w	r2, #4294967295
 8004e0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e10:	f10a 0a01 	add.w	sl, sl, #1
 8004e14:	9304      	str	r3, [sp, #16]
 8004e16:	9307      	str	r3, [sp, #28]
 8004e18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e1c:	931a      	str	r3, [sp, #104]	; 0x68
 8004e1e:	4654      	mov	r4, sl
 8004e20:	2205      	movs	r2, #5
 8004e22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e26:	4858      	ldr	r0, [pc, #352]	; (8004f88 <_vfiprintf_r+0x24c>)
 8004e28:	f7fb f9d2 	bl	80001d0 <memchr>
 8004e2c:	9a04      	ldr	r2, [sp, #16]
 8004e2e:	b9d8      	cbnz	r0, 8004e68 <_vfiprintf_r+0x12c>
 8004e30:	06d1      	lsls	r1, r2, #27
 8004e32:	bf44      	itt	mi
 8004e34:	2320      	movmi	r3, #32
 8004e36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e3a:	0713      	lsls	r3, r2, #28
 8004e3c:	bf44      	itt	mi
 8004e3e:	232b      	movmi	r3, #43	; 0x2b
 8004e40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e44:	f89a 3000 	ldrb.w	r3, [sl]
 8004e48:	2b2a      	cmp	r3, #42	; 0x2a
 8004e4a:	d015      	beq.n	8004e78 <_vfiprintf_r+0x13c>
 8004e4c:	9a07      	ldr	r2, [sp, #28]
 8004e4e:	4654      	mov	r4, sl
 8004e50:	2000      	movs	r0, #0
 8004e52:	f04f 0c0a 	mov.w	ip, #10
 8004e56:	4621      	mov	r1, r4
 8004e58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e5c:	3b30      	subs	r3, #48	; 0x30
 8004e5e:	2b09      	cmp	r3, #9
 8004e60:	d94e      	bls.n	8004f00 <_vfiprintf_r+0x1c4>
 8004e62:	b1b0      	cbz	r0, 8004e92 <_vfiprintf_r+0x156>
 8004e64:	9207      	str	r2, [sp, #28]
 8004e66:	e014      	b.n	8004e92 <_vfiprintf_r+0x156>
 8004e68:	eba0 0308 	sub.w	r3, r0, r8
 8004e6c:	fa09 f303 	lsl.w	r3, r9, r3
 8004e70:	4313      	orrs	r3, r2
 8004e72:	9304      	str	r3, [sp, #16]
 8004e74:	46a2      	mov	sl, r4
 8004e76:	e7d2      	b.n	8004e1e <_vfiprintf_r+0xe2>
 8004e78:	9b03      	ldr	r3, [sp, #12]
 8004e7a:	1d19      	adds	r1, r3, #4
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	9103      	str	r1, [sp, #12]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	bfbb      	ittet	lt
 8004e84:	425b      	neglt	r3, r3
 8004e86:	f042 0202 	orrlt.w	r2, r2, #2
 8004e8a:	9307      	strge	r3, [sp, #28]
 8004e8c:	9307      	strlt	r3, [sp, #28]
 8004e8e:	bfb8      	it	lt
 8004e90:	9204      	strlt	r2, [sp, #16]
 8004e92:	7823      	ldrb	r3, [r4, #0]
 8004e94:	2b2e      	cmp	r3, #46	; 0x2e
 8004e96:	d10c      	bne.n	8004eb2 <_vfiprintf_r+0x176>
 8004e98:	7863      	ldrb	r3, [r4, #1]
 8004e9a:	2b2a      	cmp	r3, #42	; 0x2a
 8004e9c:	d135      	bne.n	8004f0a <_vfiprintf_r+0x1ce>
 8004e9e:	9b03      	ldr	r3, [sp, #12]
 8004ea0:	1d1a      	adds	r2, r3, #4
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	9203      	str	r2, [sp, #12]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	bfb8      	it	lt
 8004eaa:	f04f 33ff 	movlt.w	r3, #4294967295
 8004eae:	3402      	adds	r4, #2
 8004eb0:	9305      	str	r3, [sp, #20]
 8004eb2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004f98 <_vfiprintf_r+0x25c>
 8004eb6:	7821      	ldrb	r1, [r4, #0]
 8004eb8:	2203      	movs	r2, #3
 8004eba:	4650      	mov	r0, sl
 8004ebc:	f7fb f988 	bl	80001d0 <memchr>
 8004ec0:	b140      	cbz	r0, 8004ed4 <_vfiprintf_r+0x198>
 8004ec2:	2340      	movs	r3, #64	; 0x40
 8004ec4:	eba0 000a 	sub.w	r0, r0, sl
 8004ec8:	fa03 f000 	lsl.w	r0, r3, r0
 8004ecc:	9b04      	ldr	r3, [sp, #16]
 8004ece:	4303      	orrs	r3, r0
 8004ed0:	3401      	adds	r4, #1
 8004ed2:	9304      	str	r3, [sp, #16]
 8004ed4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ed8:	482c      	ldr	r0, [pc, #176]	; (8004f8c <_vfiprintf_r+0x250>)
 8004eda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ede:	2206      	movs	r2, #6
 8004ee0:	f7fb f976 	bl	80001d0 <memchr>
 8004ee4:	2800      	cmp	r0, #0
 8004ee6:	d03f      	beq.n	8004f68 <_vfiprintf_r+0x22c>
 8004ee8:	4b29      	ldr	r3, [pc, #164]	; (8004f90 <_vfiprintf_r+0x254>)
 8004eea:	bb1b      	cbnz	r3, 8004f34 <_vfiprintf_r+0x1f8>
 8004eec:	9b03      	ldr	r3, [sp, #12]
 8004eee:	3307      	adds	r3, #7
 8004ef0:	f023 0307 	bic.w	r3, r3, #7
 8004ef4:	3308      	adds	r3, #8
 8004ef6:	9303      	str	r3, [sp, #12]
 8004ef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004efa:	443b      	add	r3, r7
 8004efc:	9309      	str	r3, [sp, #36]	; 0x24
 8004efe:	e767      	b.n	8004dd0 <_vfiprintf_r+0x94>
 8004f00:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f04:	460c      	mov	r4, r1
 8004f06:	2001      	movs	r0, #1
 8004f08:	e7a5      	b.n	8004e56 <_vfiprintf_r+0x11a>
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	3401      	adds	r4, #1
 8004f0e:	9305      	str	r3, [sp, #20]
 8004f10:	4619      	mov	r1, r3
 8004f12:	f04f 0c0a 	mov.w	ip, #10
 8004f16:	4620      	mov	r0, r4
 8004f18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f1c:	3a30      	subs	r2, #48	; 0x30
 8004f1e:	2a09      	cmp	r2, #9
 8004f20:	d903      	bls.n	8004f2a <_vfiprintf_r+0x1ee>
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d0c5      	beq.n	8004eb2 <_vfiprintf_r+0x176>
 8004f26:	9105      	str	r1, [sp, #20]
 8004f28:	e7c3      	b.n	8004eb2 <_vfiprintf_r+0x176>
 8004f2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f2e:	4604      	mov	r4, r0
 8004f30:	2301      	movs	r3, #1
 8004f32:	e7f0      	b.n	8004f16 <_vfiprintf_r+0x1da>
 8004f34:	ab03      	add	r3, sp, #12
 8004f36:	9300      	str	r3, [sp, #0]
 8004f38:	462a      	mov	r2, r5
 8004f3a:	4b16      	ldr	r3, [pc, #88]	; (8004f94 <_vfiprintf_r+0x258>)
 8004f3c:	a904      	add	r1, sp, #16
 8004f3e:	4630      	mov	r0, r6
 8004f40:	f3af 8000 	nop.w
 8004f44:	4607      	mov	r7, r0
 8004f46:	1c78      	adds	r0, r7, #1
 8004f48:	d1d6      	bne.n	8004ef8 <_vfiprintf_r+0x1bc>
 8004f4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f4c:	07d9      	lsls	r1, r3, #31
 8004f4e:	d405      	bmi.n	8004f5c <_vfiprintf_r+0x220>
 8004f50:	89ab      	ldrh	r3, [r5, #12]
 8004f52:	059a      	lsls	r2, r3, #22
 8004f54:	d402      	bmi.n	8004f5c <_vfiprintf_r+0x220>
 8004f56:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f58:	f000 fc2d 	bl	80057b6 <__retarget_lock_release_recursive>
 8004f5c:	89ab      	ldrh	r3, [r5, #12]
 8004f5e:	065b      	lsls	r3, r3, #25
 8004f60:	f53f af12 	bmi.w	8004d88 <_vfiprintf_r+0x4c>
 8004f64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f66:	e711      	b.n	8004d8c <_vfiprintf_r+0x50>
 8004f68:	ab03      	add	r3, sp, #12
 8004f6a:	9300      	str	r3, [sp, #0]
 8004f6c:	462a      	mov	r2, r5
 8004f6e:	4b09      	ldr	r3, [pc, #36]	; (8004f94 <_vfiprintf_r+0x258>)
 8004f70:	a904      	add	r1, sp, #16
 8004f72:	4630      	mov	r0, r6
 8004f74:	f000 f880 	bl	8005078 <_printf_i>
 8004f78:	e7e4      	b.n	8004f44 <_vfiprintf_r+0x208>
 8004f7a:	bf00      	nop
 8004f7c:	08005b4c 	.word	0x08005b4c
 8004f80:	08005b6c 	.word	0x08005b6c
 8004f84:	08005b2c 	.word	0x08005b2c
 8004f88:	08005af6 	.word	0x08005af6
 8004f8c:	08005b00 	.word	0x08005b00
 8004f90:	00000000 	.word	0x00000000
 8004f94:	08004d17 	.word	0x08004d17
 8004f98:	08005afc 	.word	0x08005afc

08004f9c <_printf_common>:
 8004f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fa0:	4616      	mov	r6, r2
 8004fa2:	4699      	mov	r9, r3
 8004fa4:	688a      	ldr	r2, [r1, #8]
 8004fa6:	690b      	ldr	r3, [r1, #16]
 8004fa8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004fac:	4293      	cmp	r3, r2
 8004fae:	bfb8      	it	lt
 8004fb0:	4613      	movlt	r3, r2
 8004fb2:	6033      	str	r3, [r6, #0]
 8004fb4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004fb8:	4607      	mov	r7, r0
 8004fba:	460c      	mov	r4, r1
 8004fbc:	b10a      	cbz	r2, 8004fc2 <_printf_common+0x26>
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	6033      	str	r3, [r6, #0]
 8004fc2:	6823      	ldr	r3, [r4, #0]
 8004fc4:	0699      	lsls	r1, r3, #26
 8004fc6:	bf42      	ittt	mi
 8004fc8:	6833      	ldrmi	r3, [r6, #0]
 8004fca:	3302      	addmi	r3, #2
 8004fcc:	6033      	strmi	r3, [r6, #0]
 8004fce:	6825      	ldr	r5, [r4, #0]
 8004fd0:	f015 0506 	ands.w	r5, r5, #6
 8004fd4:	d106      	bne.n	8004fe4 <_printf_common+0x48>
 8004fd6:	f104 0a19 	add.w	sl, r4, #25
 8004fda:	68e3      	ldr	r3, [r4, #12]
 8004fdc:	6832      	ldr	r2, [r6, #0]
 8004fde:	1a9b      	subs	r3, r3, r2
 8004fe0:	42ab      	cmp	r3, r5
 8004fe2:	dc26      	bgt.n	8005032 <_printf_common+0x96>
 8004fe4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004fe8:	1e13      	subs	r3, r2, #0
 8004fea:	6822      	ldr	r2, [r4, #0]
 8004fec:	bf18      	it	ne
 8004fee:	2301      	movne	r3, #1
 8004ff0:	0692      	lsls	r2, r2, #26
 8004ff2:	d42b      	bmi.n	800504c <_printf_common+0xb0>
 8004ff4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ff8:	4649      	mov	r1, r9
 8004ffa:	4638      	mov	r0, r7
 8004ffc:	47c0      	blx	r8
 8004ffe:	3001      	adds	r0, #1
 8005000:	d01e      	beq.n	8005040 <_printf_common+0xa4>
 8005002:	6823      	ldr	r3, [r4, #0]
 8005004:	68e5      	ldr	r5, [r4, #12]
 8005006:	6832      	ldr	r2, [r6, #0]
 8005008:	f003 0306 	and.w	r3, r3, #6
 800500c:	2b04      	cmp	r3, #4
 800500e:	bf08      	it	eq
 8005010:	1aad      	subeq	r5, r5, r2
 8005012:	68a3      	ldr	r3, [r4, #8]
 8005014:	6922      	ldr	r2, [r4, #16]
 8005016:	bf0c      	ite	eq
 8005018:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800501c:	2500      	movne	r5, #0
 800501e:	4293      	cmp	r3, r2
 8005020:	bfc4      	itt	gt
 8005022:	1a9b      	subgt	r3, r3, r2
 8005024:	18ed      	addgt	r5, r5, r3
 8005026:	2600      	movs	r6, #0
 8005028:	341a      	adds	r4, #26
 800502a:	42b5      	cmp	r5, r6
 800502c:	d11a      	bne.n	8005064 <_printf_common+0xc8>
 800502e:	2000      	movs	r0, #0
 8005030:	e008      	b.n	8005044 <_printf_common+0xa8>
 8005032:	2301      	movs	r3, #1
 8005034:	4652      	mov	r2, sl
 8005036:	4649      	mov	r1, r9
 8005038:	4638      	mov	r0, r7
 800503a:	47c0      	blx	r8
 800503c:	3001      	adds	r0, #1
 800503e:	d103      	bne.n	8005048 <_printf_common+0xac>
 8005040:	f04f 30ff 	mov.w	r0, #4294967295
 8005044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005048:	3501      	adds	r5, #1
 800504a:	e7c6      	b.n	8004fda <_printf_common+0x3e>
 800504c:	18e1      	adds	r1, r4, r3
 800504e:	1c5a      	adds	r2, r3, #1
 8005050:	2030      	movs	r0, #48	; 0x30
 8005052:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005056:	4422      	add	r2, r4
 8005058:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800505c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005060:	3302      	adds	r3, #2
 8005062:	e7c7      	b.n	8004ff4 <_printf_common+0x58>
 8005064:	2301      	movs	r3, #1
 8005066:	4622      	mov	r2, r4
 8005068:	4649      	mov	r1, r9
 800506a:	4638      	mov	r0, r7
 800506c:	47c0      	blx	r8
 800506e:	3001      	adds	r0, #1
 8005070:	d0e6      	beq.n	8005040 <_printf_common+0xa4>
 8005072:	3601      	adds	r6, #1
 8005074:	e7d9      	b.n	800502a <_printf_common+0x8e>
	...

08005078 <_printf_i>:
 8005078:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800507c:	460c      	mov	r4, r1
 800507e:	4691      	mov	r9, r2
 8005080:	7e27      	ldrb	r7, [r4, #24]
 8005082:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005084:	2f78      	cmp	r7, #120	; 0x78
 8005086:	4680      	mov	r8, r0
 8005088:	469a      	mov	sl, r3
 800508a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800508e:	d807      	bhi.n	80050a0 <_printf_i+0x28>
 8005090:	2f62      	cmp	r7, #98	; 0x62
 8005092:	d80a      	bhi.n	80050aa <_printf_i+0x32>
 8005094:	2f00      	cmp	r7, #0
 8005096:	f000 80d8 	beq.w	800524a <_printf_i+0x1d2>
 800509a:	2f58      	cmp	r7, #88	; 0x58
 800509c:	f000 80a3 	beq.w	80051e6 <_printf_i+0x16e>
 80050a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80050a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80050a8:	e03a      	b.n	8005120 <_printf_i+0xa8>
 80050aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80050ae:	2b15      	cmp	r3, #21
 80050b0:	d8f6      	bhi.n	80050a0 <_printf_i+0x28>
 80050b2:	a001      	add	r0, pc, #4	; (adr r0, 80050b8 <_printf_i+0x40>)
 80050b4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80050b8:	08005111 	.word	0x08005111
 80050bc:	08005125 	.word	0x08005125
 80050c0:	080050a1 	.word	0x080050a1
 80050c4:	080050a1 	.word	0x080050a1
 80050c8:	080050a1 	.word	0x080050a1
 80050cc:	080050a1 	.word	0x080050a1
 80050d0:	08005125 	.word	0x08005125
 80050d4:	080050a1 	.word	0x080050a1
 80050d8:	080050a1 	.word	0x080050a1
 80050dc:	080050a1 	.word	0x080050a1
 80050e0:	080050a1 	.word	0x080050a1
 80050e4:	08005231 	.word	0x08005231
 80050e8:	08005155 	.word	0x08005155
 80050ec:	08005213 	.word	0x08005213
 80050f0:	080050a1 	.word	0x080050a1
 80050f4:	080050a1 	.word	0x080050a1
 80050f8:	08005253 	.word	0x08005253
 80050fc:	080050a1 	.word	0x080050a1
 8005100:	08005155 	.word	0x08005155
 8005104:	080050a1 	.word	0x080050a1
 8005108:	080050a1 	.word	0x080050a1
 800510c:	0800521b 	.word	0x0800521b
 8005110:	680b      	ldr	r3, [r1, #0]
 8005112:	1d1a      	adds	r2, r3, #4
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	600a      	str	r2, [r1, #0]
 8005118:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800511c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005120:	2301      	movs	r3, #1
 8005122:	e0a3      	b.n	800526c <_printf_i+0x1f4>
 8005124:	6825      	ldr	r5, [r4, #0]
 8005126:	6808      	ldr	r0, [r1, #0]
 8005128:	062e      	lsls	r6, r5, #24
 800512a:	f100 0304 	add.w	r3, r0, #4
 800512e:	d50a      	bpl.n	8005146 <_printf_i+0xce>
 8005130:	6805      	ldr	r5, [r0, #0]
 8005132:	600b      	str	r3, [r1, #0]
 8005134:	2d00      	cmp	r5, #0
 8005136:	da03      	bge.n	8005140 <_printf_i+0xc8>
 8005138:	232d      	movs	r3, #45	; 0x2d
 800513a:	426d      	negs	r5, r5
 800513c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005140:	485e      	ldr	r0, [pc, #376]	; (80052bc <_printf_i+0x244>)
 8005142:	230a      	movs	r3, #10
 8005144:	e019      	b.n	800517a <_printf_i+0x102>
 8005146:	f015 0f40 	tst.w	r5, #64	; 0x40
 800514a:	6805      	ldr	r5, [r0, #0]
 800514c:	600b      	str	r3, [r1, #0]
 800514e:	bf18      	it	ne
 8005150:	b22d      	sxthne	r5, r5
 8005152:	e7ef      	b.n	8005134 <_printf_i+0xbc>
 8005154:	680b      	ldr	r3, [r1, #0]
 8005156:	6825      	ldr	r5, [r4, #0]
 8005158:	1d18      	adds	r0, r3, #4
 800515a:	6008      	str	r0, [r1, #0]
 800515c:	0628      	lsls	r0, r5, #24
 800515e:	d501      	bpl.n	8005164 <_printf_i+0xec>
 8005160:	681d      	ldr	r5, [r3, #0]
 8005162:	e002      	b.n	800516a <_printf_i+0xf2>
 8005164:	0669      	lsls	r1, r5, #25
 8005166:	d5fb      	bpl.n	8005160 <_printf_i+0xe8>
 8005168:	881d      	ldrh	r5, [r3, #0]
 800516a:	4854      	ldr	r0, [pc, #336]	; (80052bc <_printf_i+0x244>)
 800516c:	2f6f      	cmp	r7, #111	; 0x6f
 800516e:	bf0c      	ite	eq
 8005170:	2308      	moveq	r3, #8
 8005172:	230a      	movne	r3, #10
 8005174:	2100      	movs	r1, #0
 8005176:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800517a:	6866      	ldr	r6, [r4, #4]
 800517c:	60a6      	str	r6, [r4, #8]
 800517e:	2e00      	cmp	r6, #0
 8005180:	bfa2      	ittt	ge
 8005182:	6821      	ldrge	r1, [r4, #0]
 8005184:	f021 0104 	bicge.w	r1, r1, #4
 8005188:	6021      	strge	r1, [r4, #0]
 800518a:	b90d      	cbnz	r5, 8005190 <_printf_i+0x118>
 800518c:	2e00      	cmp	r6, #0
 800518e:	d04d      	beq.n	800522c <_printf_i+0x1b4>
 8005190:	4616      	mov	r6, r2
 8005192:	fbb5 f1f3 	udiv	r1, r5, r3
 8005196:	fb03 5711 	mls	r7, r3, r1, r5
 800519a:	5dc7      	ldrb	r7, [r0, r7]
 800519c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80051a0:	462f      	mov	r7, r5
 80051a2:	42bb      	cmp	r3, r7
 80051a4:	460d      	mov	r5, r1
 80051a6:	d9f4      	bls.n	8005192 <_printf_i+0x11a>
 80051a8:	2b08      	cmp	r3, #8
 80051aa:	d10b      	bne.n	80051c4 <_printf_i+0x14c>
 80051ac:	6823      	ldr	r3, [r4, #0]
 80051ae:	07df      	lsls	r7, r3, #31
 80051b0:	d508      	bpl.n	80051c4 <_printf_i+0x14c>
 80051b2:	6923      	ldr	r3, [r4, #16]
 80051b4:	6861      	ldr	r1, [r4, #4]
 80051b6:	4299      	cmp	r1, r3
 80051b8:	bfde      	ittt	le
 80051ba:	2330      	movle	r3, #48	; 0x30
 80051bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80051c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80051c4:	1b92      	subs	r2, r2, r6
 80051c6:	6122      	str	r2, [r4, #16]
 80051c8:	f8cd a000 	str.w	sl, [sp]
 80051cc:	464b      	mov	r3, r9
 80051ce:	aa03      	add	r2, sp, #12
 80051d0:	4621      	mov	r1, r4
 80051d2:	4640      	mov	r0, r8
 80051d4:	f7ff fee2 	bl	8004f9c <_printf_common>
 80051d8:	3001      	adds	r0, #1
 80051da:	d14c      	bne.n	8005276 <_printf_i+0x1fe>
 80051dc:	f04f 30ff 	mov.w	r0, #4294967295
 80051e0:	b004      	add	sp, #16
 80051e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051e6:	4835      	ldr	r0, [pc, #212]	; (80052bc <_printf_i+0x244>)
 80051e8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80051ec:	6823      	ldr	r3, [r4, #0]
 80051ee:	680e      	ldr	r6, [r1, #0]
 80051f0:	061f      	lsls	r7, r3, #24
 80051f2:	f856 5b04 	ldr.w	r5, [r6], #4
 80051f6:	600e      	str	r6, [r1, #0]
 80051f8:	d514      	bpl.n	8005224 <_printf_i+0x1ac>
 80051fa:	07d9      	lsls	r1, r3, #31
 80051fc:	bf44      	itt	mi
 80051fe:	f043 0320 	orrmi.w	r3, r3, #32
 8005202:	6023      	strmi	r3, [r4, #0]
 8005204:	b91d      	cbnz	r5, 800520e <_printf_i+0x196>
 8005206:	6823      	ldr	r3, [r4, #0]
 8005208:	f023 0320 	bic.w	r3, r3, #32
 800520c:	6023      	str	r3, [r4, #0]
 800520e:	2310      	movs	r3, #16
 8005210:	e7b0      	b.n	8005174 <_printf_i+0xfc>
 8005212:	6823      	ldr	r3, [r4, #0]
 8005214:	f043 0320 	orr.w	r3, r3, #32
 8005218:	6023      	str	r3, [r4, #0]
 800521a:	2378      	movs	r3, #120	; 0x78
 800521c:	4828      	ldr	r0, [pc, #160]	; (80052c0 <_printf_i+0x248>)
 800521e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005222:	e7e3      	b.n	80051ec <_printf_i+0x174>
 8005224:	065e      	lsls	r6, r3, #25
 8005226:	bf48      	it	mi
 8005228:	b2ad      	uxthmi	r5, r5
 800522a:	e7e6      	b.n	80051fa <_printf_i+0x182>
 800522c:	4616      	mov	r6, r2
 800522e:	e7bb      	b.n	80051a8 <_printf_i+0x130>
 8005230:	680b      	ldr	r3, [r1, #0]
 8005232:	6826      	ldr	r6, [r4, #0]
 8005234:	6960      	ldr	r0, [r4, #20]
 8005236:	1d1d      	adds	r5, r3, #4
 8005238:	600d      	str	r5, [r1, #0]
 800523a:	0635      	lsls	r5, r6, #24
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	d501      	bpl.n	8005244 <_printf_i+0x1cc>
 8005240:	6018      	str	r0, [r3, #0]
 8005242:	e002      	b.n	800524a <_printf_i+0x1d2>
 8005244:	0671      	lsls	r1, r6, #25
 8005246:	d5fb      	bpl.n	8005240 <_printf_i+0x1c8>
 8005248:	8018      	strh	r0, [r3, #0]
 800524a:	2300      	movs	r3, #0
 800524c:	6123      	str	r3, [r4, #16]
 800524e:	4616      	mov	r6, r2
 8005250:	e7ba      	b.n	80051c8 <_printf_i+0x150>
 8005252:	680b      	ldr	r3, [r1, #0]
 8005254:	1d1a      	adds	r2, r3, #4
 8005256:	600a      	str	r2, [r1, #0]
 8005258:	681e      	ldr	r6, [r3, #0]
 800525a:	6862      	ldr	r2, [r4, #4]
 800525c:	2100      	movs	r1, #0
 800525e:	4630      	mov	r0, r6
 8005260:	f7fa ffb6 	bl	80001d0 <memchr>
 8005264:	b108      	cbz	r0, 800526a <_printf_i+0x1f2>
 8005266:	1b80      	subs	r0, r0, r6
 8005268:	6060      	str	r0, [r4, #4]
 800526a:	6863      	ldr	r3, [r4, #4]
 800526c:	6123      	str	r3, [r4, #16]
 800526e:	2300      	movs	r3, #0
 8005270:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005274:	e7a8      	b.n	80051c8 <_printf_i+0x150>
 8005276:	6923      	ldr	r3, [r4, #16]
 8005278:	4632      	mov	r2, r6
 800527a:	4649      	mov	r1, r9
 800527c:	4640      	mov	r0, r8
 800527e:	47d0      	blx	sl
 8005280:	3001      	adds	r0, #1
 8005282:	d0ab      	beq.n	80051dc <_printf_i+0x164>
 8005284:	6823      	ldr	r3, [r4, #0]
 8005286:	079b      	lsls	r3, r3, #30
 8005288:	d413      	bmi.n	80052b2 <_printf_i+0x23a>
 800528a:	68e0      	ldr	r0, [r4, #12]
 800528c:	9b03      	ldr	r3, [sp, #12]
 800528e:	4298      	cmp	r0, r3
 8005290:	bfb8      	it	lt
 8005292:	4618      	movlt	r0, r3
 8005294:	e7a4      	b.n	80051e0 <_printf_i+0x168>
 8005296:	2301      	movs	r3, #1
 8005298:	4632      	mov	r2, r6
 800529a:	4649      	mov	r1, r9
 800529c:	4640      	mov	r0, r8
 800529e:	47d0      	blx	sl
 80052a0:	3001      	adds	r0, #1
 80052a2:	d09b      	beq.n	80051dc <_printf_i+0x164>
 80052a4:	3501      	adds	r5, #1
 80052a6:	68e3      	ldr	r3, [r4, #12]
 80052a8:	9903      	ldr	r1, [sp, #12]
 80052aa:	1a5b      	subs	r3, r3, r1
 80052ac:	42ab      	cmp	r3, r5
 80052ae:	dcf2      	bgt.n	8005296 <_printf_i+0x21e>
 80052b0:	e7eb      	b.n	800528a <_printf_i+0x212>
 80052b2:	2500      	movs	r5, #0
 80052b4:	f104 0619 	add.w	r6, r4, #25
 80052b8:	e7f5      	b.n	80052a6 <_printf_i+0x22e>
 80052ba:	bf00      	nop
 80052bc:	08005b07 	.word	0x08005b07
 80052c0:	08005b18 	.word	0x08005b18

080052c4 <__swbuf_r>:
 80052c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052c6:	460e      	mov	r6, r1
 80052c8:	4614      	mov	r4, r2
 80052ca:	4605      	mov	r5, r0
 80052cc:	b118      	cbz	r0, 80052d6 <__swbuf_r+0x12>
 80052ce:	6983      	ldr	r3, [r0, #24]
 80052d0:	b90b      	cbnz	r3, 80052d6 <__swbuf_r+0x12>
 80052d2:	f000 f9d1 	bl	8005678 <__sinit>
 80052d6:	4b21      	ldr	r3, [pc, #132]	; (800535c <__swbuf_r+0x98>)
 80052d8:	429c      	cmp	r4, r3
 80052da:	d12b      	bne.n	8005334 <__swbuf_r+0x70>
 80052dc:	686c      	ldr	r4, [r5, #4]
 80052de:	69a3      	ldr	r3, [r4, #24]
 80052e0:	60a3      	str	r3, [r4, #8]
 80052e2:	89a3      	ldrh	r3, [r4, #12]
 80052e4:	071a      	lsls	r2, r3, #28
 80052e6:	d52f      	bpl.n	8005348 <__swbuf_r+0x84>
 80052e8:	6923      	ldr	r3, [r4, #16]
 80052ea:	b36b      	cbz	r3, 8005348 <__swbuf_r+0x84>
 80052ec:	6923      	ldr	r3, [r4, #16]
 80052ee:	6820      	ldr	r0, [r4, #0]
 80052f0:	1ac0      	subs	r0, r0, r3
 80052f2:	6963      	ldr	r3, [r4, #20]
 80052f4:	b2f6      	uxtb	r6, r6
 80052f6:	4283      	cmp	r3, r0
 80052f8:	4637      	mov	r7, r6
 80052fa:	dc04      	bgt.n	8005306 <__swbuf_r+0x42>
 80052fc:	4621      	mov	r1, r4
 80052fe:	4628      	mov	r0, r5
 8005300:	f000 f926 	bl	8005550 <_fflush_r>
 8005304:	bb30      	cbnz	r0, 8005354 <__swbuf_r+0x90>
 8005306:	68a3      	ldr	r3, [r4, #8]
 8005308:	3b01      	subs	r3, #1
 800530a:	60a3      	str	r3, [r4, #8]
 800530c:	6823      	ldr	r3, [r4, #0]
 800530e:	1c5a      	adds	r2, r3, #1
 8005310:	6022      	str	r2, [r4, #0]
 8005312:	701e      	strb	r6, [r3, #0]
 8005314:	6963      	ldr	r3, [r4, #20]
 8005316:	3001      	adds	r0, #1
 8005318:	4283      	cmp	r3, r0
 800531a:	d004      	beq.n	8005326 <__swbuf_r+0x62>
 800531c:	89a3      	ldrh	r3, [r4, #12]
 800531e:	07db      	lsls	r3, r3, #31
 8005320:	d506      	bpl.n	8005330 <__swbuf_r+0x6c>
 8005322:	2e0a      	cmp	r6, #10
 8005324:	d104      	bne.n	8005330 <__swbuf_r+0x6c>
 8005326:	4621      	mov	r1, r4
 8005328:	4628      	mov	r0, r5
 800532a:	f000 f911 	bl	8005550 <_fflush_r>
 800532e:	b988      	cbnz	r0, 8005354 <__swbuf_r+0x90>
 8005330:	4638      	mov	r0, r7
 8005332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005334:	4b0a      	ldr	r3, [pc, #40]	; (8005360 <__swbuf_r+0x9c>)
 8005336:	429c      	cmp	r4, r3
 8005338:	d101      	bne.n	800533e <__swbuf_r+0x7a>
 800533a:	68ac      	ldr	r4, [r5, #8]
 800533c:	e7cf      	b.n	80052de <__swbuf_r+0x1a>
 800533e:	4b09      	ldr	r3, [pc, #36]	; (8005364 <__swbuf_r+0xa0>)
 8005340:	429c      	cmp	r4, r3
 8005342:	bf08      	it	eq
 8005344:	68ec      	ldreq	r4, [r5, #12]
 8005346:	e7ca      	b.n	80052de <__swbuf_r+0x1a>
 8005348:	4621      	mov	r1, r4
 800534a:	4628      	mov	r0, r5
 800534c:	f000 f80c 	bl	8005368 <__swsetup_r>
 8005350:	2800      	cmp	r0, #0
 8005352:	d0cb      	beq.n	80052ec <__swbuf_r+0x28>
 8005354:	f04f 37ff 	mov.w	r7, #4294967295
 8005358:	e7ea      	b.n	8005330 <__swbuf_r+0x6c>
 800535a:	bf00      	nop
 800535c:	08005b4c 	.word	0x08005b4c
 8005360:	08005b6c 	.word	0x08005b6c
 8005364:	08005b2c 	.word	0x08005b2c

08005368 <__swsetup_r>:
 8005368:	4b32      	ldr	r3, [pc, #200]	; (8005434 <__swsetup_r+0xcc>)
 800536a:	b570      	push	{r4, r5, r6, lr}
 800536c:	681d      	ldr	r5, [r3, #0]
 800536e:	4606      	mov	r6, r0
 8005370:	460c      	mov	r4, r1
 8005372:	b125      	cbz	r5, 800537e <__swsetup_r+0x16>
 8005374:	69ab      	ldr	r3, [r5, #24]
 8005376:	b913      	cbnz	r3, 800537e <__swsetup_r+0x16>
 8005378:	4628      	mov	r0, r5
 800537a:	f000 f97d 	bl	8005678 <__sinit>
 800537e:	4b2e      	ldr	r3, [pc, #184]	; (8005438 <__swsetup_r+0xd0>)
 8005380:	429c      	cmp	r4, r3
 8005382:	d10f      	bne.n	80053a4 <__swsetup_r+0x3c>
 8005384:	686c      	ldr	r4, [r5, #4]
 8005386:	89a3      	ldrh	r3, [r4, #12]
 8005388:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800538c:	0719      	lsls	r1, r3, #28
 800538e:	d42c      	bmi.n	80053ea <__swsetup_r+0x82>
 8005390:	06dd      	lsls	r5, r3, #27
 8005392:	d411      	bmi.n	80053b8 <__swsetup_r+0x50>
 8005394:	2309      	movs	r3, #9
 8005396:	6033      	str	r3, [r6, #0]
 8005398:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800539c:	81a3      	strh	r3, [r4, #12]
 800539e:	f04f 30ff 	mov.w	r0, #4294967295
 80053a2:	e03e      	b.n	8005422 <__swsetup_r+0xba>
 80053a4:	4b25      	ldr	r3, [pc, #148]	; (800543c <__swsetup_r+0xd4>)
 80053a6:	429c      	cmp	r4, r3
 80053a8:	d101      	bne.n	80053ae <__swsetup_r+0x46>
 80053aa:	68ac      	ldr	r4, [r5, #8]
 80053ac:	e7eb      	b.n	8005386 <__swsetup_r+0x1e>
 80053ae:	4b24      	ldr	r3, [pc, #144]	; (8005440 <__swsetup_r+0xd8>)
 80053b0:	429c      	cmp	r4, r3
 80053b2:	bf08      	it	eq
 80053b4:	68ec      	ldreq	r4, [r5, #12]
 80053b6:	e7e6      	b.n	8005386 <__swsetup_r+0x1e>
 80053b8:	0758      	lsls	r0, r3, #29
 80053ba:	d512      	bpl.n	80053e2 <__swsetup_r+0x7a>
 80053bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80053be:	b141      	cbz	r1, 80053d2 <__swsetup_r+0x6a>
 80053c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80053c4:	4299      	cmp	r1, r3
 80053c6:	d002      	beq.n	80053ce <__swsetup_r+0x66>
 80053c8:	4630      	mov	r0, r6
 80053ca:	f7ff fb13 	bl	80049f4 <_free_r>
 80053ce:	2300      	movs	r3, #0
 80053d0:	6363      	str	r3, [r4, #52]	; 0x34
 80053d2:	89a3      	ldrh	r3, [r4, #12]
 80053d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80053d8:	81a3      	strh	r3, [r4, #12]
 80053da:	2300      	movs	r3, #0
 80053dc:	6063      	str	r3, [r4, #4]
 80053de:	6923      	ldr	r3, [r4, #16]
 80053e0:	6023      	str	r3, [r4, #0]
 80053e2:	89a3      	ldrh	r3, [r4, #12]
 80053e4:	f043 0308 	orr.w	r3, r3, #8
 80053e8:	81a3      	strh	r3, [r4, #12]
 80053ea:	6923      	ldr	r3, [r4, #16]
 80053ec:	b94b      	cbnz	r3, 8005402 <__swsetup_r+0x9a>
 80053ee:	89a3      	ldrh	r3, [r4, #12]
 80053f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80053f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053f8:	d003      	beq.n	8005402 <__swsetup_r+0x9a>
 80053fa:	4621      	mov	r1, r4
 80053fc:	4630      	mov	r0, r6
 80053fe:	f000 f9ff 	bl	8005800 <__smakebuf_r>
 8005402:	89a0      	ldrh	r0, [r4, #12]
 8005404:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005408:	f010 0301 	ands.w	r3, r0, #1
 800540c:	d00a      	beq.n	8005424 <__swsetup_r+0xbc>
 800540e:	2300      	movs	r3, #0
 8005410:	60a3      	str	r3, [r4, #8]
 8005412:	6963      	ldr	r3, [r4, #20]
 8005414:	425b      	negs	r3, r3
 8005416:	61a3      	str	r3, [r4, #24]
 8005418:	6923      	ldr	r3, [r4, #16]
 800541a:	b943      	cbnz	r3, 800542e <__swsetup_r+0xc6>
 800541c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005420:	d1ba      	bne.n	8005398 <__swsetup_r+0x30>
 8005422:	bd70      	pop	{r4, r5, r6, pc}
 8005424:	0781      	lsls	r1, r0, #30
 8005426:	bf58      	it	pl
 8005428:	6963      	ldrpl	r3, [r4, #20]
 800542a:	60a3      	str	r3, [r4, #8]
 800542c:	e7f4      	b.n	8005418 <__swsetup_r+0xb0>
 800542e:	2000      	movs	r0, #0
 8005430:	e7f7      	b.n	8005422 <__swsetup_r+0xba>
 8005432:	bf00      	nop
 8005434:	2000001c 	.word	0x2000001c
 8005438:	08005b4c 	.word	0x08005b4c
 800543c:	08005b6c 	.word	0x08005b6c
 8005440:	08005b2c 	.word	0x08005b2c

08005444 <__sflush_r>:
 8005444:	898a      	ldrh	r2, [r1, #12]
 8005446:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800544a:	4605      	mov	r5, r0
 800544c:	0710      	lsls	r0, r2, #28
 800544e:	460c      	mov	r4, r1
 8005450:	d458      	bmi.n	8005504 <__sflush_r+0xc0>
 8005452:	684b      	ldr	r3, [r1, #4]
 8005454:	2b00      	cmp	r3, #0
 8005456:	dc05      	bgt.n	8005464 <__sflush_r+0x20>
 8005458:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800545a:	2b00      	cmp	r3, #0
 800545c:	dc02      	bgt.n	8005464 <__sflush_r+0x20>
 800545e:	2000      	movs	r0, #0
 8005460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005464:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005466:	2e00      	cmp	r6, #0
 8005468:	d0f9      	beq.n	800545e <__sflush_r+0x1a>
 800546a:	2300      	movs	r3, #0
 800546c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005470:	682f      	ldr	r7, [r5, #0]
 8005472:	602b      	str	r3, [r5, #0]
 8005474:	d032      	beq.n	80054dc <__sflush_r+0x98>
 8005476:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005478:	89a3      	ldrh	r3, [r4, #12]
 800547a:	075a      	lsls	r2, r3, #29
 800547c:	d505      	bpl.n	800548a <__sflush_r+0x46>
 800547e:	6863      	ldr	r3, [r4, #4]
 8005480:	1ac0      	subs	r0, r0, r3
 8005482:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005484:	b10b      	cbz	r3, 800548a <__sflush_r+0x46>
 8005486:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005488:	1ac0      	subs	r0, r0, r3
 800548a:	2300      	movs	r3, #0
 800548c:	4602      	mov	r2, r0
 800548e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005490:	6a21      	ldr	r1, [r4, #32]
 8005492:	4628      	mov	r0, r5
 8005494:	47b0      	blx	r6
 8005496:	1c43      	adds	r3, r0, #1
 8005498:	89a3      	ldrh	r3, [r4, #12]
 800549a:	d106      	bne.n	80054aa <__sflush_r+0x66>
 800549c:	6829      	ldr	r1, [r5, #0]
 800549e:	291d      	cmp	r1, #29
 80054a0:	d82c      	bhi.n	80054fc <__sflush_r+0xb8>
 80054a2:	4a2a      	ldr	r2, [pc, #168]	; (800554c <__sflush_r+0x108>)
 80054a4:	40ca      	lsrs	r2, r1
 80054a6:	07d6      	lsls	r6, r2, #31
 80054a8:	d528      	bpl.n	80054fc <__sflush_r+0xb8>
 80054aa:	2200      	movs	r2, #0
 80054ac:	6062      	str	r2, [r4, #4]
 80054ae:	04d9      	lsls	r1, r3, #19
 80054b0:	6922      	ldr	r2, [r4, #16]
 80054b2:	6022      	str	r2, [r4, #0]
 80054b4:	d504      	bpl.n	80054c0 <__sflush_r+0x7c>
 80054b6:	1c42      	adds	r2, r0, #1
 80054b8:	d101      	bne.n	80054be <__sflush_r+0x7a>
 80054ba:	682b      	ldr	r3, [r5, #0]
 80054bc:	b903      	cbnz	r3, 80054c0 <__sflush_r+0x7c>
 80054be:	6560      	str	r0, [r4, #84]	; 0x54
 80054c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80054c2:	602f      	str	r7, [r5, #0]
 80054c4:	2900      	cmp	r1, #0
 80054c6:	d0ca      	beq.n	800545e <__sflush_r+0x1a>
 80054c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80054cc:	4299      	cmp	r1, r3
 80054ce:	d002      	beq.n	80054d6 <__sflush_r+0x92>
 80054d0:	4628      	mov	r0, r5
 80054d2:	f7ff fa8f 	bl	80049f4 <_free_r>
 80054d6:	2000      	movs	r0, #0
 80054d8:	6360      	str	r0, [r4, #52]	; 0x34
 80054da:	e7c1      	b.n	8005460 <__sflush_r+0x1c>
 80054dc:	6a21      	ldr	r1, [r4, #32]
 80054de:	2301      	movs	r3, #1
 80054e0:	4628      	mov	r0, r5
 80054e2:	47b0      	blx	r6
 80054e4:	1c41      	adds	r1, r0, #1
 80054e6:	d1c7      	bne.n	8005478 <__sflush_r+0x34>
 80054e8:	682b      	ldr	r3, [r5, #0]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d0c4      	beq.n	8005478 <__sflush_r+0x34>
 80054ee:	2b1d      	cmp	r3, #29
 80054f0:	d001      	beq.n	80054f6 <__sflush_r+0xb2>
 80054f2:	2b16      	cmp	r3, #22
 80054f4:	d101      	bne.n	80054fa <__sflush_r+0xb6>
 80054f6:	602f      	str	r7, [r5, #0]
 80054f8:	e7b1      	b.n	800545e <__sflush_r+0x1a>
 80054fa:	89a3      	ldrh	r3, [r4, #12]
 80054fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005500:	81a3      	strh	r3, [r4, #12]
 8005502:	e7ad      	b.n	8005460 <__sflush_r+0x1c>
 8005504:	690f      	ldr	r7, [r1, #16]
 8005506:	2f00      	cmp	r7, #0
 8005508:	d0a9      	beq.n	800545e <__sflush_r+0x1a>
 800550a:	0793      	lsls	r3, r2, #30
 800550c:	680e      	ldr	r6, [r1, #0]
 800550e:	bf08      	it	eq
 8005510:	694b      	ldreq	r3, [r1, #20]
 8005512:	600f      	str	r7, [r1, #0]
 8005514:	bf18      	it	ne
 8005516:	2300      	movne	r3, #0
 8005518:	eba6 0807 	sub.w	r8, r6, r7
 800551c:	608b      	str	r3, [r1, #8]
 800551e:	f1b8 0f00 	cmp.w	r8, #0
 8005522:	dd9c      	ble.n	800545e <__sflush_r+0x1a>
 8005524:	6a21      	ldr	r1, [r4, #32]
 8005526:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005528:	4643      	mov	r3, r8
 800552a:	463a      	mov	r2, r7
 800552c:	4628      	mov	r0, r5
 800552e:	47b0      	blx	r6
 8005530:	2800      	cmp	r0, #0
 8005532:	dc06      	bgt.n	8005542 <__sflush_r+0xfe>
 8005534:	89a3      	ldrh	r3, [r4, #12]
 8005536:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800553a:	81a3      	strh	r3, [r4, #12]
 800553c:	f04f 30ff 	mov.w	r0, #4294967295
 8005540:	e78e      	b.n	8005460 <__sflush_r+0x1c>
 8005542:	4407      	add	r7, r0
 8005544:	eba8 0800 	sub.w	r8, r8, r0
 8005548:	e7e9      	b.n	800551e <__sflush_r+0xda>
 800554a:	bf00      	nop
 800554c:	20400001 	.word	0x20400001

08005550 <_fflush_r>:
 8005550:	b538      	push	{r3, r4, r5, lr}
 8005552:	690b      	ldr	r3, [r1, #16]
 8005554:	4605      	mov	r5, r0
 8005556:	460c      	mov	r4, r1
 8005558:	b913      	cbnz	r3, 8005560 <_fflush_r+0x10>
 800555a:	2500      	movs	r5, #0
 800555c:	4628      	mov	r0, r5
 800555e:	bd38      	pop	{r3, r4, r5, pc}
 8005560:	b118      	cbz	r0, 800556a <_fflush_r+0x1a>
 8005562:	6983      	ldr	r3, [r0, #24]
 8005564:	b90b      	cbnz	r3, 800556a <_fflush_r+0x1a>
 8005566:	f000 f887 	bl	8005678 <__sinit>
 800556a:	4b14      	ldr	r3, [pc, #80]	; (80055bc <_fflush_r+0x6c>)
 800556c:	429c      	cmp	r4, r3
 800556e:	d11b      	bne.n	80055a8 <_fflush_r+0x58>
 8005570:	686c      	ldr	r4, [r5, #4]
 8005572:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d0ef      	beq.n	800555a <_fflush_r+0xa>
 800557a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800557c:	07d0      	lsls	r0, r2, #31
 800557e:	d404      	bmi.n	800558a <_fflush_r+0x3a>
 8005580:	0599      	lsls	r1, r3, #22
 8005582:	d402      	bmi.n	800558a <_fflush_r+0x3a>
 8005584:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005586:	f000 f915 	bl	80057b4 <__retarget_lock_acquire_recursive>
 800558a:	4628      	mov	r0, r5
 800558c:	4621      	mov	r1, r4
 800558e:	f7ff ff59 	bl	8005444 <__sflush_r>
 8005592:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005594:	07da      	lsls	r2, r3, #31
 8005596:	4605      	mov	r5, r0
 8005598:	d4e0      	bmi.n	800555c <_fflush_r+0xc>
 800559a:	89a3      	ldrh	r3, [r4, #12]
 800559c:	059b      	lsls	r3, r3, #22
 800559e:	d4dd      	bmi.n	800555c <_fflush_r+0xc>
 80055a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055a2:	f000 f908 	bl	80057b6 <__retarget_lock_release_recursive>
 80055a6:	e7d9      	b.n	800555c <_fflush_r+0xc>
 80055a8:	4b05      	ldr	r3, [pc, #20]	; (80055c0 <_fflush_r+0x70>)
 80055aa:	429c      	cmp	r4, r3
 80055ac:	d101      	bne.n	80055b2 <_fflush_r+0x62>
 80055ae:	68ac      	ldr	r4, [r5, #8]
 80055b0:	e7df      	b.n	8005572 <_fflush_r+0x22>
 80055b2:	4b04      	ldr	r3, [pc, #16]	; (80055c4 <_fflush_r+0x74>)
 80055b4:	429c      	cmp	r4, r3
 80055b6:	bf08      	it	eq
 80055b8:	68ec      	ldreq	r4, [r5, #12]
 80055ba:	e7da      	b.n	8005572 <_fflush_r+0x22>
 80055bc:	08005b4c 	.word	0x08005b4c
 80055c0:	08005b6c 	.word	0x08005b6c
 80055c4:	08005b2c 	.word	0x08005b2c

080055c8 <std>:
 80055c8:	2300      	movs	r3, #0
 80055ca:	b510      	push	{r4, lr}
 80055cc:	4604      	mov	r4, r0
 80055ce:	e9c0 3300 	strd	r3, r3, [r0]
 80055d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80055d6:	6083      	str	r3, [r0, #8]
 80055d8:	8181      	strh	r1, [r0, #12]
 80055da:	6643      	str	r3, [r0, #100]	; 0x64
 80055dc:	81c2      	strh	r2, [r0, #14]
 80055de:	6183      	str	r3, [r0, #24]
 80055e0:	4619      	mov	r1, r3
 80055e2:	2208      	movs	r2, #8
 80055e4:	305c      	adds	r0, #92	; 0x5c
 80055e6:	f7ff f9fd 	bl	80049e4 <memset>
 80055ea:	4b05      	ldr	r3, [pc, #20]	; (8005600 <std+0x38>)
 80055ec:	6263      	str	r3, [r4, #36]	; 0x24
 80055ee:	4b05      	ldr	r3, [pc, #20]	; (8005604 <std+0x3c>)
 80055f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80055f2:	4b05      	ldr	r3, [pc, #20]	; (8005608 <std+0x40>)
 80055f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80055f6:	4b05      	ldr	r3, [pc, #20]	; (800560c <std+0x44>)
 80055f8:	6224      	str	r4, [r4, #32]
 80055fa:	6323      	str	r3, [r4, #48]	; 0x30
 80055fc:	bd10      	pop	{r4, pc}
 80055fe:	bf00      	nop
 8005600:	08005881 	.word	0x08005881
 8005604:	080058a3 	.word	0x080058a3
 8005608:	080058db 	.word	0x080058db
 800560c:	080058ff 	.word	0x080058ff

08005610 <_cleanup_r>:
 8005610:	4901      	ldr	r1, [pc, #4]	; (8005618 <_cleanup_r+0x8>)
 8005612:	f000 b8af 	b.w	8005774 <_fwalk_reent>
 8005616:	bf00      	nop
 8005618:	08005551 	.word	0x08005551

0800561c <__sfmoreglue>:
 800561c:	b570      	push	{r4, r5, r6, lr}
 800561e:	1e4a      	subs	r2, r1, #1
 8005620:	2568      	movs	r5, #104	; 0x68
 8005622:	4355      	muls	r5, r2
 8005624:	460e      	mov	r6, r1
 8005626:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800562a:	f7ff fa33 	bl	8004a94 <_malloc_r>
 800562e:	4604      	mov	r4, r0
 8005630:	b140      	cbz	r0, 8005644 <__sfmoreglue+0x28>
 8005632:	2100      	movs	r1, #0
 8005634:	e9c0 1600 	strd	r1, r6, [r0]
 8005638:	300c      	adds	r0, #12
 800563a:	60a0      	str	r0, [r4, #8]
 800563c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005640:	f7ff f9d0 	bl	80049e4 <memset>
 8005644:	4620      	mov	r0, r4
 8005646:	bd70      	pop	{r4, r5, r6, pc}

08005648 <__sfp_lock_acquire>:
 8005648:	4801      	ldr	r0, [pc, #4]	; (8005650 <__sfp_lock_acquire+0x8>)
 800564a:	f000 b8b3 	b.w	80057b4 <__retarget_lock_acquire_recursive>
 800564e:	bf00      	nop
 8005650:	20000224 	.word	0x20000224

08005654 <__sfp_lock_release>:
 8005654:	4801      	ldr	r0, [pc, #4]	; (800565c <__sfp_lock_release+0x8>)
 8005656:	f000 b8ae 	b.w	80057b6 <__retarget_lock_release_recursive>
 800565a:	bf00      	nop
 800565c:	20000224 	.word	0x20000224

08005660 <__sinit_lock_acquire>:
 8005660:	4801      	ldr	r0, [pc, #4]	; (8005668 <__sinit_lock_acquire+0x8>)
 8005662:	f000 b8a7 	b.w	80057b4 <__retarget_lock_acquire_recursive>
 8005666:	bf00      	nop
 8005668:	2000021f 	.word	0x2000021f

0800566c <__sinit_lock_release>:
 800566c:	4801      	ldr	r0, [pc, #4]	; (8005674 <__sinit_lock_release+0x8>)
 800566e:	f000 b8a2 	b.w	80057b6 <__retarget_lock_release_recursive>
 8005672:	bf00      	nop
 8005674:	2000021f 	.word	0x2000021f

08005678 <__sinit>:
 8005678:	b510      	push	{r4, lr}
 800567a:	4604      	mov	r4, r0
 800567c:	f7ff fff0 	bl	8005660 <__sinit_lock_acquire>
 8005680:	69a3      	ldr	r3, [r4, #24]
 8005682:	b11b      	cbz	r3, 800568c <__sinit+0x14>
 8005684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005688:	f7ff bff0 	b.w	800566c <__sinit_lock_release>
 800568c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005690:	6523      	str	r3, [r4, #80]	; 0x50
 8005692:	4b13      	ldr	r3, [pc, #76]	; (80056e0 <__sinit+0x68>)
 8005694:	4a13      	ldr	r2, [pc, #76]	; (80056e4 <__sinit+0x6c>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	62a2      	str	r2, [r4, #40]	; 0x28
 800569a:	42a3      	cmp	r3, r4
 800569c:	bf04      	itt	eq
 800569e:	2301      	moveq	r3, #1
 80056a0:	61a3      	streq	r3, [r4, #24]
 80056a2:	4620      	mov	r0, r4
 80056a4:	f000 f820 	bl	80056e8 <__sfp>
 80056a8:	6060      	str	r0, [r4, #4]
 80056aa:	4620      	mov	r0, r4
 80056ac:	f000 f81c 	bl	80056e8 <__sfp>
 80056b0:	60a0      	str	r0, [r4, #8]
 80056b2:	4620      	mov	r0, r4
 80056b4:	f000 f818 	bl	80056e8 <__sfp>
 80056b8:	2200      	movs	r2, #0
 80056ba:	60e0      	str	r0, [r4, #12]
 80056bc:	2104      	movs	r1, #4
 80056be:	6860      	ldr	r0, [r4, #4]
 80056c0:	f7ff ff82 	bl	80055c8 <std>
 80056c4:	68a0      	ldr	r0, [r4, #8]
 80056c6:	2201      	movs	r2, #1
 80056c8:	2109      	movs	r1, #9
 80056ca:	f7ff ff7d 	bl	80055c8 <std>
 80056ce:	68e0      	ldr	r0, [r4, #12]
 80056d0:	2202      	movs	r2, #2
 80056d2:	2112      	movs	r1, #18
 80056d4:	f7ff ff78 	bl	80055c8 <std>
 80056d8:	2301      	movs	r3, #1
 80056da:	61a3      	str	r3, [r4, #24]
 80056dc:	e7d2      	b.n	8005684 <__sinit+0xc>
 80056de:	bf00      	nop
 80056e0:	08005a40 	.word	0x08005a40
 80056e4:	08005611 	.word	0x08005611

080056e8 <__sfp>:
 80056e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ea:	4607      	mov	r7, r0
 80056ec:	f7ff ffac 	bl	8005648 <__sfp_lock_acquire>
 80056f0:	4b1e      	ldr	r3, [pc, #120]	; (800576c <__sfp+0x84>)
 80056f2:	681e      	ldr	r6, [r3, #0]
 80056f4:	69b3      	ldr	r3, [r6, #24]
 80056f6:	b913      	cbnz	r3, 80056fe <__sfp+0x16>
 80056f8:	4630      	mov	r0, r6
 80056fa:	f7ff ffbd 	bl	8005678 <__sinit>
 80056fe:	3648      	adds	r6, #72	; 0x48
 8005700:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005704:	3b01      	subs	r3, #1
 8005706:	d503      	bpl.n	8005710 <__sfp+0x28>
 8005708:	6833      	ldr	r3, [r6, #0]
 800570a:	b30b      	cbz	r3, 8005750 <__sfp+0x68>
 800570c:	6836      	ldr	r6, [r6, #0]
 800570e:	e7f7      	b.n	8005700 <__sfp+0x18>
 8005710:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005714:	b9d5      	cbnz	r5, 800574c <__sfp+0x64>
 8005716:	4b16      	ldr	r3, [pc, #88]	; (8005770 <__sfp+0x88>)
 8005718:	60e3      	str	r3, [r4, #12]
 800571a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800571e:	6665      	str	r5, [r4, #100]	; 0x64
 8005720:	f000 f847 	bl	80057b2 <__retarget_lock_init_recursive>
 8005724:	f7ff ff96 	bl	8005654 <__sfp_lock_release>
 8005728:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800572c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005730:	6025      	str	r5, [r4, #0]
 8005732:	61a5      	str	r5, [r4, #24]
 8005734:	2208      	movs	r2, #8
 8005736:	4629      	mov	r1, r5
 8005738:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800573c:	f7ff f952 	bl	80049e4 <memset>
 8005740:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005744:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005748:	4620      	mov	r0, r4
 800574a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800574c:	3468      	adds	r4, #104	; 0x68
 800574e:	e7d9      	b.n	8005704 <__sfp+0x1c>
 8005750:	2104      	movs	r1, #4
 8005752:	4638      	mov	r0, r7
 8005754:	f7ff ff62 	bl	800561c <__sfmoreglue>
 8005758:	4604      	mov	r4, r0
 800575a:	6030      	str	r0, [r6, #0]
 800575c:	2800      	cmp	r0, #0
 800575e:	d1d5      	bne.n	800570c <__sfp+0x24>
 8005760:	f7ff ff78 	bl	8005654 <__sfp_lock_release>
 8005764:	230c      	movs	r3, #12
 8005766:	603b      	str	r3, [r7, #0]
 8005768:	e7ee      	b.n	8005748 <__sfp+0x60>
 800576a:	bf00      	nop
 800576c:	08005a40 	.word	0x08005a40
 8005770:	ffff0001 	.word	0xffff0001

08005774 <_fwalk_reent>:
 8005774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005778:	4606      	mov	r6, r0
 800577a:	4688      	mov	r8, r1
 800577c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005780:	2700      	movs	r7, #0
 8005782:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005786:	f1b9 0901 	subs.w	r9, r9, #1
 800578a:	d505      	bpl.n	8005798 <_fwalk_reent+0x24>
 800578c:	6824      	ldr	r4, [r4, #0]
 800578e:	2c00      	cmp	r4, #0
 8005790:	d1f7      	bne.n	8005782 <_fwalk_reent+0xe>
 8005792:	4638      	mov	r0, r7
 8005794:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005798:	89ab      	ldrh	r3, [r5, #12]
 800579a:	2b01      	cmp	r3, #1
 800579c:	d907      	bls.n	80057ae <_fwalk_reent+0x3a>
 800579e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80057a2:	3301      	adds	r3, #1
 80057a4:	d003      	beq.n	80057ae <_fwalk_reent+0x3a>
 80057a6:	4629      	mov	r1, r5
 80057a8:	4630      	mov	r0, r6
 80057aa:	47c0      	blx	r8
 80057ac:	4307      	orrs	r7, r0
 80057ae:	3568      	adds	r5, #104	; 0x68
 80057b0:	e7e9      	b.n	8005786 <_fwalk_reent+0x12>

080057b2 <__retarget_lock_init_recursive>:
 80057b2:	4770      	bx	lr

080057b4 <__retarget_lock_acquire_recursive>:
 80057b4:	4770      	bx	lr

080057b6 <__retarget_lock_release_recursive>:
 80057b6:	4770      	bx	lr

080057b8 <__swhatbuf_r>:
 80057b8:	b570      	push	{r4, r5, r6, lr}
 80057ba:	460e      	mov	r6, r1
 80057bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057c0:	2900      	cmp	r1, #0
 80057c2:	b096      	sub	sp, #88	; 0x58
 80057c4:	4614      	mov	r4, r2
 80057c6:	461d      	mov	r5, r3
 80057c8:	da07      	bge.n	80057da <__swhatbuf_r+0x22>
 80057ca:	2300      	movs	r3, #0
 80057cc:	602b      	str	r3, [r5, #0]
 80057ce:	89b3      	ldrh	r3, [r6, #12]
 80057d0:	061a      	lsls	r2, r3, #24
 80057d2:	d410      	bmi.n	80057f6 <__swhatbuf_r+0x3e>
 80057d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057d8:	e00e      	b.n	80057f8 <__swhatbuf_r+0x40>
 80057da:	466a      	mov	r2, sp
 80057dc:	f000 f8b6 	bl	800594c <_fstat_r>
 80057e0:	2800      	cmp	r0, #0
 80057e2:	dbf2      	blt.n	80057ca <__swhatbuf_r+0x12>
 80057e4:	9a01      	ldr	r2, [sp, #4]
 80057e6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80057ea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80057ee:	425a      	negs	r2, r3
 80057f0:	415a      	adcs	r2, r3
 80057f2:	602a      	str	r2, [r5, #0]
 80057f4:	e7ee      	b.n	80057d4 <__swhatbuf_r+0x1c>
 80057f6:	2340      	movs	r3, #64	; 0x40
 80057f8:	2000      	movs	r0, #0
 80057fa:	6023      	str	r3, [r4, #0]
 80057fc:	b016      	add	sp, #88	; 0x58
 80057fe:	bd70      	pop	{r4, r5, r6, pc}

08005800 <__smakebuf_r>:
 8005800:	898b      	ldrh	r3, [r1, #12]
 8005802:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005804:	079d      	lsls	r5, r3, #30
 8005806:	4606      	mov	r6, r0
 8005808:	460c      	mov	r4, r1
 800580a:	d507      	bpl.n	800581c <__smakebuf_r+0x1c>
 800580c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005810:	6023      	str	r3, [r4, #0]
 8005812:	6123      	str	r3, [r4, #16]
 8005814:	2301      	movs	r3, #1
 8005816:	6163      	str	r3, [r4, #20]
 8005818:	b002      	add	sp, #8
 800581a:	bd70      	pop	{r4, r5, r6, pc}
 800581c:	ab01      	add	r3, sp, #4
 800581e:	466a      	mov	r2, sp
 8005820:	f7ff ffca 	bl	80057b8 <__swhatbuf_r>
 8005824:	9900      	ldr	r1, [sp, #0]
 8005826:	4605      	mov	r5, r0
 8005828:	4630      	mov	r0, r6
 800582a:	f7ff f933 	bl	8004a94 <_malloc_r>
 800582e:	b948      	cbnz	r0, 8005844 <__smakebuf_r+0x44>
 8005830:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005834:	059a      	lsls	r2, r3, #22
 8005836:	d4ef      	bmi.n	8005818 <__smakebuf_r+0x18>
 8005838:	f023 0303 	bic.w	r3, r3, #3
 800583c:	f043 0302 	orr.w	r3, r3, #2
 8005840:	81a3      	strh	r3, [r4, #12]
 8005842:	e7e3      	b.n	800580c <__smakebuf_r+0xc>
 8005844:	4b0d      	ldr	r3, [pc, #52]	; (800587c <__smakebuf_r+0x7c>)
 8005846:	62b3      	str	r3, [r6, #40]	; 0x28
 8005848:	89a3      	ldrh	r3, [r4, #12]
 800584a:	6020      	str	r0, [r4, #0]
 800584c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005850:	81a3      	strh	r3, [r4, #12]
 8005852:	9b00      	ldr	r3, [sp, #0]
 8005854:	6163      	str	r3, [r4, #20]
 8005856:	9b01      	ldr	r3, [sp, #4]
 8005858:	6120      	str	r0, [r4, #16]
 800585a:	b15b      	cbz	r3, 8005874 <__smakebuf_r+0x74>
 800585c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005860:	4630      	mov	r0, r6
 8005862:	f000 f885 	bl	8005970 <_isatty_r>
 8005866:	b128      	cbz	r0, 8005874 <__smakebuf_r+0x74>
 8005868:	89a3      	ldrh	r3, [r4, #12]
 800586a:	f023 0303 	bic.w	r3, r3, #3
 800586e:	f043 0301 	orr.w	r3, r3, #1
 8005872:	81a3      	strh	r3, [r4, #12]
 8005874:	89a0      	ldrh	r0, [r4, #12]
 8005876:	4305      	orrs	r5, r0
 8005878:	81a5      	strh	r5, [r4, #12]
 800587a:	e7cd      	b.n	8005818 <__smakebuf_r+0x18>
 800587c:	08005611 	.word	0x08005611

08005880 <__sread>:
 8005880:	b510      	push	{r4, lr}
 8005882:	460c      	mov	r4, r1
 8005884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005888:	f000 f894 	bl	80059b4 <_read_r>
 800588c:	2800      	cmp	r0, #0
 800588e:	bfab      	itete	ge
 8005890:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005892:	89a3      	ldrhlt	r3, [r4, #12]
 8005894:	181b      	addge	r3, r3, r0
 8005896:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800589a:	bfac      	ite	ge
 800589c:	6563      	strge	r3, [r4, #84]	; 0x54
 800589e:	81a3      	strhlt	r3, [r4, #12]
 80058a0:	bd10      	pop	{r4, pc}

080058a2 <__swrite>:
 80058a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058a6:	461f      	mov	r7, r3
 80058a8:	898b      	ldrh	r3, [r1, #12]
 80058aa:	05db      	lsls	r3, r3, #23
 80058ac:	4605      	mov	r5, r0
 80058ae:	460c      	mov	r4, r1
 80058b0:	4616      	mov	r6, r2
 80058b2:	d505      	bpl.n	80058c0 <__swrite+0x1e>
 80058b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058b8:	2302      	movs	r3, #2
 80058ba:	2200      	movs	r2, #0
 80058bc:	f000 f868 	bl	8005990 <_lseek_r>
 80058c0:	89a3      	ldrh	r3, [r4, #12]
 80058c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058ca:	81a3      	strh	r3, [r4, #12]
 80058cc:	4632      	mov	r2, r6
 80058ce:	463b      	mov	r3, r7
 80058d0:	4628      	mov	r0, r5
 80058d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058d6:	f000 b817 	b.w	8005908 <_write_r>

080058da <__sseek>:
 80058da:	b510      	push	{r4, lr}
 80058dc:	460c      	mov	r4, r1
 80058de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058e2:	f000 f855 	bl	8005990 <_lseek_r>
 80058e6:	1c43      	adds	r3, r0, #1
 80058e8:	89a3      	ldrh	r3, [r4, #12]
 80058ea:	bf15      	itete	ne
 80058ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80058ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80058f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80058f6:	81a3      	strheq	r3, [r4, #12]
 80058f8:	bf18      	it	ne
 80058fa:	81a3      	strhne	r3, [r4, #12]
 80058fc:	bd10      	pop	{r4, pc}

080058fe <__sclose>:
 80058fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005902:	f000 b813 	b.w	800592c <_close_r>
	...

08005908 <_write_r>:
 8005908:	b538      	push	{r3, r4, r5, lr}
 800590a:	4d07      	ldr	r5, [pc, #28]	; (8005928 <_write_r+0x20>)
 800590c:	4604      	mov	r4, r0
 800590e:	4608      	mov	r0, r1
 8005910:	4611      	mov	r1, r2
 8005912:	2200      	movs	r2, #0
 8005914:	602a      	str	r2, [r5, #0]
 8005916:	461a      	mov	r2, r3
 8005918:	f7fb fdeb 	bl	80014f2 <_write>
 800591c:	1c43      	adds	r3, r0, #1
 800591e:	d102      	bne.n	8005926 <_write_r+0x1e>
 8005920:	682b      	ldr	r3, [r5, #0]
 8005922:	b103      	cbz	r3, 8005926 <_write_r+0x1e>
 8005924:	6023      	str	r3, [r4, #0]
 8005926:	bd38      	pop	{r3, r4, r5, pc}
 8005928:	20000218 	.word	0x20000218

0800592c <_close_r>:
 800592c:	b538      	push	{r3, r4, r5, lr}
 800592e:	4d06      	ldr	r5, [pc, #24]	; (8005948 <_close_r+0x1c>)
 8005930:	2300      	movs	r3, #0
 8005932:	4604      	mov	r4, r0
 8005934:	4608      	mov	r0, r1
 8005936:	602b      	str	r3, [r5, #0]
 8005938:	f7fb fdf7 	bl	800152a <_close>
 800593c:	1c43      	adds	r3, r0, #1
 800593e:	d102      	bne.n	8005946 <_close_r+0x1a>
 8005940:	682b      	ldr	r3, [r5, #0]
 8005942:	b103      	cbz	r3, 8005946 <_close_r+0x1a>
 8005944:	6023      	str	r3, [r4, #0]
 8005946:	bd38      	pop	{r3, r4, r5, pc}
 8005948:	20000218 	.word	0x20000218

0800594c <_fstat_r>:
 800594c:	b538      	push	{r3, r4, r5, lr}
 800594e:	4d07      	ldr	r5, [pc, #28]	; (800596c <_fstat_r+0x20>)
 8005950:	2300      	movs	r3, #0
 8005952:	4604      	mov	r4, r0
 8005954:	4608      	mov	r0, r1
 8005956:	4611      	mov	r1, r2
 8005958:	602b      	str	r3, [r5, #0]
 800595a:	f7fb fdf2 	bl	8001542 <_fstat>
 800595e:	1c43      	adds	r3, r0, #1
 8005960:	d102      	bne.n	8005968 <_fstat_r+0x1c>
 8005962:	682b      	ldr	r3, [r5, #0]
 8005964:	b103      	cbz	r3, 8005968 <_fstat_r+0x1c>
 8005966:	6023      	str	r3, [r4, #0]
 8005968:	bd38      	pop	{r3, r4, r5, pc}
 800596a:	bf00      	nop
 800596c:	20000218 	.word	0x20000218

08005970 <_isatty_r>:
 8005970:	b538      	push	{r3, r4, r5, lr}
 8005972:	4d06      	ldr	r5, [pc, #24]	; (800598c <_isatty_r+0x1c>)
 8005974:	2300      	movs	r3, #0
 8005976:	4604      	mov	r4, r0
 8005978:	4608      	mov	r0, r1
 800597a:	602b      	str	r3, [r5, #0]
 800597c:	f7fb fdf1 	bl	8001562 <_isatty>
 8005980:	1c43      	adds	r3, r0, #1
 8005982:	d102      	bne.n	800598a <_isatty_r+0x1a>
 8005984:	682b      	ldr	r3, [r5, #0]
 8005986:	b103      	cbz	r3, 800598a <_isatty_r+0x1a>
 8005988:	6023      	str	r3, [r4, #0]
 800598a:	bd38      	pop	{r3, r4, r5, pc}
 800598c:	20000218 	.word	0x20000218

08005990 <_lseek_r>:
 8005990:	b538      	push	{r3, r4, r5, lr}
 8005992:	4d07      	ldr	r5, [pc, #28]	; (80059b0 <_lseek_r+0x20>)
 8005994:	4604      	mov	r4, r0
 8005996:	4608      	mov	r0, r1
 8005998:	4611      	mov	r1, r2
 800599a:	2200      	movs	r2, #0
 800599c:	602a      	str	r2, [r5, #0]
 800599e:	461a      	mov	r2, r3
 80059a0:	f7fb fdea 	bl	8001578 <_lseek>
 80059a4:	1c43      	adds	r3, r0, #1
 80059a6:	d102      	bne.n	80059ae <_lseek_r+0x1e>
 80059a8:	682b      	ldr	r3, [r5, #0]
 80059aa:	b103      	cbz	r3, 80059ae <_lseek_r+0x1e>
 80059ac:	6023      	str	r3, [r4, #0]
 80059ae:	bd38      	pop	{r3, r4, r5, pc}
 80059b0:	20000218 	.word	0x20000218

080059b4 <_read_r>:
 80059b4:	b538      	push	{r3, r4, r5, lr}
 80059b6:	4d07      	ldr	r5, [pc, #28]	; (80059d4 <_read_r+0x20>)
 80059b8:	4604      	mov	r4, r0
 80059ba:	4608      	mov	r0, r1
 80059bc:	4611      	mov	r1, r2
 80059be:	2200      	movs	r2, #0
 80059c0:	602a      	str	r2, [r5, #0]
 80059c2:	461a      	mov	r2, r3
 80059c4:	f7fb fd78 	bl	80014b8 <_read>
 80059c8:	1c43      	adds	r3, r0, #1
 80059ca:	d102      	bne.n	80059d2 <_read_r+0x1e>
 80059cc:	682b      	ldr	r3, [r5, #0]
 80059ce:	b103      	cbz	r3, 80059d2 <_read_r+0x1e>
 80059d0:	6023      	str	r3, [r4, #0]
 80059d2:	bd38      	pop	{r3, r4, r5, pc}
 80059d4:	20000218 	.word	0x20000218

080059d8 <_init>:
 80059d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059da:	bf00      	nop
 80059dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059de:	bc08      	pop	{r3}
 80059e0:	469e      	mov	lr, r3
 80059e2:	4770      	bx	lr

080059e4 <_fini>:
 80059e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059e6:	bf00      	nop
 80059e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ea:	bc08      	pop	{r3}
 80059ec:	469e      	mov	lr, r3
 80059ee:	4770      	bx	lr
